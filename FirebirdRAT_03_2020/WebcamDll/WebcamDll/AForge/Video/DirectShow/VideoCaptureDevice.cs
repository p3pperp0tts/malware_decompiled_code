using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Threading;
using AForge.Video.DirectShow.Internals;

namespace AForge.Video.DirectShow
{
	// Token: 0x0200000F RID: 15
	public class VideoCaptureDevice : IVideoSource
	{
		// Token: 0x14000002 RID: 2
		// (add) Token: 0x0600002D RID: 45 RVA: 0x00002930 File Offset: 0x00000B30
		// (remove) Token: 0x0600002E RID: 46 RVA: 0x00002968 File Offset: 0x00000B68
		public event NewFrameEventHandler NewFrame;

		// Token: 0x14000003 RID: 3
		// (add) Token: 0x0600002F RID: 47 RVA: 0x000029A0 File Offset: 0x00000BA0
		// (remove) Token: 0x06000030 RID: 48 RVA: 0x000029D8 File Offset: 0x00000BD8
		public event NewFrameEventHandler SnapshotFrame;

		// Token: 0x14000004 RID: 4
		// (add) Token: 0x06000031 RID: 49 RVA: 0x00002A10 File Offset: 0x00000C10
		// (remove) Token: 0x06000032 RID: 50 RVA: 0x00002A48 File Offset: 0x00000C48
		public event VideoSourceErrorEventHandler VideoSourceError;

		// Token: 0x14000005 RID: 5
		// (add) Token: 0x06000033 RID: 51 RVA: 0x00002A80 File Offset: 0x00000C80
		// (remove) Token: 0x06000034 RID: 52 RVA: 0x00002AB8 File Offset: 0x00000CB8
		public event PlayingFinishedEventHandler PlayingFinished;

		// Token: 0x17000005 RID: 5
		// (get) Token: 0x06000035 RID: 53 RVA: 0x00002AED File Offset: 0x00000CED
		public bool IsRunning
		{
			get
			{
				if (this.thread1 != null)
				{
					if (!this.thread1.Join(0))
					{
						return true;
					}
					this.Free();
				}
				return false;
			}
		}

		// Token: 0x17000006 RID: 6
		// (get) Token: 0x06000036 RID: 54 RVA: 0x00002B0E File Offset: 0x00000D0E
		// (set) Token: 0x06000037 RID: 55 RVA: 0x00002B16 File Offset: 0x00000D16
		public VideoCapabilities VideoResolution
		{
			get
			{
				return this.videoResolution1;
			}
			set
			{
				this.videoResolution1 = value;
			}
		}

		// Token: 0x17000007 RID: 7
		// (get) Token: 0x06000038 RID: 56 RVA: 0x00002B20 File Offset: 0x00000D20
		public VideoCapabilities[] VideoCapabilities
		{
			get
			{
				if (this.videoCapabilities1 == null)
				{
					Dictionary<string, VideoCapabilities[]> obj = VideoCaptureDevice.cacheVideoCapabilities1;
					lock (obj)
					{
						if (!string.IsNullOrEmpty(this.deviceMoniker1) && VideoCaptureDevice.cacheVideoCapabilities1.ContainsKey(this.deviceMoniker1))
						{
							this.videoCapabilities1 = VideoCaptureDevice.cacheVideoCapabilities1[this.deviceMoniker1];
						}
					}
					if (this.videoCapabilities1 == null)
					{
						if (!this.IsRunning)
						{
							this.WorkerThread(false);
						}
						else
						{
							int num = 0;
							while (num < 500 && this.videoCapabilities1 == null)
							{
								Thread.Sleep(10);
								num++;
							}
						}
					}
				}
				if (this.videoCapabilities1 == null)
				{
					return new VideoCapabilities[0];
				}
				return this.videoCapabilities1;
			}
		}

		// Token: 0x06000039 RID: 57 RVA: 0x00002BE0 File Offset: 0x00000DE0
		public VideoCaptureDevice(string deviceMoniker)
		{
			this.deviceMoniker1 = deviceMoniker;
		}

		// Token: 0x0600003A RID: 58 RVA: 0x00002C10 File Offset: 0x00000E10
		public void Start()
		{
			if (!this.IsRunning)
			{
				if (string.IsNullOrEmpty(this.deviceMoniker1))
				{
					throw new ArgumentException("Video source is not specified.");
				}
				this.framesReceived1 = 0;
				this.bytesReceived1 = 0L;
				this.isCrossbarAvailable1 = null;
				this.needToSetVideoInput1 = true;
				this.stopEvent1 = new ManualResetEvent(false);
				object obj = this.sync1;
				lock (obj)
				{
					this.thread1 = new Thread(new ThreadStart(this.WorkerThread));
					this.thread1.Name = this.deviceMoniker1;
					this.thread1.Start();
				}
			}
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00002CC8 File Offset: 0x00000EC8
		public void WaitForStop()
		{
			if (this.thread1 != null)
			{
				this.thread1.Join();
				this.Free();
			}
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00002CE3 File Offset: 0x00000EE3
		public void Stop1()
		{
			if (this.IsRunning)
			{
				this.thread1.Abort();
				this.WaitForStop();
			}
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00002CFE File Offset: 0x00000EFE
		private void Free()
		{
			this.thread1 = null;
			this.stopEvent1.Close();
			this.stopEvent1 = null;
		}

		// Token: 0x0600003E RID: 62 RVA: 0x00002D19 File Offset: 0x00000F19
		private void WorkerThread()
		{
			this.WorkerThread(true);
		}

		// Token: 0x0600003F RID: 63 RVA: 0x00002D24 File Offset: 0x00000F24
		private void WorkerThread(bool runGraph)
		{
			ReasonToFinishPlaying reason = ReasonToFinishPlaying.StoppedByUser;
			bool flag = false;
			VideoCaptureDevice.Grabber grabber = new VideoCaptureDevice.Grabber(this, false);
			VideoCaptureDevice.Grabber grabber2 = new VideoCaptureDevice.Grabber(this, true);
			object obj = null;
			object obj2 = null;
			object obj3 = null;
			object obj4 = null;
			object obj5 = null;
			ICaptureGraphBuilder2 captureGraphBuilder = null;
			IFilterGraph2 filterGraph = null;
			IBaseFilter baseFilter = null;
			IBaseFilter baseFilter2 = null;
			IBaseFilter baseFilter3 = null;
			ISampleGrabber sampleGrabber = null;
			ISampleGrabber sampleGrabber2 = null;
			IAMVideoControl iamvideoControl = null;
			IPin pin = null;
			IAMCrossbar iamcrossbar = null;
			try
			{
				Type typeFromCLSID = Type.GetTypeFromCLSID(Clsid.CaptureGraphBuilder2);
				if (typeFromCLSID == null)
				{
					throw new ApplicationException("Failed creating capture graph builder");
				}
				obj = Activator.CreateInstance(typeFromCLSID);
				captureGraphBuilder = (ICaptureGraphBuilder2)obj;
				Type typeFromCLSID2 = Type.GetTypeFromCLSID(Clsid.FilterGraph);
				if (typeFromCLSID2 == null)
				{
					throw new ApplicationException("Failed creating filter graph");
				}
				obj2 = Activator.CreateInstance(typeFromCLSID2);
				filterGraph = (IFilterGraph2)obj2;
				captureGraphBuilder.SetFiltergraph((IGraphBuilder)filterGraph);
				this.sourceObject1 = FilterInfo.CreateFilter(this.deviceMoniker1);
				if (this.sourceObject1 == null)
				{
					throw new ApplicationException("Failed creating device object for moniker");
				}
				baseFilter = (IBaseFilter)this.sourceObject1;
				try
				{
					iamvideoControl = (IAMVideoControl)this.sourceObject1;
				}
				catch
				{
				}
				Type typeFromCLSID3 = Type.GetTypeFromCLSID(Clsid.SampleGrabber);
				if (typeFromCLSID3 == null)
				{
					throw new ApplicationException("Failed creating sample grabber");
				}
				obj3 = Activator.CreateInstance(typeFromCLSID3);
				sampleGrabber = (ISampleGrabber)obj3;
				baseFilter2 = (IBaseFilter)obj3;
				obj4 = Activator.CreateInstance(typeFromCLSID3);
				sampleGrabber2 = (ISampleGrabber)obj4;
				baseFilter3 = (IBaseFilter)obj4;
				filterGraph.AddFilter(baseFilter, "source");
				filterGraph.AddFilter(baseFilter2, "grabber_video");
				filterGraph.AddFilter(baseFilter3, "grabber_snapshot");
				AMMediaType ammediaType = new AMMediaType();
				ammediaType.MajorType = MediaType.Video1;
				ammediaType.SubType = MediaSubType.RGB24;
				sampleGrabber.SetMediaType(ammediaType);
				sampleGrabber2.SetMediaType(ammediaType);
				captureGraphBuilder.FindInterface(FindDirection.UpstreamOnly, Guid.Empty, baseFilter, typeof(IAMCrossbar).GUID, out obj5);
				if (obj5 != null)
				{
					iamcrossbar = (IAMCrossbar)obj5;
				}
				this.isCrossbarAvailable1 = new bool?(iamcrossbar != null);
				this.crossbarVideoInputs1 = this.ColletCrossbarVideoInputs(iamcrossbar);
				if (iamvideoControl != null)
				{
					captureGraphBuilder.FindPin(this.sourceObject1, PinDirection.Output, PinCategory.StillImage, MediaType.Video1, false, 0, out pin);
					if (pin != null)
					{
						VideoControlFlags videoControlFlags;
						iamvideoControl.GetCaps(pin, out videoControlFlags);
						flag = ((videoControlFlags & VideoControlFlags.ExternalTriggerEnable) > (VideoControlFlags)0);
					}
				}
				sampleGrabber.SetBufferSamples(false);
				sampleGrabber.SetOneShot(false);
				sampleGrabber.SetCallback(grabber, 1);
				sampleGrabber2.SetBufferSamples(true);
				sampleGrabber2.SetOneShot(false);
				sampleGrabber2.SetCallback(grabber2, 1);
				this.GetPinCapabilitiesAndConfigureSizeAndRate(captureGraphBuilder, baseFilter, PinCategory.Capture, this.videoResolution1, ref this.videoCapabilities1);
				if (flag)
				{
					this.GetPinCapabilitiesAndConfigureSizeAndRate(captureGraphBuilder, baseFilter, PinCategory.StillImage, this.snapshotResolution1, ref this.snapshotCapabilities1);
				}
				else
				{
					this.snapshotCapabilities1 = new VideoCapabilities[0];
				}
				Dictionary<string, VideoCapabilities[]> obj6 = VideoCaptureDevice.cacheVideoCapabilities1;
				lock (obj6)
				{
					if (this.videoCapabilities1 != null && !VideoCaptureDevice.cacheVideoCapabilities1.ContainsKey(this.deviceMoniker1))
					{
						VideoCaptureDevice.cacheVideoCapabilities1.Add(this.deviceMoniker1, this.videoCapabilities1);
					}
				}
				obj6 = VideoCaptureDevice.cacheSnapshotCapabilities1;
				lock (obj6)
				{
					if (this.snapshotCapabilities1 != null && !VideoCaptureDevice.cacheSnapshotCapabilities1.ContainsKey(this.deviceMoniker1))
					{
						VideoCaptureDevice.cacheSnapshotCapabilities1.Add(this.deviceMoniker1, this.snapshotCapabilities1);
					}
				}
				if (runGraph)
				{
					captureGraphBuilder.RenderStream(PinCategory.Capture, MediaType.Video1, baseFilter, null, baseFilter2);
					if (sampleGrabber.GetConnectedMediaType(ammediaType) == 0)
					{
						VideoInfoHeader videoInfoHeader = (VideoInfoHeader)Marshal.PtrToStructure(ammediaType.FormatPtr, typeof(VideoInfoHeader));
						grabber.Width = videoInfoHeader.BmiHeader.Width;
						grabber.Height = videoInfoHeader.BmiHeader.Height;
						ammediaType.Dispose();
					}
					if (flag && this.provideSnapshots1)
					{
						captureGraphBuilder.RenderStream(PinCategory.StillImage, MediaType.Video1, baseFilter, null, baseFilter3);
						if (sampleGrabber2.GetConnectedMediaType(ammediaType) == 0)
						{
							VideoInfoHeader videoInfoHeader2 = (VideoInfoHeader)Marshal.PtrToStructure(ammediaType.FormatPtr, typeof(VideoInfoHeader));
							grabber2.Width = videoInfoHeader2.BmiHeader.Width;
							grabber2.Height = videoInfoHeader2.BmiHeader.Height;
							ammediaType.Dispose();
						}
					}
					IMediaControl mediaControl = (IMediaControl)obj2;
					IMediaEventEx mediaEventEx = (IMediaEventEx)obj2;
					mediaControl.Run();
					if (flag && this.provideSnapshots1)
					{
						this.startTime1 = DateTime.Now;
						iamvideoControl.SetMode(pin, VideoControlFlags.ExternalTriggerEnable);
					}
					for (;;)
					{
						DsEvCode dsEvCode;
						IntPtr lParam;
						IntPtr lParam2;
						if (mediaEventEx != null && mediaEventEx.GetEvent(out dsEvCode, out lParam, out lParam2, 0) >= 0)
						{
							mediaEventEx.FreeEventParams(dsEvCode, lParam, lParam2);
							if (dsEvCode == DsEvCode.DeviceLost)
							{
								break;
							}
						}
						if (this.needToSetVideoInput1)
						{
							this.needToSetVideoInput1 = false;
							if (this.isCrossbarAvailable1.Value)
							{
								this.SetCurrentCrossbarInput(iamcrossbar, this.crossbarVideoInput1);
								this.crossbarVideoInput1 = this.GetCurrentCrossbarInput(iamcrossbar);
							}
						}
						if (this.needToSimulateTrigger1)
						{
							this.needToSimulateTrigger1 = false;
							if (flag && this.provideSnapshots1)
							{
								iamvideoControl.SetMode(pin, VideoControlFlags.Trigger);
							}
						}
						if (this.needToDisplayPropertyPage1)
						{
							this.needToDisplayPropertyPage1 = false;
							this.DisplayPropertyPage(this.parentWindowForPropertyPage1, this.sourceObject1);
							if (iamcrossbar != null)
							{
								this.crossbarVideoInput1 = this.GetCurrentCrossbarInput(iamcrossbar);
							}
						}
						if (this.needToDisplayCrossBarPropertyPage1)
						{
							this.needToDisplayCrossBarPropertyPage1 = false;
							if (iamcrossbar != null)
							{
								this.DisplayPropertyPage(this.parentWindowForPropertyPage1, iamcrossbar);
								this.crossbarVideoInput1 = this.GetCurrentCrossbarInput(iamcrossbar);
							}
						}
						if (this.stopEvent1.WaitOne(100, false))
						{
							goto IL_54E;
						}
					}
					reason = ReasonToFinishPlaying.DeviceLost;
					IL_54E:
					mediaControl.Stop1();
				}
			}
			catch (Exception ex)
			{
				if (this.VideoSourceError != null)
				{
					this.VideoSourceError(this, new VideoSourceErrorEventArgs(ex.Message));
				}
			}
			finally
			{
				captureGraphBuilder = null;
				filterGraph = null;
				baseFilter = null;
				iamvideoControl = null;
				pin = null;
				iamcrossbar = null;
				baseFilter2 = null;
				baseFilter3 = null;
				sampleGrabber = null;
				sampleGrabber2 = null;
				if (obj2 != null)
				{
					Marshal.ReleaseComObject(obj2);
					obj2 = null;
				}
				if (this.sourceObject1 != null)
				{
					Marshal.ReleaseComObject(this.sourceObject1);
					this.sourceObject1 = null;
				}
				if (obj3 != null)
				{
					Marshal.ReleaseComObject(obj3);
					obj3 = null;
				}
				if (obj4 != null)
				{
					Marshal.ReleaseComObject(obj4);
					obj4 = null;
				}
				if (obj != null)
				{
					Marshal.ReleaseComObject(obj);
					obj = null;
				}
				if (obj5 != null)
				{
					Marshal.ReleaseComObject(obj5);
					obj5 = null;
				}
			}
			if (this.PlayingFinished != null)
			{
				this.PlayingFinished(this, reason);
			}
		}

		// Token: 0x06000040 RID: 64 RVA: 0x000033D0 File Offset: 0x000015D0
		private void SetResolution(IAMStreamConfig streamConfig, VideoCapabilities resolution)
		{
			if (resolution == null)
			{
				return;
			}
			int num = 0;
			int num2 = 0;
			AMMediaType ammediaType = null;
			VideoStreamConfigCaps streamConfigCaps = new VideoStreamConfigCaps();
			streamConfig.GetNumberOfCapabilities(out num, out num2);
			for (int i = 0; i < num; i++)
			{
				try
				{
					VideoCapabilities b = new VideoCapabilities(streamConfig, i);
					if (resolution == b && streamConfig.GetStreamCaps(i, out ammediaType, streamConfigCaps) == 0)
					{
						break;
					}
				}
				catch
				{
				}
			}
			if (ammediaType != null)
			{
				streamConfig.SetFormat(ammediaType);
				ammediaType.Dispose();
			}
		}

		// Token: 0x06000041 RID: 65 RVA: 0x00003458 File Offset: 0x00001658
		private void GetPinCapabilitiesAndConfigureSizeAndRate(ICaptureGraphBuilder2 graphBuilder, IBaseFilter baseFilter, Guid pinCategory, VideoCapabilities resolutionToSet, ref VideoCapabilities[] capabilities)
		{
			object obj;
			graphBuilder.FindInterface(pinCategory, MediaType.Video1, baseFilter, typeof(IAMStreamConfig).GUID, out obj);
			if (obj != null)
			{
				IAMStreamConfig iamstreamConfig = null;
				try
				{
					iamstreamConfig = (IAMStreamConfig)obj;
				}
				catch (InvalidCastException)
				{
				}
				if (iamstreamConfig != null)
				{
					if (capabilities == null)
					{
						try
						{
							capabilities = AForge.Video.DirectShow.VideoCapabilities.FromStreamConfig(iamstreamConfig);
						}
						catch
						{
						}
					}
					if (resolutionToSet != null)
					{
						this.SetResolution(iamstreamConfig, resolutionToSet);
					}
				}
			}
			if (capabilities == null)
			{
				capabilities = new VideoCapabilities[0];
			}
		}

		// Token: 0x06000042 RID: 66 RVA: 0x000034E8 File Offset: 0x000016E8
		private void DisplayPropertyPage(IntPtr parentWindow, object sourceObject)
		{
			try
			{
				CAUUID cauuid;
				((ISpecifyPropertyPages)sourceObject).GetPages(out cauuid);
				FilterInfo filterInfo = new FilterInfo(this.deviceMoniker1);
				Win32.OleCreatePropertyFrame(parentWindow, 0, 0, filterInfo.Name, 1, ref sourceObject, cauuid.cElems, cauuid.pElems, 0, 0, IntPtr.Zero);
				Marshal.FreeCoTaskMem(cauuid.pElems);
			}
			catch
			{
			}
		}

		// Token: 0x06000043 RID: 67 RVA: 0x00003554 File Offset: 0x00001754
		private VideoInput[] ColletCrossbarVideoInputs(IAMCrossbar crossbar)
		{
			Dictionary<string, VideoInput[]> obj = VideoCaptureDevice.cacheCrossbarVideoInputs1;
			VideoInput[] result;
			lock (obj)
			{
				if (VideoCaptureDevice.cacheCrossbarVideoInputs1.ContainsKey(this.deviceMoniker1))
				{
					result = VideoCaptureDevice.cacheCrossbarVideoInputs1[this.deviceMoniker1];
				}
				else
				{
					List<VideoInput> list = new List<VideoInput>();
					int num;
					int num2;
					if (crossbar != null && crossbar.get_PinCounts(out num, out num2) == 0)
					{
						for (int i = 0; i < num2; i++)
						{
							int num3;
							PhysicalConnectorType physicalConnectorType;
							if (crossbar.get_CrossbarPinInfo(true, i, out num3, out physicalConnectorType) == 0 && physicalConnectorType < PhysicalConnectorType.AudioTuner)
							{
								list.Add(new VideoInput(i, physicalConnectorType));
							}
						}
					}
					VideoInput[] array = new VideoInput[list.Count];
					list.CopyTo(array);
					VideoCaptureDevice.cacheCrossbarVideoInputs1.Add(this.deviceMoniker1, array);
					result = array;
				}
			}
			return result;
		}

		// Token: 0x06000044 RID: 68 RVA: 0x00003620 File Offset: 0x00001820
		private VideoInput GetCurrentCrossbarInput(IAMCrossbar crossbar)
		{
			VideoInput result = VideoInput.Default1;
			int num;
			int num2;
			if (crossbar.get_PinCounts(out num, out num2) == 0)
			{
				int num3 = -1;
				for (int i = 0; i < num; i++)
				{
					int num4;
					PhysicalConnectorType physicalConnectorType;
					if (crossbar.get_CrossbarPinInfo(false, i, out num4, out physicalConnectorType) == 0 && physicalConnectorType == PhysicalConnectorType.VideoDecoder)
					{
						num3 = i;
						break;
					}
				}
				int num5;
				if (num3 != -1 && crossbar.get_IsRoutedTo(num3, out num5) == 0)
				{
					int num4;
					PhysicalConnectorType type;
					int num6 = crossbar.get_CrossbarPinInfo(true, num5, out num4, out type);
					result = new VideoInput(num5, type);
				}
			}
			return result;
		}

		// Token: 0x06000045 RID: 69 RVA: 0x00003694 File Offset: 0x00001894
		private void SetCurrentCrossbarInput(IAMCrossbar crossbar, VideoInput videoInput)
		{
			int num;
			int num2;
			if (videoInput.Type != PhysicalConnectorType.Default && crossbar.get_PinCounts(out num, out num2) == 0)
			{
				int num3 = -1;
				int num4 = -1;
				for (int i = 0; i < num; i++)
				{
					int num5;
					PhysicalConnectorType physicalConnectorType;
					if (crossbar.get_CrossbarPinInfo(false, i, out num5, out physicalConnectorType) == 0 && physicalConnectorType == PhysicalConnectorType.VideoDecoder)
					{
						num3 = i;
						break;
					}
				}
				for (int j = 0; j < num2; j++)
				{
					int num5;
					PhysicalConnectorType physicalConnectorType;
					if (crossbar.get_CrossbarPinInfo(true, j, out num5, out physicalConnectorType) == 0 && physicalConnectorType == videoInput.Type && j == videoInput.Index)
					{
						num4 = j;
						break;
					}
				}
				if (num4 != -1 && num3 != -1 && crossbar.CanRoute(num3, num4) == 0)
				{
					crossbar.Route(num3, num4);
				}
			}
		}

		// Token: 0x06000046 RID: 70 RVA: 0x0000373C File Offset: 0x0000193C
		private void OnNewFrame(Bitmap image)
		{
			this.framesReceived1++;
			this.bytesReceived1 += (long)(image.Width * image.Height * (Image.GetPixelFormatSize(image.PixelFormat) >> 3));
			if (!this.stopEvent1.WaitOne(0, false) && this.NewFrame != null)
			{
				this.NewFrame(this, new NewFrameEventArgs(image));
			}
		}

		// Token: 0x06000047 RID: 71 RVA: 0x000037AC File Offset: 0x000019AC
		private void OnSnapshotFrame(Bitmap image)
		{
			if ((DateTime.Now - this.startTime1).TotalSeconds >= 4.0 && !this.stopEvent1.WaitOne(0, false) && this.SnapshotFrame != null)
			{
				this.SnapshotFrame(this, new NewFrameEventArgs(image));
			}
		}

		// Token: 0x0400001A RID: 26
		private string deviceMoniker1;

		// Token: 0x0400001B RID: 27
		private int framesReceived1;

		// Token: 0x0400001C RID: 28
		private long bytesReceived1;

		// Token: 0x0400001D RID: 29
		private VideoCapabilities videoResolution1;

		// Token: 0x0400001E RID: 30
		private VideoCapabilities snapshotResolution1;

		// Token: 0x0400001F RID: 31
		private bool provideSnapshots1;

		// Token: 0x04000020 RID: 32
		private Thread thread1;

		// Token: 0x04000021 RID: 33
		private ManualResetEvent stopEvent1;

		// Token: 0x04000022 RID: 34
		private VideoCapabilities[] videoCapabilities1;

		// Token: 0x04000023 RID: 35
		private VideoCapabilities[] snapshotCapabilities1;

		// Token: 0x04000024 RID: 36
		private bool needToSetVideoInput1;

		// Token: 0x04000025 RID: 37
		private bool needToSimulateTrigger1;

		// Token: 0x04000026 RID: 38
		private bool needToDisplayPropertyPage1;

		// Token: 0x04000027 RID: 39
		private bool needToDisplayCrossBarPropertyPage1;

		// Token: 0x04000028 RID: 40
		private IntPtr parentWindowForPropertyPage1 = IntPtr.Zero;

		// Token: 0x04000029 RID: 41
		private object sourceObject1;

		// Token: 0x0400002A RID: 42
		private DateTime startTime1;

		// Token: 0x0400002B RID: 43
		private object sync1 = new object();

		// Token: 0x0400002C RID: 44
		private bool? isCrossbarAvailable1;

		// Token: 0x0400002D RID: 45
		private VideoInput[] crossbarVideoInputs1;

		// Token: 0x0400002E RID: 46
		private VideoInput crossbarVideoInput1 = VideoInput.Default1;

		// Token: 0x0400002F RID: 47
		private static Dictionary<string, VideoCapabilities[]> cacheVideoCapabilities1 = new Dictionary<string, VideoCapabilities[]>();

		// Token: 0x04000030 RID: 48
		private static Dictionary<string, VideoCapabilities[]> cacheSnapshotCapabilities1 = new Dictionary<string, VideoCapabilities[]>();

		// Token: 0x04000031 RID: 49
		private static Dictionary<string, VideoInput[]> cacheCrossbarVideoInputs1 = new Dictionary<string, VideoInput[]>();

		// Token: 0x02000039 RID: 57
		private class Grabber : ISampleGrabberCB
		{
			// Token: 0x17000009 RID: 9
			// (set) Token: 0x060000E4 RID: 228 RVA: 0x00003B74 File Offset: 0x00001D74
			public int Width
			{
				set
				{
					this.width1 = value;
				}
			}

			// Token: 0x1700000A RID: 10
			// (set) Token: 0x060000E5 RID: 229 RVA: 0x00003B7D File Offset: 0x00001D7D
			public int Height
			{
				set
				{
					this.height1 = value;
				}
			}

			// Token: 0x060000E6 RID: 230 RVA: 0x00003B86 File Offset: 0x00001D86
			public Grabber(VideoCaptureDevice parent, bool snapshotMode)
			{
				this.parent1 = parent;
				this.snapshotMode1 = snapshotMode;
			}

			// Token: 0x060000E7 RID: 231 RVA: 0x00003B9C File Offset: 0x00001D9C
			public int SampleCB(double sampleTime, IntPtr sample)
			{
				return 0;
			}

			// Token: 0x060000E8 RID: 232 RVA: 0x00003BA0 File Offset: 0x00001DA0
			public unsafe int BufferCB(double sampleTime, IntPtr buffer, int bufferLen)
			{
				if (this.parent1.NewFrame != null)
				{
					Bitmap bitmap = new Bitmap(this.width1, this.height1, PixelFormat.Format24bppRgb);
					BitmapData bitmapData = bitmap.LockBits(new Rectangle(0, 0, this.width1, this.height1), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);
					int stride = bitmapData.Stride;
					int stride2 = bitmapData.Stride;
					byte* ptr = (byte*)bitmapData.Scan0.ToPointer() + stride2 * (this.height1 - 1);
					byte* ptr2 = (byte*)buffer.ToPointer();
					for (int i = 0; i < this.height1; i++)
					{
						Win32.memcpy(ptr, ptr2, stride);
						ptr -= stride2;
						ptr2 += stride;
					}
					bitmap.UnlockBits(bitmapData);
					if (this.snapshotMode1)
					{
						this.parent1.OnSnapshotFrame(bitmap);
					}
					else
					{
						this.parent1.OnNewFrame(bitmap);
					}
					bitmap.Dispose();
				}
				return 0;
			}

			// Token: 0x040000A9 RID: 169
			private VideoCaptureDevice parent1;

			// Token: 0x040000AA RID: 170
			private bool snapshotMode1;

			// Token: 0x040000AB RID: 171
			private int width1;

			// Token: 0x040000AC RID: 172
			private int height1;
		}
	}
}
