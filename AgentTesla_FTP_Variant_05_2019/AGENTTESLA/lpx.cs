using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;

// Token: 0x02000041 RID: 65
[StandardModule]
internal sealed class lpx
{
	// Token: 0x0600018C RID: 396
	[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
	private static extern int GetVolumeInformationA([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpq, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpz, int lrs, ref int lrt, ref int lru, ref int lrv, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lry, int lrx);

	// Token: 0x0600018D RID: 397 RVA: 0x00033BD4 File Offset: 0x00031DD4
	public static string lrw()
	{
		string result;
		try
		{
			string text = Interaction.Environ(<Module>.smethod_0(477040)) + "\\";
			int number;
			for (;;)
			{
				IL_70:
				uint num = 3249988181u;
				for (;;)
				{
					uint num2;
					switch ((num2 = (num ^ 3773836950u)) % 3u)
					{
					case 0u:
						goto IL_70;
					case 1u:
					{
						string text2 = null;
						int lrs = 0;
						int num3 = 0;
						int num4 = 0;
						string text3 = null;
						lpx.GetVolumeInformationA(ref text, ref text2, lrs, ref number, ref num3, ref num4, ref text3, 0);
						num = (num2 * 2439913562u ^ 1131261217u);
						continue;
					}
					}
					goto Block_2;
				}
			}
			Block_2:
			result = Conversion.Hex(number);
		}
		catch (Exception ex)
		{
			result = null;
		}
		return result;
	}

	// Token: 0x0600018E RID: 398 RVA: 0x00033C84 File Offset: 0x00031E84
	public static string lsq(string lsz)
	{
		int num;
		int num4;
		string text;
		object obj;
		try
		{
			for (;;)
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				for (;;)
				{
					IL_C1:
					uint num2 = 2468593832u;
					for (;;)
					{
						uint num3;
						int num5;
						switch ((num3 = (num2 ^ 3461406746u)) % 10u)
						{
						case 0u:
							goto IL_DF;
						case 1u:
						{
							StreamReader streamReader = new StreamReader(lsz);
							num2 = (num3 * 2267240231u ^ 111449359u);
							continue;
						}
						case 2u:
							IL_C8:
							num4 = num5;
							switch (num)
							{
							case 0:
								break;
							case 1:
								goto IL_34;
							default:
								num2 = 4131196856u;
								continue;
							}
							break;
						case 4u:
							goto IL_59;
						case 5u:
							goto IL_C1;
						case 7u:
							goto IL_34;
						case 8u:
							goto IL_2A;
						case 9u:
						{
							StreamReader streamReader;
							text = streamReader.ReadToEnd().ToString();
							num2 = (num3 * 28799210u ^ 3436035198u);
							continue;
						}
						}
						goto Block_3;
						IL_2A:
						num5 = 2;
						num2 = 2449144105u;
						continue;
						IL_34:
						int num6 = num4 + 1;
						num4 = 0;
						switch (num6)
						{
						case 0:
							goto IL_DD;
						case 1:
							goto IL_00;
						case 2:
							goto IL_2A;
						case 3:
							IL_59:
							num5 = 3;
							num2 = 3749562297u;
							break;
						case 4:
							goto IL_DF;
						default:
							num2 = 2699073251u;
							break;
						}
					}
				}
			}
			Block_3:
			IL_DD:
			goto IL_101;
			IL_DF:
			goto IL_10C;
		}
		catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj2;
			goto IL_C8;
		}
		IL_101:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_10C:
		string result = text;
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
		return result;
	}

	// Token: 0x0600018F RID: 399 RVA: 0x00033DB8 File Offset: 0x00031FB8
	public static string ltq(string ltz, string luv, string luy)
	{
		string result;
		try
		{
			string[] array = Strings.Split(ltz, luv, -1, CompareMethod.Binary);
			string[] array2 = Strings.Split(array[1], luy, -1, CompareMethod.Binary);
			for (;;)
			{
				IL_50:
				uint num = 3696308721u;
				for (;;)
				{
					uint num2;
					switch ((num2 = (num ^ 3215820216u)) % 3u)
					{
					case 1u:
						result = array2[0];
						num = (num2 * 100067465u ^ 4228431503u);
						continue;
					case 2u:
						goto IL_50;
					}
					goto Block_2;
				}
			}
			Block_2:;
		}
		catch (Exception ex)
		{
			result = <Module>.smethod_0(476832);
		}
		return result;
	}

	// Token: 0x06000190 RID: 400 RVA: 0x00033E48 File Offset: 0x00032048
	public static string luz(string lvy)
	{
		int num4;
		int num5;
		string text;
		object obj;
		try
		{
			for (;;)
			{
				IL_00:
				int num = 1;
				for (;;)
				{
					IL_118:
					uint num2 = 2967155751u;
					for (;;)
					{
						uint num3;
						switch ((num3 = (num2 ^ 3523635790u)) % 9u)
						{
						case 0u:
							goto IL_118;
						case 1u:
							goto IL_4E;
						case 2u:
						{
							object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject(<Module>.smethod_0(476752), ""));
							num2 = (num3 * 1861385551u ^ 318803022u);
							continue;
						}
						case 3u:
							goto IL_12;
						case 4u:
							goto IL_3C;
						case 7u:
							goto IL_13B;
						case 8u:
							IL_11F:
							num4 = num;
							switch (num5)
							{
							case 0:
								break;
							case 1:
								goto IL_12;
							default:
								num2 = 3810160604u;
								continue;
							}
							break;
						}
						goto Block_4;
						IL_12:
						int num6 = num4 + 1;
						num4 = 0;
						switch (num6)
						{
						case 0:
							goto IL_139;
						case 1:
							goto IL_00;
						case 2:
							IL_3C:
							ProjectData.ClearProjectError();
							num5 = 1;
							num2 = 2471584126u;
							break;
						case 3:
						{
							IL_4E:
							num = 3;
							object objectValue;
							object instance = objectValue;
							Type type = null;
							string memberName = <Module>.smethod_0(476800);
							object[] array = new object[]
							{
								lvy
							};
							object[] arguments = array;
							string[] argumentNames = null;
							Type[] typeArguments = null;
							bool[] array2 = new bool[]
							{
								true
							};
							object value = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2);
							if (array2[0])
							{
								lvy = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
							}
							text = Conversions.ToString(value);
							num2 = 2319185985u;
							break;
						}
						case 4:
							goto IL_13B;
						default:
							num2 = 3518048547u;
							break;
						}
					}
				}
			}
			Block_4:
			IL_139:
			goto IL_15F;
			IL_13B:
			goto IL_16A;
		}
		catch when (endfilter(obj is Exception & num5 != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj2;
			goto IL_11F;
		}
		IL_15F:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_16A:
		string result = text;
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
		return result;
	}

	// Token: 0x06000191 RID: 401 RVA: 0x00033FE8 File Offset: 0x000321E8
	public static string lxw(string lxq, int lxz)
	{
		string result;
		try
		{
			string[] array = hj.hk.FileSystem.ReadAllText(lxq, Encoding.Default).Split(new char[]
			{
				'\r'
			});
			for (;;)
			{
				IL_AD:
				uint num = 662044808u;
				for (;;)
				{
					uint num2;
					switch ((num2 = (num ^ 1741266502u)) % 8u)
					{
					case 1u:
						goto IL_43;
					case 2u:
						result = array[checked(array.Length + lxz - 1)];
						num = (num2 * 4156151526u ^ 2402741573u);
						continue;
					case 3u:
						goto IL_4E;
					case 4u:
						goto IL_B6;
					case 5u:
						goto IL_AD;
					case 6u:
						if (lxz > 0)
						{
							num = (num2 * 2071684522u ^ 3617558662u);
							continue;
						}
						goto IL_43;
					}
					goto Block_4;
					IL_43:
					if (lxz < 0)
					{
						num = 1521307700u;
						continue;
					}
					IL_4E:
					result = "";
					num = 396160046u;
				}
			}
			Block_4:
			return result;
			IL_B6:
			result = array[checked(lxz - 1)];
		}
		catch (Exception ex)
		{
			result = "";
		}
		return result;
	}

	// Token: 0x02000042 RID: 66
	public class lnt
	{
		// Token: 0x06000193 RID: 403 RVA: 0x000340DC File Offset: 0x000322DC
		public static object lnu()
		{
			List<clo> list = new List<clo>();
			string text = <Module>.smethod_0(478256);
			IntPtr lmr = new IntPtr(-2147483647);
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(text);
				for (;;)
				{
					IL_370:
					uint num = 4128337126u;
					for (;;)
					{
						uint num2;
						int num3;
						int num5;
						byte[] array;
						byte[] array2;
						clo clo;
						string text3;
						switch ((num2 = (num ^ 3712991389u)) % 23u)
						{
						case 0u:
						{
							int num4;
							if (num3 > num4)
							{
								num = 2969966077u;
								continue;
							}
							goto IL_1F3;
						}
						case 1u:
							if (registryKey.GetSubKeyNames().Length != 0)
							{
								num = (num2 * 1782555834u ^ 1046122806u);
								continue;
							}
							break;
						case 2u:
						{
							int num6;
							if (num5 > num6)
							{
								num = 2276034786u;
								continue;
							}
							goto IL_FC;
						}
						case 3u:
							goto IL_2AF;
						case 5u:
						{
							int num7;
							string[] subKeyNames;
							if (num7 >= subKeyNames.Length)
							{
								num = 2770422741u;
								continue;
							}
							goto IL_2AF;
						}
						case 6u:
						{
							string text2;
							registryKey.OpenSubKey(text2);
							num = (num2 * 3997410593u ^ 2915530034u);
							continue;
						}
						case 7u:
							goto IL_205;
						case 8u:
							checked
							{
								int num8;
								num8++;
								num3++;
							}
							num = (num2 * 1638408552u ^ 1378362657u);
							continue;
						case 9u:
							num = (num2 * 3470714612u ^ 2810379833u);
							continue;
						case 10u:
							goto IL_1F3;
						case 11u:
						{
							string[] subKeyNames = registryKey.GetSubKeyNames();
							num = (num2 * 641625967u ^ 2259605635u);
							continue;
						}
						case 12u:
						{
							lpx.lnt.kqz kqz;
							lpx.lnt.kqz lmq = kqz;
							string lmz = <Module>.smethod_0(478304);
							int lno = 0;
							int num9 = 0;
							byte[] lnr = array;
							int num10 = 256;
							lpx.lnt.lmo.RegQueryValueEx(lmq, lmz, lno, out num9, lnr, ref num10);
							lpx.lnt.kqz lmq2 = kqz;
							string lmz2 = <Module>.smethod_0(478224);
							int lno2 = 0;
							num10 = 0;
							byte[] lnr2 = array2;
							num9 = 256;
							lpx.lnt.lmo.RegQueryValueEx(lmq2, lmz2, lno2, out num10, lnr2, ref num9);
							clo = new clo();
							string text2;
							clo.cly = text2;
							num = (num2 * 735497434u ^ 3735129067u);
							continue;
						}
						case 13u:
							goto IL_10E;
						case 14u:
							clo.clx = <Module>.smethod_0(476992);
							list.Add(clo);
							num = (num2 * 3604822695u ^ 3722923346u);
							continue;
						case 15u:
							checked
							{
								int num7;
								num7++;
							}
							num = (num2 * 2204721836u ^ 3887400302u);
							continue;
						case 16u:
							goto IL_FC;
						case 17u:
							text3 += Conversions.ToString(Strings.ChrW((int)(array2[num5] ^ 15)));
							num = (num2 * 2290783729u ^ 910617624u);
							continue;
						case 18u:
						{
							int num7 = 0;
							num = (num2 * 2716112550u ^ 2126820144u);
							continue;
						}
						case 19u:
							checked
							{
								num5++;
							}
							num = (num2 * 2507327271u ^ 67225743u);
							continue;
						case 20u:
						{
							int num8 = 0;
							int num11 = 0;
							int num4 = checked(array.Length - 1);
							num3 = num11;
							num = (num2 * 1234540403u ^ 153756247u);
							continue;
						}
						case 21u:
						{
							lpx.lnt.kqz kqz = null;
							string text2;
							lpx.lnt.lmo.RegOpenKeyEx(lmr, text + text2, 0, 131097, out kqz);
							array = new byte[257];
							array2 = new byte[257];
							num = (num2 * 4018572833u ^ 3217926603u);
							continue;
						}
						case 22u:
							goto IL_370;
						}
						goto Block_9;
						IL_FC:
						if (array2[num5] != 0)
						{
							num = 2981449743u;
							continue;
						}
						IL_10E:
						clo.clv = text3;
						num = 3076599468u;
						continue;
						IL_1F3:
						if (array[num3] != 0)
						{
							num = 2214490078u;
							continue;
						}
						IL_205:
						checked
						{
							int num8;
							array = (byte[])Utils.CopyArray((Array)array, new byte[num8 - 1 + 1]);
							clo.clu = Encoding.Default.GetString(array);
							num8 = 0;
							text3 = null;
							int num12 = 0;
							int num6 = array2.Length - 1;
							num5 = num12;
							num = 4276057902u;
							continue;
							IL_2AF:
							int num7;
							string[] subKeyNames;
							string text2 = subKeyNames[num7];
							num = 4107599508u;
						}
					}
				}
				Block_9:;
			}
			catch (Exception ex)
			{
			}
			return list;
		}

		// Token: 0x02000043 RID: 67
		public class kqz : SafeHandle
		{
			// Token: 0x06000194 RID: 404 RVA: 0x00034490 File Offset: 0x00032690
			public kqz() : base(IntPtr.Zero, true)
			{
			}

			// Token: 0x17000016 RID: 22
			// (get) Token: 0x06000195 RID: 405 RVA: 0x000344AC File Offset: 0x000326AC
			public override bool IsInvalid
			{
				get
				{
					return this.handle == IntPtr.Zero;
				}
			}

			// Token: 0x06000196 RID: 406 RVA: 0x000344CC File Offset: 0x000326CC
			protected override bool ReleaseHandle()
			{
				return lpx.lnt.lmo.RegCloseKey(this.handle) == 0;
			}
		}

		// Token: 0x02000044 RID: 68
		[SuppressUnmanagedCodeSecurity]
		public class lmo
		{
			// Token: 0x06000198 RID: 408
			[ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
			[DllImport("Advapi32", CharSet = CharSet.Unicode, SetLastError = true)]
			public static extern int RegOpenKeyEx([In] IntPtr lmr, [In] string lms, int lmt, [In] int lmu, out lpx.lnt.kqz lmv);

			// Token: 0x06000199 RID: 409
			[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
			[DllImport("Advapi32", SetLastError = true)]
			public static extern int RegCloseKey(IntPtr lmx);

			// Token: 0x0600019A RID: 410
			[DllImport("Advapi32", CharSet = CharSet.Unicode, SetLastError = true)]
			public static extern int RegQueryValueEx([In] lpx.lnt.kqz lmq, [In] string lmz, int lno, out int lnp, [Out] byte[] lnr, [In] [Out] ref int lns);
		}
	}
}
