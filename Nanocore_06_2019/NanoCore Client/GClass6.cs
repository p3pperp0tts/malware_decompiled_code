using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using NanoCore;

// Token: 0x02000013 RID: 19
public sealed class GClass6 : IClientNameObjectCollection
{
	// Token: 0x06000055 RID: 85 RVA: 0x000023E8 File Offset: 0x000005E8
	public GClass6(GDelegate0 gdelegate0_1)
	{
		this.gdelegate0_0 = gdelegate0_1;
		this.dictionary_0 = new Dictionary<string, object>();
	}

	// Token: 0x06000056 RID: 86 RVA: 0x00003900 File Offset: 0x00001B00
	public object GetValue(string string_0, object object_0)
	{
		Dictionary<string, object> obj = this.dictionary_0;
		object result;
		lock (obj)
		{
			if (this.dictionary_0.ContainsKey(string_0))
			{
				result = this.dictionary_0[string_0];
			}
			else
			{
				result = object_0;
			}
		}
		return result;
	}

	// Token: 0x06000057 RID: 87 RVA: 0x00003954 File Offset: 0x00001B54
	public void SetValue(string string_0, object object_0)
	{
		Dictionary<string, object> obj = this.dictionary_0;
		lock (obj)
		{
			if (this.dictionary_0.ContainsKey(string_0))
			{
				if (this.dictionary_0[string_0].Equals(RuntimeHelpers.GetObjectValue(object_0)))
				{
					return;
				}
				this.dictionary_0[string_0] = RuntimeHelpers.GetObjectValue(object_0);
			}
			else
			{
				this.dictionary_0.Add(string_0, RuntimeHelpers.GetObjectValue(object_0));
			}
		}
		if (this.gdelegate0_0 != null)
		{
			this.gdelegate0_0(string_0);
		}
	}

	// Token: 0x06000058 RID: 88 RVA: 0x000039EC File Offset: 0x00001BEC
	public void RemoveValue(string string_0)
	{
		Dictionary<string, object> obj = this.dictionary_0;
		bool flag;
		lock (obj)
		{
			if (this.dictionary_0.ContainsKey(string_0))
			{
				flag = true;
				this.dictionary_0.Remove(string_0);
			}
		}
		if (flag && this.gdelegate0_0 != null)
		{
			this.gdelegate0_0(string_0);
		}
	}

	// Token: 0x06000059 RID: 89 RVA: 0x00003A54 File Offset: 0x00001C54
	public bool EntryExists(string string_0)
	{
		Dictionary<string, object> obj = this.dictionary_0;
		bool result;
		lock (obj)
		{
			result = this.dictionary_0.ContainsKey(string_0);
		}
		return result;
	}

	// Token: 0x0600005A RID: 90 RVA: 0x00003A98 File Offset: 0x00001C98
	public KeyValuePair<string, object>[] GetEntries()
	{
		Dictionary<string, object> obj = this.dictionary_0;
		KeyValuePair<string, object>[] result;
		lock (obj)
		{
			List<KeyValuePair<string, object>> list = new List<KeyValuePair<string, object>>();
			Dictionary<string, object>.Enumerator enumerator = this.dictionary_0.GetEnumerator();
			while (enumerator.MoveNext())
			{
				List<KeyValuePair<string, object>> list2 = list;
				KeyValuePair<string, object> keyValuePair = enumerator.Current;
				string key = keyValuePair.Key;
				KeyValuePair<string, object> keyValuePair2 = enumerator.Current;
				KeyValuePair<string, object> item = new KeyValuePair<string, object>(key, RuntimeHelpers.GetObjectValue(keyValuePair2.Value));
				list2.Add(item);
			}
			result = list.ToArray();
		}
		return result;
	}

	// Token: 0x0600005B RID: 91 RVA: 0x00003B24 File Offset: 0x00001D24
	public int method_0()
	{
		int count = this.dictionary_0.Count;
		this.dictionary_0.Clear();
		return count;
	}

	// Token: 0x04000028 RID: 40
	private GDelegate0 gdelegate0_0;

	// Token: 0x04000029 RID: 41
	private Dictionary<string, object> dictionary_0;
}
