using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000028 RID: 40
internal sealed class Class22
{
	// Token: 0x06000116 RID: 278 RVA: 0x0000756C File Offset: 0x0000576C
	static Class22()
	{
		Class22.binaryReader_0 = new BinaryReader(Class22.memoryStream_0);
		Class22.memoryStream_1 = new MemoryStream();
		Class22.binaryWriter_0 = new BinaryWriter(Class22.memoryStream_1);
		Class22.list_0 = new List<object>();
		Class22.dictionary_0 = new Dictionary<Type, byte>();
		Class22.dictionary_0.Add(typeof(bool), 0);
		Class22.dictionary_0.Add(typeof(byte), 1);
		Class22.dictionary_0.Add(typeof(byte[]), 2);
		Class22.dictionary_0.Add(typeof(char), 3);
		Class22.dictionary_0.Add(typeof(char[]), 4);
		Class22.dictionary_0.Add(typeof(decimal), 5);
		Class22.dictionary_0.Add(typeof(double), 6);
		Class22.dictionary_0.Add(typeof(int), 7);
		Class22.dictionary_0.Add(typeof(long), 8);
		Class22.dictionary_0.Add(typeof(sbyte), 9);
		Class22.dictionary_0.Add(typeof(short), 10);
		Class22.dictionary_0.Add(typeof(float), 11);
		Class22.dictionary_0.Add(typeof(string), 12);
		Class22.dictionary_0.Add(typeof(uint), 13);
		Class22.dictionary_0.Add(typeof(ulong), 14);
		Class22.dictionary_0.Add(typeof(ushort), 15);
		Class22.dictionary_0.Add(typeof(DateTime), 16);
		Class22.dictionary_0.Add(typeof(string[]), 17);
		Class22.dictionary_0.Add(typeof(Guid), 18);
		Class22.dictionary_0.Add(typeof(Size), 19);
		Class22.dictionary_0.Add(typeof(Rectangle), 20);
		Class22.dictionary_0.Add(typeof(Version), 21);
	}

	// Token: 0x06000117 RID: 279 RVA: 0x000077AC File Offset: 0x000059AC
	public static void smethod_0(byte[] byte_0)
	{
		DESCryptoServiceProvider descryptoServiceProvider = new DESCryptoServiceProvider();
		descryptoServiceProvider.BlockSize = 64;
		descryptoServiceProvider.Key = byte_0;
		descryptoServiceProvider.IV = byte_0;
		Class22.icryptoTransform_0 = descryptoServiceProvider.CreateEncryptor();
		Class22.icryptoTransform_1 = descryptoServiceProvider.CreateDecryptor();
	}

	// Token: 0x06000118 RID: 280 RVA: 0x000077EC File Offset: 0x000059EC
	public static byte[] smethod_1(object[] object_1)
	{
		Guid guid_;
		return Class22.smethod_3(true, 0, 0, guid_, object_1);
	}

	// Token: 0x06000119 RID: 281 RVA: 0x00007804 File Offset: 0x00005A04
	public static object[] smethod_2(byte[] byte_0)
	{
		return Class22.smethod_4(byte_0).object_0;
	}

	// Token: 0x0600011A RID: 282 RVA: 0x00007820 File Offset: 0x00005A20
	public static byte[] smethod_3(bool bool_0, byte byte_0, byte byte_1, Guid guid_0, object[] object_1)
	{
		MemoryStream obj = Class22.memoryStream_1;
		byte[] result;
		lock (obj)
		{
			Class22.binaryWriter_0.Write(bool_0);
			Class22.binaryWriter_0.Write(byte_0);
			Class22.binaryWriter_0.Write(byte_1);
			Guid b;
			if (guid_0 == b)
			{
				Class22.binaryWriter_0.Write(false);
			}
			else
			{
				Class22.binaryWriter_0.Write(true);
				Class22.binaryWriter_0.Write(guid_0.ToByteArray());
			}
			if (object_1 != null)
			{
				int num = 0;
				int num2 = object_1.Length - 1;
				for (int i = num; i <= num2; i++)
				{
					Type type = object_1[i].GetType();
					if (type.IsEnum)
					{
						type = Enum.GetUnderlyingType(type);
					}
					byte value = Class22.dictionary_0[type];
					Class22.binaryWriter_0.Write(value);
					switch (value)
					{
					case 0:
						Class22.binaryWriter_0.Write((bool)object_1[i]);
						break;
					case 1:
						Class22.binaryWriter_0.Write((byte)object_1[i]);
						break;
					case 2:
						Class22.binaryWriter_0.Write(((byte[])object_1[i]).Length);
						Class22.binaryWriter_0.Write((byte[])object_1[i]);
						break;
					case 3:
						Class22.binaryWriter_0.Write((char)object_1[i]);
						break;
					case 4:
						Class22.binaryWriter_0.Write(((char[])object_1[i]).ToString());
						break;
					case 5:
						Class22.binaryWriter_0.Write((decimal)object_1[i]);
						break;
					case 6:
						Class22.binaryWriter_0.Write((double)object_1[i]);
						break;
					case 7:
						Class22.binaryWriter_0.Write((int)object_1[i]);
						break;
					case 8:
						Class22.binaryWriter_0.Write((long)object_1[i]);
						break;
					case 9:
						Class22.binaryWriter_0.Write((sbyte)object_1[i]);
						break;
					case 10:
						Class22.binaryWriter_0.Write((short)object_1[i]);
						break;
					case 11:
						Class22.binaryWriter_0.Write((float)object_1[i]);
						break;
					case 12:
						Class22.binaryWriter_0.Write((string)object_1[i]);
						break;
					case 13:
						Class22.binaryWriter_0.Write((uint)object_1[i]);
						break;
					case 14:
						Class22.binaryWriter_0.Write((ulong)object_1[i]);
						break;
					case 15:
						Class22.binaryWriter_0.Write((ushort)object_1[i]);
						break;
					case 16:
					{
						BinaryWriter binaryWriter = Class22.binaryWriter_0;
						DateTime dateTime = (DateTime)object_1[i];
						binaryWriter.Write(dateTime.ToBinary());
						break;
					}
					case 17:
						Class22.binaryWriter_0.Write(((string[])object_1[i]).Length);
						foreach (string value2 in (string[])object_1[i])
						{
							Class22.binaryWriter_0.Write(value2);
						}
						break;
					case 18:
					{
						BinaryWriter binaryWriter2 = Class22.binaryWriter_0;
						Guid guid = (Guid)object_1[i];
						binaryWriter2.Write(guid.ToByteArray());
						break;
					}
					case 19:
					{
						Size size = (Size)object_1[i];
						Class22.binaryWriter_0.Write(size.Width);
						Class22.binaryWriter_0.Write(size.Height);
						break;
					}
					case 20:
					{
						Rectangle rectangle = (Rectangle)object_1[i];
						Class22.binaryWriter_0.Write(rectangle.X);
						Class22.binaryWriter_0.Write(rectangle.Y);
						Class22.binaryWriter_0.Write(rectangle.Width);
						Class22.binaryWriter_0.Write(rectangle.Height);
						break;
					}
					case 21:
						Class22.binaryWriter_0.Write(((Version)object_1[i]).ToString());
						break;
					}
				}
			}
			byte[] array2 = Class22.memoryStream_1.ToArray();
			Class22.memoryStream_1.SetLength(0L);
			if (bool_0 && array2.Length >= 860)
			{
				Class22.binaryWriter_0.Write(bool_0);
				Class22.binaryWriter_0.Write(array2.Length - 1);
				DeflateStream deflateStream = new DeflateStream(Class22.memoryStream_1, CompressionMode.Compress, true);
				deflateStream.Write(array2, 1, array2.Length - 1);
				deflateStream.Close();
				array2 = Class22.memoryStream_1.ToArray();
				Class22.memoryStream_1.SetLength(0L);
			}
			else
			{
				array2[0] = 0;
			}
			byte[] buffer = Class22.icryptoTransform_0.TransformFinalBlock(array2, 0, array2.Length);
			Class22.binaryWriter_0.Write(buffer);
			array2 = Class22.memoryStream_1.ToArray();
			Class22.memoryStream_1.SetLength(0L);
			result = array2;
		}
		return result;
	}

	// Token: 0x0600011B RID: 283 RVA: 0x00007D58 File Offset: 0x00005F58
	public static GStruct2 smethod_4(byte[] byte_0)
	{
		object obj = Class22.object_0;
		ObjectFlowControl.CheckForSyncLockOnValueType(obj);
		GStruct2 result;
		lock (obj)
		{
			byte_0 = Class22.icryptoTransform_1.TransformFinalBlock(byte_0, 0, byte_0.Length);
			Class22.memoryStream_0 = new MemoryStream(byte_0);
			Class22.binaryReader_0 = new BinaryReader(Class22.memoryStream_0);
			if (Class22.binaryReader_0.ReadBoolean())
			{
				int num = Class22.binaryReader_0.ReadInt32();
				DeflateStream deflateStream = new DeflateStream(Class22.memoryStream_0, CompressionMode.Decompress, false);
				byte[] array = new byte[num - 1 + 1];
				deflateStream.Read(array, 0, array.Length);
				deflateStream.Close();
				Class22.memoryStream_0 = new MemoryStream(array);
				Class22.binaryReader_0 = new BinaryReader(Class22.memoryStream_0);
			}
			GStruct2 gstruct = default(GStruct2);
			gstruct.byte_0 = Class22.binaryReader_0.ReadByte();
			gstruct.byte_1 = Class22.binaryReader_0.ReadByte();
			if (Class22.binaryReader_0.ReadBoolean())
			{
				gstruct.guid_0 = new Guid(Class22.binaryReader_0.ReadBytes(16));
			}
			while (Class22.memoryStream_0.Position != Class22.memoryStream_0.Length)
			{
				switch (Class22.binaryReader_0.ReadByte())
				{
				case 0:
					Class22.list_0.Add(Class22.binaryReader_0.ReadBoolean());
					break;
				case 1:
					Class22.list_0.Add(Class22.binaryReader_0.ReadByte());
					break;
				case 2:
					Class22.list_0.Add(Class22.binaryReader_0.ReadBytes(Class22.binaryReader_0.ReadInt32()));
					break;
				case 3:
					Class22.list_0.Add(Class22.binaryReader_0.ReadChar());
					break;
				case 4:
					Class22.list_0.Add(Class22.binaryReader_0.ReadString().ToCharArray());
					break;
				case 5:
					Class22.list_0.Add(Class22.binaryReader_0.ReadDecimal());
					break;
				case 6:
					Class22.list_0.Add(Class22.binaryReader_0.ReadDouble());
					break;
				case 7:
					Class22.list_0.Add(Class22.binaryReader_0.ReadInt32());
					break;
				case 8:
					Class22.list_0.Add(Class22.binaryReader_0.ReadInt64());
					break;
				case 9:
					Class22.list_0.Add(Class22.binaryReader_0.ReadSByte());
					break;
				case 10:
					Class22.list_0.Add(Class22.binaryReader_0.ReadInt16());
					break;
				case 11:
					Class22.list_0.Add(Class22.binaryReader_0.ReadSingle());
					break;
				case 12:
					Class22.list_0.Add(Class22.binaryReader_0.ReadString());
					break;
				case 13:
					Class22.list_0.Add(Class22.binaryReader_0.ReadUInt32());
					break;
				case 14:
					Class22.list_0.Add(Class22.binaryReader_0.ReadUInt64());
					break;
				case 15:
					Class22.list_0.Add(Class22.binaryReader_0.ReadUInt16());
					break;
				case 16:
					Class22.list_0.Add(DateTime.FromBinary(Class22.binaryReader_0.ReadInt64()));
					break;
				case 17:
				{
					string[] array2 = new string[Class22.binaryReader_0.ReadInt32() - 1 + 1];
					int num2 = 0;
					int num3 = array2.Length - 1;
					for (int i = num2; i <= num3; i++)
					{
						array2[i] = Class22.binaryReader_0.ReadString();
					}
					Class22.list_0.Add(array2);
					break;
				}
				case 18:
				{
					List<object> list = Class22.list_0;
					Guid guid = new Guid(Class22.binaryReader_0.ReadBytes(16));
					list.Add(guid);
					break;
				}
				case 19:
				{
					List<object> list2 = Class22.list_0;
					Size size = new Size(Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32());
					list2.Add(size);
					break;
				}
				case 20:
				{
					List<object> list3 = Class22.list_0;
					Rectangle rectangle = new Rectangle(Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32(), Class22.binaryReader_0.ReadInt32());
					list3.Add(rectangle);
					break;
				}
				case 21:
					Class22.list_0.Add(new Version(Class22.binaryReader_0.ReadString()));
					break;
				}
			}
			gstruct.object_0 = Class22.list_0.ToArray();
			result = gstruct;
			Class22.list_0.Clear();
			Class22.binaryReader_0.Close();
		}
		return result;
	}

	// Token: 0x04000060 RID: 96
	private static object object_0 = RuntimeHelpers.GetObjectValue(new object());

	// Token: 0x04000061 RID: 97
	private static BinaryReader binaryReader_0;

	// Token: 0x04000062 RID: 98
	private static MemoryStream memoryStream_0 = new MemoryStream();

	// Token: 0x04000063 RID: 99
	private static BinaryWriter binaryWriter_0;

	// Token: 0x04000064 RID: 100
	private static MemoryStream memoryStream_1;

	// Token: 0x04000065 RID: 101
	private static List<object> list_0;

	// Token: 0x04000066 RID: 102
	private static Dictionary<Type, byte> dictionary_0;

	// Token: 0x04000067 RID: 103
	private static ICryptoTransform icryptoTransform_0;

	// Token: 0x04000068 RID: 104
	private static ICryptoTransform icryptoTransform_1;
}
