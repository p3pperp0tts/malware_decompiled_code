using System;

namespace JLibrary.Win32
{
	// Token: 0x02000023 RID: 35
	public static class Win32Ptr
	{
		// Token: 0x060000D9 RID: 217 RVA: 0x00002568 File Offset: 0x00000768
		public static IntPtr Create(long value)
		{
			return new IntPtr((int)value);
		}

		// Token: 0x060000DA RID: 218 RVA: 0x00002571 File Offset: 0x00000771
		public static IntPtr Add(this IntPtr ptr, long val)
		{
			return new IntPtr((int)((long)ptr.ToInt32() + val));
		}

		// Token: 0x060000DB RID: 219 RVA: 0x00002583 File Offset: 0x00000783
		public static IntPtr Add(this IntPtr ptr, IntPtr val)
		{
			return new IntPtr(ptr.ToInt32() + val.ToInt32());
		}

		// Token: 0x060000DC RID: 220 RVA: 0x00002599 File Offset: 0x00000799
		public static IntPtr Subtract(this IntPtr ptr, long val)
		{
			return new IntPtr((int)(ptr.ToInt64() - val));
		}

		// Token: 0x060000DD RID: 221 RVA: 0x000025AA File Offset: 0x000007AA
		public static IntPtr Subtract(this IntPtr ptr, IntPtr val)
		{
			return new IntPtr((int)(ptr.ToInt64() - val.ToInt64()));
		}

		// Token: 0x060000DE RID: 222 RVA: 0x000025C1 File Offset: 0x000007C1
		public static bool IsNull(this IntPtr ptr)
		{
			return ptr == IntPtr.Zero;
		}

		// Token: 0x060000DF RID: 223 RVA: 0x000025CE File Offset: 0x000007CE
		public static bool IsNull(this UIntPtr ptr)
		{
			return ptr == UIntPtr.Zero;
		}

		// Token: 0x060000E0 RID: 224 RVA: 0x000025DB File Offset: 0x000007DB
		public static bool Compare(this IntPtr ptr, long value)
		{
			return ptr.ToInt64() == value;
		}
	}
}
