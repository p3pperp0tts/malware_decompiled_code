using System;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x0200002C RID: 44
[StandardModule]
internal sealed class Class26
{
	// Token: 0x06000143 RID: 323 RVA: 0x000084D4 File Offset: 0x000066D4
	public static string smethod_0(string string_0, string string_1)
	{
		UIntPtr uintptr_ = new UIntPtr(2147483650u);
		IntPtr intPtr;
		if (Class9.RegOpenKeyEx(uintptr_, string_0, 0, 131353, ref intPtr) != 0)
		{
			return string.Empty;
		}
		StringBuilder stringBuilder = null;
		IntPtr intptr_ = intPtr;
		int int_ = 0;
		int num = 0;
		int capacity;
		if (Class9.RegQueryValueEx(intptr_, string_1, int_, ref num, stringBuilder, ref capacity) == 0)
		{
			stringBuilder = new StringBuilder(capacity);
			IntPtr intptr_2 = intPtr;
			int int_2 = 0;
			num = 0;
			Class9.RegQueryValueEx(intptr_2, string_1, int_2, ref num, stringBuilder, ref capacity);
		}
		Class9.RegCloseKey(intPtr);
		if (stringBuilder == null)
		{
			return string.Empty;
		}
		return stringBuilder.ToString();
	}

	// Token: 0x06000144 RID: 324 RVA: 0x00008548 File Offset: 0x00006748
	public static bool smethod_1()
	{
		bool result;
		try
		{
			RawSecurityDescriptor rawSecurityDescriptor = Class26.smethod_3();
			SecurityIdentifier sid = new SecurityIdentifier(WellKnownSidType.WorldSid, null);
			CommonAce ace = new CommonAce(AceFlags.None, AceQualifier.AccessAllowed, 2035707, sid, false, null);
			rawSecurityDescriptor.DiscretionaryAcl.InsertAce(0, ace);
			result = Class26.smethod_4(rawSecurityDescriptor);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "RestoreAccessControlEntries");
			result = false;
		}
		return result;
	}

	// Token: 0x06000145 RID: 325 RVA: 0x000085B8 File Offset: 0x000067B8
	public static bool smethod_2()
	{
		bool result;
		try
		{
			result = Class26.smethod_4(Class26.smethod_3());
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "ClearAccessControlEntries");
			result = false;
		}
		return result;
	}

	// Token: 0x06000146 RID: 326 RVA: 0x00008600 File Offset: 0x00006800
	private static RawSecurityDescriptor smethod_3()
	{
		DiscretionaryAcl discretionaryAcl = new DiscretionaryAcl(false, false, 0);
		byte[] binaryForm = new byte[discretionaryAcl.BinaryLength - 1 + 1];
		discretionaryAcl.GetBinaryForm(binaryForm, 0);
		return new RawSecurityDescriptor(ControlFlags.DiscretionaryAclPresent, null, null, null, new RawAcl(binaryForm, 0));
	}

	// Token: 0x06000147 RID: 327 RVA: 0x00008640 File Offset: 0x00006840
	private static bool smethod_4(RawSecurityDescriptor rawSecurityDescriptor_0)
	{
		byte[] array = new byte[rawSecurityDescriptor_0.BinaryLength - 1 + 1];
		rawSecurityDescriptor_0.GetBinaryForm(array, 0);
		return Class9.SetKernelObjectSecurity(Class24.intptr_0, 4, array);
	}

	// Token: 0x06000148 RID: 328 RVA: 0x00008674 File Offset: 0x00006874
	public static bool smethod_5(byte[] byte_0, byte[] byte_1)
	{
		if (byte_0.Length != byte_1.Length)
		{
			return false;
		}
		int num = 0;
		int num2 = byte_1.Length - 1;
		for (int i = num; i <= num2; i++)
		{
			if (byte_0[i] != byte_1[i])
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000149 RID: 329 RVA: 0x000086AC File Offset: 0x000068AC
	public static string smethod_6(Exception exception_0)
	{
		string text = Class26.smethod_7(exception_0);
		if (text.Length > 4096)
		{
			text = text.Remove(4093) + "...";
		}
		return text;
	}

	// Token: 0x0600014A RID: 330 RVA: 0x000086E4 File Offset: 0x000068E4
	private static string smethod_7(Exception exception_0)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine(exception_0.Message);
		stringBuilder.AppendLine();
		stringBuilder.AppendLine(exception_0.GetType().FullName);
		stringBuilder.AppendLine(exception_0.StackTrace);
		if (exception_0.InnerException != null)
		{
			stringBuilder.AppendLine();
			stringBuilder.AppendLine(Class26.smethod_7(exception_0.InnerException));
		}
		return stringBuilder.ToString();
	}
}
