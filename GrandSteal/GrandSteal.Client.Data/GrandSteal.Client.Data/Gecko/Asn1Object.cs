using System;
using System.Collections.Generic;
using System.Text;

namespace GrandSteal.Client.Data.Gecko
{
	// Token: 0x02000023 RID: 35
	public class Asn1Object
	{
		// Token: 0x1700001F RID: 31
		// (get) Token: 0x060000BA RID: 186 RVA: 0x00002420 File Offset: 0x00000620
		// (set) Token: 0x060000BB RID: 187 RVA: 0x00002428 File Offset: 0x00000628
		public Asn1Type ObjectType
		{
			get;
			set;
		}

		// Token: 0x17000020 RID: 32
		// (get) Token: 0x060000BC RID: 188 RVA: 0x00002431 File Offset: 0x00000631
		// (set) Token: 0x060000BD RID: 189 RVA: 0x00002439 File Offset: 0x00000639
		public byte[] ObjectData
		{
			get;
			set;
		}

		// Token: 0x17000021 RID: 33
		// (get) Token: 0x060000BE RID: 190 RVA: 0x00002442 File Offset: 0x00000642
		// (set) Token: 0x060000BF RID: 191 RVA: 0x0000244A File Offset: 0x0000064A
		public int ObjectLength
		{
			get;
			set;
		}

		// Token: 0x17000022 RID: 34
		// (get) Token: 0x060000C0 RID: 192 RVA: 0x00002453 File Offset: 0x00000653
		// (set) Token: 0x060000C1 RID: 193 RVA: 0x0000245B File Offset: 0x0000065B
		public List<Asn1Object> Objects
		{
			get;
			set;
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x00002464 File Offset: 0x00000664
		public Asn1Object()
		{
			this.Objects = new List<Asn1Object>();
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x00007B74 File Offset: 0x00005D74
		public override string ToString()
		{
			StringBuilder stringBuilder = new StringBuilder();
			StringBuilder stringBuilder2 = new StringBuilder();
			Asn1Type objectType = this.ObjectType;
			switch (objectType)
			{
			case Asn1Type.Integer:
			{
				byte[] objectData = this.ObjectData;
				for (int i = 0; i < objectData.Length; i++)
				{
					byte b = objectData[i];
					stringBuilder2.AppendFormat("{0:X2}", b);
				}
				stringBuilder.Append("\tINTEGER ").Append(stringBuilder2).AppendLine();
				break;
			}
			case Asn1Type.BitString:
			case Asn1Type.Null:
				break;
			case Asn1Type.OctetString:
			{
				byte[] objectData = this.ObjectData;
				for (int i = 0; i < objectData.Length; i++)
				{
					byte b2 = objectData[i];
					stringBuilder2.AppendFormat("{0:X2}", b2);
				}
				stringBuilder.Append("\tOCTETSTRING ").AppendLine(stringBuilder2.ToString());
				break;
			}
			case Asn1Type.ObjectIdentifier:
			{
				byte[] objectData = this.ObjectData;
				for (int i = 0; i < objectData.Length; i++)
				{
					byte b3 = objectData[i];
					stringBuilder2.AppendFormat("{0:X2}", b3);
				}
				stringBuilder.Append("\tOBJECTIDENTIFIER ").AppendLine(stringBuilder2.ToString());
				break;
			}
			default:
				if (objectType == Asn1Type.Sequence)
				{
					stringBuilder.AppendLine("SEQUENCE {");
				}
				break;
			}
			foreach (Asn1Object current in this.Objects)
			{
				stringBuilder.Append(current.ToString());
			}
			if (this.ObjectType == Asn1Type.Sequence)
			{
				stringBuilder.AppendLine("}");
			}
			stringBuilder2.Remove(0, stringBuilder2.Length - 1);
			return stringBuilder.ToString();
		}
	}
}
