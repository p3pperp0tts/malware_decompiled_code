using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x0200001F RID: 31
	internal class ProcessAccessRights
	{
		// Token: 0x060000C7 RID: 199
		[DllImport("kernel32.dll")]
		public static extern IntPtr GetCurrentProcess();

		// Token: 0x060000C8 RID: 200
		[DllImport("advapi32.dll", SetLastError = true)]
		private static extern bool SetKernelObjectSecurity(IntPtr Handle, int securityInformation, [In] byte[] pSecurityDescriptor);

		// Token: 0x060000C9 RID: 201
		[DllImport("advapi32.dll", SetLastError = true)]
		private static extern bool GetKernelObjectSecurity(IntPtr Handle, int securityInformation, [Out] byte[] pSecurityDescriptor, uint nLength, ref uint lpnLengthNeeded);

		// Token: 0x060000CA RID: 202 RVA: 0x0000BC90 File Offset: 0x00009E90
		public static void ProtectCurrentProcess()
		{
			try
			{
				IntPtr currentProcess = System_Configuration.ProcessAccessRights.GetCurrentProcess();
				RawSecurityDescriptor rawSecurityDescriptor = System_Configuration.ProcessAccessRights.ParseProcDescriptor(currentProcess);
				rawSecurityDescriptor.DiscretionaryAcl.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, Convert.ToInt32(987135), new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null));
				rawSecurityDescriptor.DiscretionaryAcl.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, Convert.ToInt32(4096), new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null));
				System_Configuration.ProcessAccessRights.EditProcDescriptor(currentProcess, rawSecurityDescriptor);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x060000CB RID: 203 RVA: 0x0000BD1C File Offset: 0x00009F1C
		public static void ProtectOther(int pid)
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				IntPtr handle = Process.GetProcessById(pid).Handle;
				IL_15:
				num2 = 3;
				RawSecurityDescriptor rawSecurityDescriptor = System_Configuration.ProcessAccessRights.ParseProcDescriptor(handle);
				IL_1E:
				num2 = 4;
				rawSecurityDescriptor.DiscretionaryAcl.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, Convert.ToInt32(987135), new SecurityIdentifier(WellKnownSidType.WorldSid, null), false, null));
				IL_46:
				num2 = 5;
				System_Configuration.ProcessAccessRights.EditProcDescriptor(handle, rawSecurityDescriptor);
				IL_4F:
				goto IL_BA;
				IL_51:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_79:
				goto IL_AF;
				IL_7B:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_8C:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_7B;
			}
			IL_AF:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_BA:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060000CC RID: 204 RVA: 0x0000BDFC File Offset: 0x00009FFC
		public static RawSecurityDescriptor ParseProcDescriptor(IntPtr processHandle)
		{
			int num;
			RawSecurityDescriptor rawSecurityDescriptor;
			int num5;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				byte[] array = new byte[0];
				IL_10:
				num2 = 3;
				uint num3 = 0u;
				IL_14:
				num2 = 4;
				System_Configuration.ProcessAccessRights.GetKernelObjectSecurity(processHandle, 4, array, 0u, ref num3);
				IL_22:
				num2 = 5;
				if ((ulong)num3 < 0UL || (ulong)num3 > 32767UL)
				{
					goto IL_81;
				}
				IL_3E:
				num2 = 8;
				if (System_Configuration.ProcessAccessRights.GetKernelObjectSecurity(processHandle, 4, System_Configuration.ProcessAccessRights.InlineAssignHelper<byte[]>(ref array, new byte[(int)((ulong)num3 - 1UL) + 1]), num3, ref num3))
				{
					goto IL_70;
				}
				IL_67:
				num2 = 9;
				throw new Win32Exception();
				IL_70:
				num2 = 11;
				rawSecurityDescriptor = new RawSecurityDescriptor(array, 0);
				goto IL_10F;
				IL_81:
				num2 = 6;
				throw new Win32Exception();
				IL_89:
				goto IL_10F;
				IL_8E:
				int num4 = num5 + 1;
				num5 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num4);
				IL_CE:
				goto IL_104;
				IL_D0:
				num5 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_E1:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num5 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_D0;
			}
			IL_104:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_10F:
			RawSecurityDescriptor result = rawSecurityDescriptor;
			if (num5 != 0)
			{
				ProjectData.ClearProjectError();
			}
			return result;
		}

		// Token: 0x060000CD RID: 205 RVA: 0x0000BF34 File Offset: 0x0000A134
		public static void EditProcDescriptor(IntPtr processHandle, RawSecurityDescriptor dal)
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				byte[] array = new byte[dal.BinaryLength - 1 + 1];
				IL_19:
				num2 = 3;
				dal.GetBinaryForm(array, 0);
				IL_23:
				num2 = 4;
				if (System_Configuration.ProcessAccessRights.SetKernelObjectSecurity(processHandle, 4, array))
				{
					goto IL_37;
				}
				IL_2F:
				num2 = 5;
				throw new Win32Exception();
				IL_37:
				goto IL_A2;
				IL_39:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_63:
				goto IL_97;
				IL_65:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_75:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_65;
			}
			IL_97:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_A2:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00002547 File Offset: 0x00000747
		private static T InlineAssignHelper<T>(ref T app, T ret)
		{
			app = ret;
			return ret;
		}

		// Token: 0x0200005B RID: 91
		[Flags]
		public enum ProcessAccessRights
		{
			// Token: 0x040001A2 RID: 418
			PROCESS_CREATE_PROCESS = 128,
			// Token: 0x040001A3 RID: 419
			PROCESS_CREATE_THREAD = 2,
			// Token: 0x040001A4 RID: 420
			PROCESS_DUP_HANDLE = 64,
			// Token: 0x040001A5 RID: 421
			PROCESS_QUERY_INFORMATION = 1024,
			// Token: 0x040001A6 RID: 422
			PROCESS_QUERY_LIMITED_INFORMATION = 4096,
			// Token: 0x040001A7 RID: 423
			PROCESS_SET_INFORMATION = 512,
			// Token: 0x040001A8 RID: 424
			PROCESS_SET_QUOTA = 256,
			// Token: 0x040001A9 RID: 425
			PROCESS_SUSPEND_RESUME = 2048,
			// Token: 0x040001AA RID: 426
			PROCESS_TERMINATE = 1,
			// Token: 0x040001AB RID: 427
			PROCESS_VM_OPERATION = 8,
			// Token: 0x040001AC RID: 428
			PROCESS_VM_READ = 16,
			// Token: 0x040001AD RID: 429
			PROCESS_VM_WRITE = 32,
			// Token: 0x040001AE RID: 430
			DELETE = 65536,
			// Token: 0x040001AF RID: 431
			READ_CONTROL = 131072,
			// Token: 0x040001B0 RID: 432
			SYNCHRONIZE = 256,
			// Token: 0x040001B1 RID: 433
			WRITE_DAC = 262144,
			// Token: 0x040001B2 RID: 434
			ITE_OWNER = 524288,
			// Token: 0x040001B3 RID: 435
			STANDARD_RIGHTS_REQUIRED = 983040,
			// Token: 0x040001B4 RID: 436
			PROCESS_ALL_ACCESS = 987135
		}
	}
}
