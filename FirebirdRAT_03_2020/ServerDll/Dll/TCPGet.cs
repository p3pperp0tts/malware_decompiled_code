using System;
using System.Diagnostics;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x0200000B RID: 11
[StandardModule]
public sealed class TCPGet
{
	// Token: 0x0600008A RID: 138
	[DllImport("iphlpapi.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern int GetExtendedTcpTable(IntPtr pTCPTable, ref int OutLen, bool Sort, int IpVersion, int dwClass, int Reserved);

	// Token: 0x0600008B RID: 139 RVA: 0x00009E2C File Offset: 0x0000802C
	public static object TCPString()
	{
		string text = string.Empty;
		foreach (TCPGet.MIB_TCPROW_OWNER_PID row in TCPGet.GetAllTCPConnections())
		{
			TCPGet.TcpConnection tcpConnection = TCPGet.MIB_ROW_To_TCP(row);
			text = string.Concat(new string[]
			{
				text,
				tcpConnection.Proc,
				",",
				tcpConnection.localAddress,
				",",
				Conversions.ToString(tcpConnection.LocalPort),
				",",
				tcpConnection.RemoteAddress,
				",",
				Conversions.ToString(tcpConnection.remotePort),
				",",
				tcpConnection.State.ToString(),
				"|"
			});
		}
		return text;
	}

	// Token: 0x0600008C RID: 140 RVA: 0x00009F1C File Offset: 0x0000811C
	public static TCPGet.MIB_TCPROW_OWNER_PID[] GetAllTCPConnections()
	{
		TCPGet.MIB_TCPROW_OWNER_PID[] result = null;
		IntPtr pTCPTable;
		int cb;
		TCPGet.GetExtendedTcpTable(pTCPTable, ref cb, false, 2, 5, 0);
		IntPtr intPtr = Marshal.AllocHGlobal(cb);
		if (TCPGet.GetExtendedTcpTable(intPtr, ref cb, false, 2, 5, 0) == 0)
		{
			object obj = Marshal.PtrToStructure(intPtr, typeof(TCPGet.MIB_TCPTABLE_OWNER_PID));
			TCPGet.MIB_TCPTABLE_OWNER_PID mib_TCPTABLE_OWNER_PID2;
			TCPGet.MIB_TCPTABLE_OWNER_PID mib_TCPTABLE_OWNER_PID = (obj != null) ? ((TCPGet.MIB_TCPTABLE_OWNER_PID)obj) : mib_TCPTABLE_OWNER_PID2;
			TCPGet.MIB_TCPROW_OWNER_PID[] array = new TCPGet.MIB_TCPROW_OWNER_PID[mib_TCPTABLE_OWNER_PID.NumberOfEntries - 1 + 1];
			int num = 0;
			int num2 = mib_TCPTABLE_OWNER_PID.NumberOfEntries - 1;
			for (int i = num; i <= num2; i++)
			{
				IntPtr ptr = new IntPtr(intPtr.ToInt32() + Marshal.SizeOf<int>(mib_TCPTABLE_OWNER_PID.NumberOfEntries) + Marshal.SizeOf(typeof(TCPGet.MIB_TCPROW_OWNER_PID)) * i);
				TCPGet.MIB_TCPROW_OWNER_PID[] array2 = array;
				int num3 = i;
				object obj2 = Marshal.PtrToStructure(ptr, typeof(TCPGet.MIB_TCPROW_OWNER_PID));
				TCPGet.MIB_TCPROW_OWNER_PID mib_TCPROW_OWNER_PID;
				array2[num3] = ((obj2 != null) ? ((TCPGet.MIB_TCPROW_OWNER_PID)obj2) : mib_TCPROW_OWNER_PID);
			}
			result = array;
		}
		Marshal.FreeHGlobal(intPtr);
		return result;
	}

	// Token: 0x0600008D RID: 141 RVA: 0x0000A00C File Offset: 0x0000820C
	public static TCPGet.TcpConnection MIB_ROW_To_TCP(TCPGet.MIB_TCPROW_OWNER_PID row)
	{
		TCPGet.TcpConnection result = default(TCPGet.TcpConnection);
		result.State = (TcpState)row.state;
		IPAddress ipaddress = new IPAddress((long)((ulong)row.localAddress));
		result.localAddress = ipaddress.ToString();
		result.LocalPort = (int)Math.Round((double)row.LocalPort / 256.0 + (double)(row.LocalPort % 256 * 256));
		ipaddress = new IPAddress((long)((ulong)row.RemoteAddress));
		result.RemoteAddress = ipaddress.ToString();
		result.remotePort = (int)Math.Round((double)row.remotePort / 256.0 + (double)(row.remotePort % 256 * 256));
		Process processById = Process.GetProcessById(row.PID);
		result.Proc = processById.ProcessName + " (" + row.PID.ToString() + ")";
		processById.Dispose();
		return result;
	}

	// Token: 0x04000032 RID: 50
	private const int TCP_TABLE_OWNER_PID_ALL = 5;

	// Token: 0x0200001D RID: 29
	public struct MIB_TCPTABLE_OWNER_PID
	{
		// Token: 0x0400006A RID: 106
		public int NumberOfEntries;

		// Token: 0x0400006B RID: 107
		public IntPtr Table;
	}

	// Token: 0x0200001E RID: 30
	public struct MIB_TCPROW_OWNER_PID
	{
		// Token: 0x0400006C RID: 108
		public int state;

		// Token: 0x0400006D RID: 109
		public uint localAddress;

		// Token: 0x0400006E RID: 110
		public int LocalPort;

		// Token: 0x0400006F RID: 111
		public uint RemoteAddress;

		// Token: 0x04000070 RID: 112
		public int remotePort;

		// Token: 0x04000071 RID: 113
		public int PID;
	}

	// Token: 0x0200001F RID: 31
	public struct TcpConnection
	{
		// Token: 0x04000072 RID: 114
		public TcpState State;

		// Token: 0x04000073 RID: 115
		public string localAddress;

		// Token: 0x04000074 RID: 116
		public int LocalPort;

		// Token: 0x04000075 RID: 117
		public string RemoteAddress;

		// Token: 0x04000076 RID: 118
		public int remotePort;

		// Token: 0x04000077 RID: 119
		public string Proc;
	}
}
