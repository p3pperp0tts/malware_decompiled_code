using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using RemoteClient.Polices;

namespace RemoteClient.Compression
{
	// Token: 0x02000041 RID: 65
	public class JpgCompression : IDisposable
	{
		// Token: 0x060000FA RID: 250 RVA: 0x00006394 File Offset: 0x00004594
		public JpgCompression(long quality)
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
			EncoderParameter encoderParameter = new EncoderParameter(Encoder.Quality, quality);
			this._Role = this.RegisterMapper("image/jpeg");
			this.m_Token = new EncoderParameters(2);
			this.m_Token.Param[0] = encoderParameter;
			this.m_Token.Param[1] = new EncoderParameter(Encoder.Compression, 5L);
		}

		// Token: 0x060000FB RID: 251 RVA: 0x0000280A File Offset: 0x00000A0A
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		// Token: 0x060000FC RID: 252 RVA: 0x00002819 File Offset: 0x00000A19
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && this.m_Token != null)
			{
				this.m_Token.Dispose();
			}
		}

		// Token: 0x060000FD RID: 253 RVA: 0x00006404 File Offset: 0x00004604
		public byte[] Compress(Bitmap bmp)
		{
			byte[] result;
			using (MemoryStream memoryStream = new MemoryStream())
			{
				bmp.Save(memoryStream, this._Role, this.m_Token);
				result = memoryStream.ToArray();
			}
			return result;
		}

		// Token: 0x060000FE RID: 254 RVA: 0x00002837 File Offset: 0x00000A37
		public void Compress(Bitmap bmp, ref Stream targetStream)
		{
			bmp.Save(targetStream, this._Role, this.m_Token);
		}

		// Token: 0x060000FF RID: 255 RVA: 0x00006450 File Offset: 0x00004650
		private ImageCodecInfo RegisterMapper(string reference)
		{
			ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
			int num = imageEncoders.Length - 1;
			for (int i = 0; i <= num; i++)
			{
				if (imageEncoders[i].MimeType == reference)
				{
					return imageEncoders[i];
				}
			}
			return null;
		}

		// Token: 0x040000B9 RID: 185
		private readonly ImageCodecInfo _Role;

		// Token: 0x040000BA RID: 186
		private readonly EncoderParameters m_Token;
	}
}
