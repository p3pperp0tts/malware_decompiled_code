using System;
using System.Reflection;
using RemoteClient.Polices;

namespace sdfsdf.Classes
{
	// Token: 0x02000045 RID: 69
	internal class ClientRuleClass
	{
		// Token: 0x06000100 RID: 256 RVA: 0x00006494 File Offset: 0x00004694
		internal static void MoveError(int typemdt)
		{
			Type type = ClientRuleClass.stubMapper.ResolveType(33554432 + typemdt);
			foreach (FieldInfo fieldInfo in type.GetFields())
			{
				MethodInfo method = (MethodInfo)ClientRuleClass.stubMapper.ResolveMethod(fieldInfo.MetadataToken + 100663296);
				fieldInfo.SetValue(null, (MulticastDelegate)Delegate.CreateDelegate(type, method));
			}
		}

		// Token: 0x06000101 RID: 257 RVA: 0x00002297 File Offset: 0x00000497
		public ClientRuleClass()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}

		// Token: 0x06000102 RID: 258 RVA: 0x0000284D File Offset: 0x00000A4D
		// Note: this type is marked as 'beforefieldinit'.
		static ClientRuleClass()
		{
			InvocationProcessPolicy.CompareError();
			ClientRuleClass.stubMapper = typeof(ClientRuleClass).Assembly.ManifestModule;
		}

		// Token: 0x040000BC RID: 188
		internal static Module stubMapper;

		// Token: 0x02000046 RID: 70
		// (Invoke) Token: 0x06000104 RID: 260
		internal delegate void UtilsMapper(object o);
	}
}
