using System;
using System.Security.Cryptography;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000004 RID: 4
[StandardModule]
public sealed class EncryptionFunctions
{
	// Token: 0x0600004A RID: 74 RVA: 0x00006788 File Offset: 0x00004988
	public static string PublicEncrypt(string text, string password, int enctype)
	{
		string result = string.Empty;
		switch (enctype)
		{
		case 0:
			result = EncryptionFunctions.XOR_Universal(text, password);
			break;
		case 1:
			result = EncryptionFunctions.AES_EncryptCBC(text, password);
			break;
		case 2:
			result = EncryptionFunctions.AES_EncryptECB(text, password);
			break;
		}
		return result;
	}

	// Token: 0x0600004B RID: 75 RVA: 0x000067CC File Offset: 0x000049CC
	public static string PublicDecrypt(string text, string password, int dectype)
	{
		string result = string.Empty;
		switch (dectype)
		{
		case 0:
			result = EncryptionFunctions.XOR_Universal(text, password);
			break;
		case 1:
			result = EncryptionFunctions.AES_DecryptCBC(text, password);
			break;
		case 2:
			result = EncryptionFunctions.AES_DecryptECB(text, password);
			break;
		}
		return result;
	}

	// Token: 0x0600004C RID: 76 RVA: 0x00006810 File Offset: 0x00004A10
	public static string XOR_Universal(string textToScramble, string password)
	{
		StringBuilder stringBuilder = new StringBuilder(textToScramble.Length);
		int num = 0;
		int num2 = textToScramble.Length - 1;
		for (int i = num; i <= num2; i++)
		{
			int index = i % password.Length;
			char c = textToScramble[i];
			c = Strings.ChrW((int)(c ^ password[index]));
			stringBuilder.Append(c);
		}
		return stringBuilder.ToString();
	}

	// Token: 0x0600004D RID: 77 RVA: 0x00006870 File Offset: 0x00004A70
	public static string AES_EncryptCBC(string plaintext, string key)
	{
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		SHA256 sha = SHA256.Create();
		string result;
		try
		{
			rijndaelManaged.GenerateIV();
			rijndaelManaged.Key = sha.ComputeHash(Encoding.Unicode.GetBytes(key));
			rijndaelManaged.Mode = CipherMode.CBC;
			ICryptoTransform cryptoTransform = rijndaelManaged.CreateEncryptor();
			byte[] bytes = Encoding.Unicode.GetBytes(plaintext);
			string text = Convert.ToBase64String(cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length));
			result = Convert.ToBase64String(rijndaelManaged.IV) + Convert.ToBase64String(cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length));
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x0600004E RID: 78 RVA: 0x00006924 File Offset: 0x00004B24
	public static string AES_DecryptCBC(string ciphertext, string key)
	{
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		SHA256 sha = SHA256.Create();
		string result;
		try
		{
			object instance = ciphertext.Split(new string[]
			{
				"=="
			}, StringSplitOptions.None);
			string s = Conversions.ToString(Operators.ConcatenateObject(NewLateBinding.LateIndexGet(instance, new object[]
			{
				0
			}, null), "=="));
			if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(instance, null, "Length", new object[0], null, null, null), 3, false))
			{
				ciphertext = Conversions.ToString(Operators.ConcatenateObject(NewLateBinding.LateIndexGet(instance, new object[]
				{
					1
				}, null), "=="));
			}
			else
			{
				ciphertext = Conversions.ToString(NewLateBinding.LateIndexGet(instance, new object[]
				{
					1
				}, null));
			}
			rijndaelManaged.Key = sha.ComputeHash(Encoding.Unicode.GetBytes(key));
			rijndaelManaged.IV = Convert.FromBase64String(s);
			rijndaelManaged.Mode = CipherMode.CBC;
			ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
			byte[] array = Convert.FromBase64String(ciphertext);
			string @string = Encoding.Unicode.GetString(cryptoTransform.TransformFinalBlock(array, 0, array.Length));
			result = @string;
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x0600004F RID: 79 RVA: 0x00006A8C File Offset: 0x00004C8C
	public static string AES_EncryptECB(string input, string pass)
	{
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
		string result;
		try
		{
			byte[] array = new byte[32];
			byte[] sourceArray = md5CryptoServiceProvider.ComputeHash(Encoding.Unicode.GetBytes(pass));
			Array.Copy(sourceArray, 0, array, 0, 16);
			Array.Copy(sourceArray, 0, array, 15, 16);
			rijndaelManaged.Key = array;
			rijndaelManaged.Mode = CipherMode.ECB;
			ICryptoTransform cryptoTransform = rijndaelManaged.CreateEncryptor();
			byte[] bytes = Encoding.Unicode.GetBytes(input);
			string text = Convert.ToBase64String(cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length));
			result = text;
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x06000050 RID: 80 RVA: 0x00006B40 File Offset: 0x00004D40
	public static string AES_DecryptECB(string input, string pass)
	{
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		MD5CryptoServiceProvider md5CryptoServiceProvider = new MD5CryptoServiceProvider();
		string result;
		try
		{
			byte[] array = new byte[32];
			byte[] sourceArray = md5CryptoServiceProvider.ComputeHash(Encoding.Unicode.GetBytes(pass));
			Array.Copy(sourceArray, 0, array, 0, 16);
			Array.Copy(sourceArray, 0, array, 15, 16);
			rijndaelManaged.Key = array;
			rijndaelManaged.Mode = CipherMode.ECB;
			ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
			byte[] array2 = Convert.FromBase64String(input);
			string @string = Encoding.Unicode.GetString(cryptoTransform.TransformFinalBlock(array2, 0, array2.Length));
			result = @string;
		}
		catch (Exception ex)
		{
		}
		return result;
	}
}
