using System;
using NanoCore.ClientPluginHost;

// Token: 0x0200000D RID: 13
public sealed class GClass4 : IClientNetworkHost
{
	// Token: 0x06000037 RID: 55 RVA: 0x00002295 File Offset: 0x00000495
	public GClass4(GClass3 gclass3_1)
	{
		this.gclass3_0 = gclass3_1;
	}

	// Token: 0x17000004 RID: 4
	// (get) Token: 0x06000038 RID: 56 RVA: 0x000022A4 File Offset: 0x000004A4
	public bool Connected
	{
		get
		{
			return Class8.client_0.method_35();
		}
	}

	// Token: 0x06000039 RID: 57 RVA: 0x000022B0 File Offset: 0x000004B0
	public void ClosePipe(string string_0)
	{
		if (Class8.dictionary_2.ContainsKey(string_0))
		{
			Class8.dictionary_2[string_0].method_56();
		}
	}

	// Token: 0x0600003A RID: 58 RVA: 0x000022CF File Offset: 0x000004CF
	public bool PipeExists(string string_0)
	{
		return Class8.dictionary_2.ContainsKey(string_0);
	}

	// Token: 0x0600003B RID: 59 RVA: 0x000022DC File Offset: 0x000004DC
	public void Disconnect()
	{
		Class8.client_0.method_56();
	}

	// Token: 0x0600003C RID: 60 RVA: 0x0000356C File Offset: 0x0000176C
	public void SendToServer(string string_0, bool bool_0, params object[] object_0)
	{
		if (object_0 == null)
		{
			Class8.smethod_85(this.gclass3_0, new Exception("One or more parameters are null."), "SendToServer");
			return;
		}
		Client client_ = Class8.client_0;
		if (!string.IsNullOrEmpty(string_0))
		{
			if (!Class8.dictionary_2.ContainsKey(string_0))
			{
				return;
			}
			client_ = Class8.dictionary_2[string_0];
		}
		Class8.smethod_89(client_, bool_0, CommandType.BaseCommand, 4, this.gclass3_0.guid_0, object_0);
	}

	// Token: 0x0600003D RID: 61 RVA: 0x000022E8 File Offset: 0x000004E8
	public void AddHostEntry(string string_0)
	{
		Class8.smethod_64(string_0);
	}

	// Token: 0x0600003E RID: 62 RVA: 0x000022F0 File Offset: 0x000004F0
	public void RebuildHostCache()
	{
		Class8.smethod_63();
	}

	// Token: 0x0400001B RID: 27
	public GClass3 gclass3_0;
}
