using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;
using NanoCore.ClientPlugin;
using NanoCore.ClientPluginHost;

// Token: 0x02000029 RID: 41
[StandardModule]
internal sealed class Class23
{
	// Token: 0x0600011C RID: 284 RVA: 0x00008234 File Offset: 0x00006434
	public static void smethod_0(byte[] byte_0, GClass2 gclass2_0)
	{
		try
		{
			GClass3 gclass = new GClass3(gclass2_0.guid_0, gclass2_0.string_0);
			gclass2_0.gclass3_0 = gclass;
			Type type = Class27.smethod_0(byte_0, Class6.type_0, Class6.type_1);
			if (type == null)
			{
				throw new Exception("Client assembly does not meet plugin type requirements.");
			}
			List<object> list = new List<object>();
			ConstructorInfo constructorInfo = type.GetConstructors()[0];
			foreach (ParameterInfo parameterInfo in constructorInfo.GetParameters())
			{
				if (typeof(IClientDataHost).Equals(parameterInfo.ParameterType))
				{
					list.Add(new GClass1(gclass));
				}
				else if (typeof(IClientNetworkHost).Equals(parameterInfo.ParameterType))
				{
					list.Add(new GClass4(gclass));
				}
				else if (typeof(IClientUIHost).Equals(parameterInfo.ParameterType))
				{
					list.Add(new GClass9(gclass));
				}
				else if (typeof(IClientLoggingHost).Equals(parameterInfo.ParameterType))
				{
					list.Add(new GClass7(gclass));
				}
				else if (typeof(IClientAppHost).Equals(parameterInfo.ParameterType))
				{
					list.Add(new GClass10(gclass));
				}
				else
				{
					list.Add(null);
				}
			}
			object objectValue = RuntimeHelpers.GetObjectValue(Activator.CreateInstance(type, list.ToArray()));
			foreach (Type o in type.GetInterfaces())
			{
				if (typeof(IClientData).Equals(o))
				{
					gclass.iclientData_0 = (IClientData)objectValue;
				}
				else if (typeof(IClientNetwork).Equals(o))
				{
					gclass.iclientNetwork_0 = (IClientNetwork)objectValue;
				}
				else if (typeof(IClientApp).Equals(o))
				{
					gclass.iclientApp_0 = (IClientApp)objectValue;
				}
			}
			Class8.smethod_87(string.Format("Plugin: {0}, Cache: {1}", gclass2_0.string_0, gclass2_0.bool_0));
			if (!Class8.list_2.Contains(gclass2_0))
			{
				Class8.list_2.Add(gclass2_0);
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_85(gclass2_0.gclass3_0, exception_, "InitializePlugin");
		}
	}

	// Token: 0x0600011D RID: 285 RVA: 0x00008488 File Offset: 0x00006688
	public static GClass2 smethod_1(Guid guid_0)
	{
		int num = 0;
		int num2 = Class8.list_2.Count - 1;
		for (int i = num; i <= num2; i++)
		{
			if (Class8.list_2[i].guid_0 == guid_0)
			{
				return Class8.list_2[i];
			}
		}
		return null;
	}
}
