using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace JLibrary.PortableExecutable
{
	// Token: 0x0200003E RID: 62
	public class ResourceWalker
	{
		// Token: 0x17000011 RID: 17
		// (get) Token: 0x06000153 RID: 339 RVA: 0x000028B3 File Offset: 0x00000AB3
		// (set) Token: 0x06000154 RID: 340 RVA: 0x000028BB File Offset: 0x00000ABB
		public ResourceWalker.ResourceDirectory Root { get; private set; }

		// Token: 0x06000155 RID: 341 RVA: 0x0000EF80 File Offset: 0x0000D180
		public ResourceWalker(PortableExecutable image)
		{
			IMAGE_DATA_DIRECTORY image_DATA_DIRECTORY = image.NTHeader.OptionalHeader.DataDirectory[2];
			if (image_DATA_DIRECTORY.VirtualAddress <= 0u || image_DATA_DIRECTORY.Size <= 0u)
			{
				return;
			}
			uint ptrFromRVA;
			IMAGE_RESOURCE_DIRECTORY image_RESOURCE_DIRECTORY;
			if (image.Read<IMAGE_RESOURCE_DIRECTORY>((long)((ulong)(ptrFromRVA = image.GetPtrFromRVA(image_DATA_DIRECTORY.VirtualAddress))), SeekOrigin.Begin, out image_RESOURCE_DIRECTORY))
			{
				this.Root = new ResourceWalker.ResourceDirectory(image, new IMAGE_RESOURCE_DIRECTORY_ENTRY
				{
					SubdirectoryRva = 2147483648u
				}, false, ptrFromRVA);
				return;
			}
			throw image.GetLastError();
		}

		// Token: 0x02000060 RID: 96
		public abstract class ResourceObject
		{
			// Token: 0x17000016 RID: 22
			// (get) Token: 0x06000193 RID: 403 RVA: 0x000029F4 File Offset: 0x00000BF4
			public string Name
			{
				get
				{
					return this._name;
				}
			}

			// Token: 0x17000017 RID: 23
			// (get) Token: 0x06000194 RID: 404 RVA: 0x000029FC File Offset: 0x00000BFC
			public int Id
			{
				get
				{
					if (!this.IsNamedResource)
					{
						return (int)this._entry.IntegerId;
					}
					return -1;
				}
			}

			// Token: 0x17000018 RID: 24
			// (get) Token: 0x06000195 RID: 405 RVA: 0x00002A13 File Offset: 0x00000C13
			// (set) Token: 0x06000196 RID: 406 RVA: 0x00002A1B File Offset: 0x00000C1B
			public bool IsNamedResource { get; protected set; }

			// Token: 0x06000197 RID: 407 RVA: 0x0000F4F8 File Offset: 0x0000D6F8
			public ResourceObject(PortableExecutable owner, IMAGE_RESOURCE_DIRECTORY_ENTRY entry, bool named, uint root)
			{
				this._owner = owner;
				this._entry = entry;
				this.IsNamedResource = named;
				if (named)
				{
					ushort num = 0;
					if (owner.Read<ushort>((long)((ulong)(root + (entry.NameRva & 2147483647u))), SeekOrigin.Begin, out num))
					{
						byte[] array = new byte[(int)num << 1];
						if (owner.Read(0L, SeekOrigin.Current, array))
						{
							this._name = Encoding.Unicode.GetString(array);
						}
					}
					if (this._name == null)
					{
						throw owner.GetLastError();
					}
				}
				this._root = root;
			}

			// Token: 0x040001DB RID: 475
			private string _name;

			// Token: 0x040001DC RID: 476
			protected uint _root;

			// Token: 0x040001DD RID: 477
			protected PortableExecutable _owner;

			// Token: 0x040001DE RID: 478
			protected IMAGE_RESOURCE_DIRECTORY_ENTRY _entry;
		}

		// Token: 0x02000061 RID: 97
		public class ResourceFile : ResourceWalker.ResourceObject
		{
			// Token: 0x06000198 RID: 408 RVA: 0x00002A24 File Offset: 0x00000C24
			public ResourceFile(PortableExecutable owner, IMAGE_RESOURCE_DIRECTORY_ENTRY entry, bool named, uint root) : base(owner, entry, named, root)
			{
				if (!owner.Read<IMAGE_RESOURCE_DATA_ENTRY>((long)((ulong)(this._root + entry.DataEntryRva)), SeekOrigin.Begin, out this._base))
				{
					throw owner.GetLastError();
				}
			}

			// Token: 0x06000199 RID: 409 RVA: 0x0000F588 File Offset: 0x0000D788
			public byte[] GetData()
			{
				byte[] array = new byte[this._base.Size];
				if (!this._owner.Read((long)((ulong)this._owner.GetPtrFromRVA(this._base.OffsetToData)), SeekOrigin.Begin, array))
				{
					throw this._owner.GetLastError();
				}
				return array;
			}

			// Token: 0x040001E0 RID: 480
			private IMAGE_RESOURCE_DATA_ENTRY _base;
		}

		// Token: 0x02000062 RID: 98
		public class ResourceDirectory : ResourceWalker.ResourceObject
		{
			// Token: 0x17000019 RID: 25
			// (get) Token: 0x0600019A RID: 410 RVA: 0x00002A56 File Offset: 0x00000C56
			public ResourceWalker.ResourceFile[] Files
			{
				get
				{
					if (this._files == null)
					{
						this.Initialize();
					}
					return this._files;
				}
			}

			// Token: 0x1700001A RID: 26
			// (get) Token: 0x0600019B RID: 411 RVA: 0x00002A6C File Offset: 0x00000C6C
			public ResourceWalker.ResourceDirectory[] Directories
			{
				get
				{
					if (this._dirs == null)
					{
						this.Initialize();
					}
					return this._dirs;
				}
			}

			// Token: 0x0600019C RID: 412 RVA: 0x0000F5DC File Offset: 0x0000D7DC
			private void Initialize()
			{
				List<ResourceWalker.ResourceDirectory> list = new List<ResourceWalker.ResourceDirectory>();
				List<ResourceWalker.ResourceFile> list2 = new List<ResourceWalker.ResourceFile>();
				int numberOfNamedEntries = (int)this._base.NumberOfNamedEntries;
				for (int i = 0; i < numberOfNamedEntries + (int)this._base.NumberOfIdEntries; i++)
				{
					IMAGE_RESOURCE_DIRECTORY_ENTRY entry;
					if (this._owner.Read<IMAGE_RESOURCE_DIRECTORY_ENTRY>((long)((ulong)(this._root + 16u + (this._entry.SubdirectoryRva ^ 2147483648u)) + (ulong)((long)i * 8L)), SeekOrigin.Begin, out entry))
					{
						if ((entry.SubdirectoryRva & 2147483648u) != 0u)
						{
							list.Add(new ResourceWalker.ResourceDirectory(this._owner, entry, i < numberOfNamedEntries, this._root));
						}
						else
						{
							list2.Add(new ResourceWalker.ResourceFile(this._owner, entry, i < numberOfNamedEntries, this._root));
						}
					}
				}
				this._files = list2.ToArray();
				this._dirs = list.ToArray();
			}

			// Token: 0x0600019D RID: 413 RVA: 0x00002A82 File Offset: 0x00000C82
			public ResourceDirectory(PortableExecutable owner, IMAGE_RESOURCE_DIRECTORY_ENTRY entry, bool named, uint root) : base(owner, entry, named, root)
			{
				if (!owner.Read<IMAGE_RESOURCE_DIRECTORY>((long)((ulong)(root + (entry.SubdirectoryRva ^ 2147483648u))), SeekOrigin.Begin, out this._base))
				{
					throw owner.GetLastError();
				}
			}

			// Token: 0x040001E1 RID: 481
			private const uint SZ_ENTRY = 8u;

			// Token: 0x040001E2 RID: 482
			private const uint SZ_DIRECTORY = 16u;

			// Token: 0x040001E3 RID: 483
			private IMAGE_RESOURCE_DIRECTORY _base;

			// Token: 0x040001E4 RID: 484
			private ResourceWalker.ResourceFile[] _files;

			// Token: 0x040001E5 RID: 485
			private ResourceWalker.ResourceDirectory[] _dirs;
		}
	}
}
