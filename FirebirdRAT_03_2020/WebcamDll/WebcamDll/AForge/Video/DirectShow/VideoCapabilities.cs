using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using AForge.Video.DirectShow.Internals;

namespace AForge.Video.DirectShow
{
	// Token: 0x0200000E RID: 14
	public class VideoCapabilities
	{
		// Token: 0x06000026 RID: 38 RVA: 0x0000260C File Offset: 0x0000080C
		internal static VideoCapabilities[] FromStreamConfig(IAMStreamConfig videoStreamConfig)
		{
			if (videoStreamConfig == null)
			{
				throw new ArgumentNullException("videoStreamConfig");
			}
			int num;
			int num2;
			int numberOfCapabilities = videoStreamConfig.GetNumberOfCapabilities(out num, out num2);
			if (numberOfCapabilities != 0)
			{
				Marshal.ThrowExceptionForHR(numberOfCapabilities);
			}
			if (num <= 0)
			{
				throw new NotSupportedException("This video device does not report capabilities.");
			}
			if (num2 > Marshal.SizeOf(typeof(VideoStreamConfigCaps)))
			{
				throw new NotSupportedException("Unable to retrieve video device capabilities. This video device requires a larger VideoStreamConfigCaps structure.");
			}
			Dictionary<uint, VideoCapabilities> dictionary = new Dictionary<uint, VideoCapabilities>();
			for (int i = 0; i < num; i++)
			{
				try
				{
					VideoCapabilities videoCapabilities = new VideoCapabilities(videoStreamConfig, i);
					uint key = (uint)(videoCapabilities.FrameSize.Height | videoCapabilities.FrameSize.Width << 16);
					if (!dictionary.ContainsKey(key))
					{
						dictionary.Add(key, videoCapabilities);
					}
					else if (videoCapabilities.BitCount > dictionary[key].BitCount)
					{
						dictionary[key] = videoCapabilities;
					}
				}
				catch
				{
				}
			}
			VideoCapabilities[] array = new VideoCapabilities[dictionary.Count];
			dictionary.Values.CopyTo(array, 0);
			return array;
		}

		// Token: 0x06000027 RID: 39 RVA: 0x00002718 File Offset: 0x00000918
		internal VideoCapabilities(IAMStreamConfig videoStreamConfig, int index)
		{
			AMMediaType ammediaType = null;
			VideoStreamConfigCaps videoStreamConfigCaps = new VideoStreamConfigCaps();
			try
			{
				int streamCaps = videoStreamConfig.GetStreamCaps(index, out ammediaType, videoStreamConfigCaps);
				if (streamCaps != 0)
				{
					Marshal.ThrowExceptionForHR(streamCaps);
				}
				if (ammediaType.FormatType == FormatType.VideoInfo)
				{
					VideoInfoHeader videoInfoHeader = (VideoInfoHeader)Marshal.PtrToStructure(ammediaType.FormatPtr, typeof(VideoInfoHeader));
					this.FrameSize = new Size(videoInfoHeader.BmiHeader.Width, videoInfoHeader.BmiHeader.Height);
					this.BitCount = (int)videoInfoHeader.BmiHeader.BitCount;
					this.AverageFrameRate = (int)(10000000L / videoInfoHeader.AverageTimePerFrame);
					this.MaximumFrameRate = (int)(10000000L / videoStreamConfigCaps.MinFrameInterval);
				}
				else
				{
					if (!(ammediaType.FormatType == FormatType.VideoInfo2))
					{
						throw new ApplicationException("Unsupported format found.");
					}
					VideoInfoHeader2 videoInfoHeader2 = (VideoInfoHeader2)Marshal.PtrToStructure(ammediaType.FormatPtr, typeof(VideoInfoHeader2));
					this.FrameSize = new Size(videoInfoHeader2.BmiHeader.Width, videoInfoHeader2.BmiHeader.Height);
					this.BitCount = (int)videoInfoHeader2.BmiHeader.BitCount;
					this.AverageFrameRate = (int)(10000000L / videoInfoHeader2.AverageTimePerFrame);
					this.MaximumFrameRate = (int)(10000000L / videoStreamConfigCaps.MinFrameInterval);
				}
				if (this.BitCount <= 12)
				{
					throw new ApplicationException("Unsupported format found.");
				}
			}
			finally
			{
				if (ammediaType != null)
				{
					ammediaType.Dispose();
				}
			}
		}

		// Token: 0x06000028 RID: 40 RVA: 0x000028AC File Offset: 0x00000AAC
		public override bool Equals(object obj)
		{
			return this.Equals(obj as VideoCapabilities);
		}

		// Token: 0x06000029 RID: 41 RVA: 0x000028BA File Offset: 0x00000ABA
		public bool Equals(VideoCapabilities vc2)
		{
			return vc2 != null && this.FrameSize == vc2.FrameSize && this.BitCount == vc2.BitCount;
		}

		// Token: 0x0600002A RID: 42 RVA: 0x000028E4 File Offset: 0x00000AE4
		public override int GetHashCode()
		{
			return this.FrameSize.GetHashCode() ^ this.BitCount;
		}

		// Token: 0x0600002B RID: 43 RVA: 0x0000290C File Offset: 0x00000B0C
		public static bool operator ==(VideoCapabilities a, VideoCapabilities b)
		{
			return a == b || (a != null && b != null && a.Equals(b));
		}

		// Token: 0x0600002C RID: 44 RVA: 0x00002923 File Offset: 0x00000B23
		public static bool operator !=(VideoCapabilities a, VideoCapabilities b)
		{
			return !(a == b);
		}

		// Token: 0x04000016 RID: 22
		public readonly Size FrameSize;

		// Token: 0x04000017 RID: 23
		public readonly int AverageFrameRate;

		// Token: 0x04000018 RID: 24
		public readonly int MaximumFrameRate;

		// Token: 0x04000019 RID: 25
		public readonly int BitCount;
	}
}
