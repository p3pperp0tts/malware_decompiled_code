using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Text;

// Token: 0x02000018 RID: 24
internal static class Class11
{
	// Token: 0x060000E3 RID: 227 RVA: 0x00006840 File Offset: 0x00004A40
	internal static long smethod_0()
	{
		if (Assembly.GetCallingAssembly() == typeof(Class11).Assembly && Class11.smethod_1())
		{
			long result;
			lock (Class11.class19_0)
			{
				long num = Class11.class19_0.method_0();
				if (num == 0L)
				{
					Assembly executingAssembly = Assembly.GetExecutingAssembly();
					List<byte> list = new List<byte>();
					AssemblyName assemblyName;
					try
					{
						assemblyName = executingAssembly.GetName();
					}
					catch
					{
						assemblyName = new AssemblyName(executingAssembly.FullName);
					}
					byte[] array = assemblyName.GetPublicKeyToken();
					if (array != null && array.Length == 0)
					{
						array = null;
					}
					if (array != null)
					{
						list.AddRange(array);
					}
					list.AddRange(Encoding.Unicode.GetBytes(assemblyName.Name));
					int num2 = Class11.smethod_3(typeof(Class11));
					int num3 = Class11.Class17.smethod_0();
					list.Add((byte)(num2 >> 24));
					list.Add((byte)(num3 >> 16));
					list.Add((byte)(num2 >> 8));
					list.Add((byte)num3);
					list.Add((byte)(num2 >> 16));
					list.Add((byte)(num3 >> 8));
					list.Add((byte)num2);
					list.Add((byte)(num3 >> 24));
					int count = list.Count;
					ulong num4 = 0UL;
					for (int num5 = 0; num5 != count; num5++)
					{
						num4 += (ulong)list[num5];
						num4 += num4 << 20;
						num4 ^= num4 >> 12;
						list[num5] = 0;
					}
					num4 += num4 << 6;
					num4 ^= num4 >> 22;
					num4 += num4 << 30;
					num = (long)num4;
					num ^= 8494945492412606243L;
					Class11.class19_0.method_1(num);
				}
				result = num;
			}
			return result;
		}
		return 5038234971328056794L;
	}

	// Token: 0x060000E4 RID: 228 RVA: 0x00002623 File Offset: 0x00000823
	private static bool smethod_1()
	{
		return Class11.smethod_2();
	}

	// Token: 0x060000E5 RID: 229 RVA: 0x00006A38 File Offset: 0x00004C38
	private static bool smethod_2()
	{
		StackTrace stackTrace = new StackTrace();
		StackFrame frame = stackTrace.GetFrame(3);
		MethodBase methodBase = (frame == null) ? null : frame.GetMethod();
		Type type = (methodBase == null) ? null : methodBase.DeclaringType;
		return type != typeof(RuntimeMethodHandle) && type != null && type.Assembly == typeof(Class11).Assembly;
	}

	// Token: 0x060000E6 RID: 230 RVA: 0x0000262F File Offset: 0x0000082F
	private static int smethod_3(Type type_0)
	{
		return type_0.MetadataToken;
	}

	// Token: 0x04000055 RID: 85
	private static Class11.Class19 class19_0 = new Class11.Class19();

	// Token: 0x02000019 RID: 25
	private sealed class Class12
	{
		// Token: 0x060000E8 RID: 232 RVA: 0x00006A9C File Offset: 0x00004C9C
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_0(Class11.smethod_3(typeof(Class11.Class12)), Class11.Class15.smethod_2(Class11.Class15.smethod_1(Class11.smethod_3(typeof(Class11.Class16)), Class11.smethod_3(typeof(Class11.Class17))), Class11.Class15.smethod_2(Class11.smethod_3(typeof(Class11.Class13)) ^ 30560526, Class11.Class16.smethod_0())));
		}
	}

	// Token: 0x0200001A RID: 26
	private sealed class Class13
	{
		// Token: 0x060000EA RID: 234 RVA: 0x00006B04 File Offset: 0x00004D04
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_2(Class11.Class15.smethod_0(Class11.Class14.smethod_0() ^ 527758446, Class11.smethod_3(typeof(Class11.Class18))), Class11.Class15.smethod_1(Class11.smethod_3(typeof(Class11.Class17)) ^ Class11.smethod_3(typeof(Class11.Class12)), 365557629));
		}
	}

	// Token: 0x0200001B RID: 27
	private sealed class Class14
	{
		// Token: 0x060000EC RID: 236 RVA: 0x00006B60 File Offset: 0x00004D60
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_0(Class11.smethod_3(typeof(Class11.Class13)), Class11.smethod_3(typeof(Class11.Class18)) ^ Class11.Class15.smethod_1(Class11.smethod_3(typeof(Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof(Class11.Class12)), Class11.Class18.smethod_0())));
		}
	}

	// Token: 0x0200001C RID: 28
	private static class Class15
	{
		// Token: 0x060000ED RID: 237 RVA: 0x00002637 File Offset: 0x00000837
		internal static int smethod_0(int int_0, int int_1)
		{
			return int_0 ^ int_1 - -1406785609;
		}

		// Token: 0x060000EE RID: 238 RVA: 0x00002642 File Offset: 0x00000842
		internal static int smethod_1(int int_0, int int_1)
		{
			return int_0 - -1320418448 ^ int_1 + 1040853010;
		}

		// Token: 0x060000EF RID: 239 RVA: 0x00002653 File Offset: 0x00000853
		internal static int smethod_2(int int_0, int int_1)
		{
			return int_0 ^ (int_1 - 1570757119 ^ int_0 - int_1);
		}
	}

	// Token: 0x0200001D RID: 29
	private sealed class Class16
	{
		// Token: 0x060000F1 RID: 241 RVA: 0x00002662 File Offset: 0x00000862
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_1(Class11.Class15.smethod_1(Class11.Class13.smethod_0(), Class11.Class15.smethod_0(Class11.smethod_3(typeof(Class11.Class16)), Class11.Class14.smethod_0())), Class11.smethod_3(typeof(Class11.Class12)));
		}
	}

	// Token: 0x0200001E RID: 30
	private sealed class Class17
	{
		// Token: 0x060000F3 RID: 243 RVA: 0x00006BC0 File Offset: 0x00004DC0
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_2(Class11.Class15.smethod_1(Class11.smethod_3(typeof(Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof(Class11.Class17)), Class11.smethod_3(typeof(Class11.Class16)))), Class11.Class12.smethod_0());
		}
	}

	// Token: 0x0200001F RID: 31
	private sealed class Class18
	{
		// Token: 0x060000F5 RID: 245 RVA: 0x00006C10 File Offset: 0x00004E10
		internal static int smethod_0()
		{
			return Class11.Class15.smethod_2(Class11.smethod_3(typeof(Class11.Class18)), Class11.Class15.smethod_0(Class11.smethod_3(typeof(Class11.Class17)), Class11.Class15.smethod_1(Class11.smethod_3(typeof(Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof(Class11.Class13)), Class11.Class15.smethod_0(Class11.smethod_3(typeof(Class11.Class16)), Class11.smethod_3(typeof(Class11.Class12)))))));
		}
	}

	// Token: 0x02000020 RID: 32
	private sealed class Class19
	{
		// Token: 0x060000F6 RID: 246 RVA: 0x0000269B File Offset: 0x0000089B
		internal Class19()
		{
			this.method_1(0L);
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x00006C90 File Offset: 0x00004E90
		internal long method_0()
		{
			if (Assembly.GetCallingAssembly() != typeof(Class11.Class19).Assembly)
			{
				return 2918384L;
			}
			if (!Class11.smethod_1())
			{
				return 2918384L;
			}
			int[] array = new int[]
			{
				0,
				0,
				0,
				1945488948
			};
			array[1] = -1641090041;
			array[2] = -860348197;
			array[0] = 1249369803;
			int num = this.int_0;
			int num2 = this.int_1;
			int num3 = -1640531527;
			int num4 = -957401312;
			for (int num5 = 0; num5 != 32; num5++)
			{
				num2 -= ((num << 4 ^ num >> 5) + num ^ num4 + array[num4 >> 11 & 3]);
				num4 -= num3;
				num -= ((num2 << 4 ^ num2 >> 5) + num2 ^ num4 + array[num4 & 3]);
			}
			for (int num6 = 0; num6 != 4; num6++)
			{
				array[num6] = 0;
			}
			ulong num7 = (ulong)((ulong)((long)num2) << 32);
			return (long)(num7 | (ulong)num);
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x00006D7C File Offset: 0x00004F7C
		internal void method_1(long long_0)
		{
			if (Assembly.GetCallingAssembly() != typeof(Class11.Class19).Assembly)
			{
				return;
			}
			if (!Class11.smethod_1())
			{
				return;
			}
			int[] array = new int[4];
			array[1] = -1641090041;
			array[0] = 1249369803;
			array[2] = -860348197;
			array[3] = 1945488948;
			int num = -1640531527;
			int num2 = (int)long_0;
			int num3 = (int)(long_0 >> 32);
			int num4 = 0;
			for (int num5 = 0; num5 != 32; num5++)
			{
				num2 += ((num3 << 4 ^ num3 >> 5) + num3 ^ num4 + array[num4 & 3]);
				num4 += num;
				num3 += ((num2 << 4 ^ num2 >> 5) + num2 ^ num4 + array[num4 >> 11 & 3]);
			}
			for (int num6 = 0; num6 != 4; num6++)
			{
				array[num6] = 0;
			}
			this.int_0 = num2;
			this.int_1 = num3;
		}

		// Token: 0x04000056 RID: 86
		private int int_0;

		// Token: 0x04000057 RID: 87
		private int int_1;
	}
}
