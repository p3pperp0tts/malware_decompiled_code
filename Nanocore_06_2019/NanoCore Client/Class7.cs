using System;
using System.IO;
using Microsoft.VisualBasic.CompilerServices;

// Token: 0x02000010 RID: 16
[StandardModule]
internal sealed class Class7
{
	// Token: 0x06000040 RID: 64 RVA: 0x00003664 File Offset: 0x00001864
	public static void smethod_0(string string_0, int int_0, long long_0)
	{
		FileStream fileStream = new FileStream(string_0, FileMode.Create, FileAccess.Write);
		byte[] array = new byte[int_0 - 1 + 1];
		long num2;
		do
		{
			int num = (int)Math.Min((long)array.Length, long_0 - num2);
			fileStream.Write(array, 0, num);
			num2 += (long)num;
		}
		while (num2 != long_0);
		fileStream.Close();
	}

	// Token: 0x06000041 RID: 65 RVA: 0x000036AC File Offset: 0x000018AC
	public static GStruct3 smethod_1(string string_0)
	{
		GStruct3 gstruct = default(GStruct3);
		GStruct3 result;
		try
		{
			FileInfo fileInfo = new FileInfo(string_0);
			FileStream fileStream = fileInfo.OpenRead();
			gstruct.string_0 = Class27.smethod_3(fileStream);
			gstruct.long_0 = fileInfo.Length;
			fileStream.Close();
			result = gstruct;
		}
		catch (Exception ex)
		{
			GStruct3 gstruct2;
			result = gstruct2;
		}
		return result;
	}

	// Token: 0x06000042 RID: 66 RVA: 0x00003714 File Offset: 0x00001914
	public static bool smethod_2(string string_0, long long_0, string string_1)
	{
		FileInfo fileInfo = new FileInfo(string_0);
		if (!fileInfo.Exists)
		{
			return false;
		}
		if (fileInfo.Length != long_0)
		{
			return false;
		}
		FileStream fileStream = fileInfo.OpenRead();
		string left = Class27.smethod_3(fileStream);
		fileStream.Close();
		return Operators.CompareString(left, string_1, false) == 0;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x0000375C File Offset: 0x0000195C
	public static bool smethod_3(string string_0, long long_0, long long_1, string string_1)
	{
		FileInfo fileInfo = new FileInfo(string_0);
		if (fileInfo.Exists)
		{
			if (fileInfo.Length != long_0)
			{
				return false;
			}
			if (long_1 == 0L)
			{
				return true;
			}
			FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Read);
			string left = Class27.smethod_4(fileStream, 5242880, long_1);
			fileStream.Close();
			return Operators.CompareString(left, string_1, false) == 0;
		}
		else
		{
			if (long_1 != 0L)
			{
				return false;
			}
			Class7.smethod_0(string_0, 5242880, long_0);
			return true;
		}
	}

	// Token: 0x06000044 RID: 68 RVA: 0x000037D4 File Offset: 0x000019D4
	public static string smethod_4(string string_0, long long_0)
	{
		if (long_0 == 0L)
		{
			return string.Empty;
		}
		FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Read);
		string result = Class27.smethod_4(fileStream, 5242880, long_0);
		fileStream.Close();
		return result;
	}

	// Token: 0x06000045 RID: 69 RVA: 0x00003810 File Offset: 0x00001A10
	public static byte[] smethod_5(string string_0, long long_0, int int_0)
	{
		FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Read);
		int num = (int)Math.Min(fileStream.Length - long_0, (long)int_0);
		byte[] array = new byte[num - 1 + 1];
		fileStream.Position = long_0;
		int num2;
		do
		{
			int count = (int)Math.Min(fileStream.Length - (long)num2, (long)array.Length);
			int num3 = fileStream.Read(array, num2, count);
			num2 += num3;
		}
		while (num2 != array.Length);
		fileStream.Close();
		return array;
	}

	// Token: 0x06000046 RID: 70 RVA: 0x0000387C File Offset: 0x00001A7C
	public static void smethod_6(string string_0, byte[] byte_0, long long_0)
	{
		FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Write);
		fileStream.Position = long_0;
		fileStream.Write(byte_0, 0, byte_0.Length);
		fileStream.Close();
	}
}
