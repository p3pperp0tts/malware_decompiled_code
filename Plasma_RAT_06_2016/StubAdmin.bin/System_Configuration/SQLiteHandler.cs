using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace System_Configuration
{
	// Token: 0x02000019 RID: 25
	public class SQLiteHandler
	{
		// Token: 0x0600009F RID: 159 RVA: 0x00009B00 File Offset: 0x00007D00
		private int GVL(int startIndex)
		{
			int result;
			try
			{
				if (startIndex > this.db_bytes.Length)
				{
					result = 0;
				}
				else
				{
					int num = startIndex + 8;
					for (int i = startIndex; i <= num; i++)
					{
						if (i > this.db_bytes.Length - 1)
						{
							return 0;
						}
						if ((this.db_bytes[i] & 128) != 128)
						{
							return i;
						}
					}
					result = startIndex + 8;
				}
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00009B7C File Offset: 0x00007D7C
		private long CVL(int startIndex, int endIndex)
		{
			long result;
			try
			{
				endIndex++;
				byte[] array = new byte[8];
				int num = endIndex - startIndex;
				bool flag = false;
				if (num == 0 | num > 9)
				{
					result = 0L;
				}
				else if (num == 1)
				{
					array[0] = (this.db_bytes[startIndex] & 127);
					result = BitConverter.ToInt64(array, 0);
				}
				else
				{
					if (num == 9)
					{
						flag = true;
					}
					int num2 = 1;
					int num3 = 7;
					int num4 = 0;
					if (flag)
					{
						array[0] = this.db_bytes[endIndex - 1];
						endIndex--;
						num4 = 1;
					}
					for (int i = endIndex - 1; i >= startIndex; i += -1)
					{
						if (i - 1 >= startIndex)
						{
							array[num4] = (byte)(((int)((byte)((uint)this.db_bytes[i] >> (num2 - 1 & 7))) & 255 >> num2) | (int)((byte)(this.db_bytes[i - 1] << (num3 & 7))));
							num2++;
							num4++;
							num3--;
						}
						else if (!flag)
						{
							array[num4] = (byte)((int)((byte)((uint)this.db_bytes[i] >> (num2 - 1 & 7))) & 255 >> num2);
						}
					}
					result = BitConverter.ToInt64(array, 0);
				}
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x000024CC File Offset: 0x000006CC
		private bool IsOdd(long value)
		{
			return (value & 1L) == 1L;
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00009CBC File Offset: 0x00007EBC
		private ulong ConvertToInteger(int startIndex, int Size)
		{
			ulong result;
			try
			{
				if (Size > 8 | Size == 0)
				{
					result = 0UL;
				}
				else
				{
					ulong num = 0UL;
					int num2 = 0;
					int num3 = Size - 1;
					for (int i = num2; i <= num3; i++)
					{
						num = (num << 8 | (ulong)this.db_bytes[startIndex + i]);
					}
					result = num;
				}
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00009D2C File Offset: 0x00007F2C
		private void ReadMasterTable(ulong Offset)
		{
			try
			{
				if (this.db_bytes[(int)Offset] == 13)
				{
					ushort num = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3m)), 2)), 1m));
					int num2 = 0;
					if (this.master_table_entries != null)
					{
						num2 = this.master_table_entries.Length;
						this.master_table_entries = (SQLiteHandler.sqlite_master_entry[])Utils.CopyArray((Array)this.master_table_entries, new SQLiteHandler.sqlite_master_entry[this.master_table_entries.Length + (int)num + 1]);
					}
					else
					{
						this.master_table_entries = new SQLiteHandler.sqlite_master_entry[(int)(num + 1)];
					}
					int num3 = 0;
					int num4 = (int)num;
					for (int i = num3; i <= num4; i++)
					{
						ulong num5 = this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 8m), new decimal(i * 2))), 2);
						if (decimal.Compare(new decimal(Offset), 100m) != 0)
						{
							num5 += Offset;
						}
						int num6 = this.GVL((int)num5);
						this.CVL((int)num5, num6);
						int num7 = this.GVL(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num6), new decimal(num5))), 1m)));
						this.master_table_entries[num2 + i].row_id = this.CVL(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num6), new decimal(num5))), 1m)), num7);
						num5 = Convert.ToUInt64(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num7), new decimal(num5))), 1m));
						num6 = this.GVL((int)num5);
						num7 = num6;
						long value = this.CVL((int)num5, num6);
						long[] array = new long[5];
						int num8 = 0;
						do
						{
							num6 = num7 + 1;
							num7 = this.GVL(num6);
							array[num8] = this.CVL(num6, num7);
							if (array[num8] > 9L)
							{
								if (this.IsOdd(array[num8]))
								{
									array[num8] = (long)Math.Round((double)(array[num8] - 13L) / 2.0);
								}
								else
								{
									array[num8] = (long)Math.Round((double)(array[num8] - 12L) / 2.0);
								}
							}
							else
							{
								array[num8] = (long)((ulong)this.SQLDataTypeSize[(int)array[num8]]);
							}
							num8++;
						}
						while (num8 <= 4);
						if (decimal.Compare(new decimal(this.encoding), 1m) == 0)
						{
							this.master_table_entries[num2 + i].item_type = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(num5), new decimal(value))), (int)array[0]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 2m) == 0)
						{
							this.master_table_entries[num2 + i].item_type = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(num5), new decimal(value))), (int)array[0]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 3m) == 0)
						{
							this.master_table_entries[num2 + i].item_type = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(new decimal(num5), new decimal(value))), (int)array[0]);
						}
						if (decimal.Compare(new decimal(this.encoding), 1m) == 0)
						{
							this.master_table_entries[num2 + i].item_name = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0]))), (int)array[1]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 2m) == 0)
						{
							this.master_table_entries[num2 + i].item_name = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0]))), (int)array[1]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 3m) == 0)
						{
							this.master_table_entries[num2 + i].item_name = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0]))), (int)array[1]);
						}
						this.master_table_entries[num2 + i].root_num = (long)this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0])), new decimal(array[1])), new decimal(array[2]))), (int)array[3]);
						if (decimal.Compare(new decimal(this.encoding), 1m) == 0)
						{
							this.master_table_entries[num2 + i].sql_statement = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0])), new decimal(array[1])), new decimal(array[2])), new decimal(array[3]))), (int)array[4]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 2m) == 0)
						{
							this.master_table_entries[num2 + i].sql_statement = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0])), new decimal(array[1])), new decimal(array[2])), new decimal(array[3]))), (int)array[4]);
						}
						else if (decimal.Compare(new decimal(this.encoding), 3m) == 0)
						{
							this.master_table_entries[num2 + i].sql_statement = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(decimal.Add(decimal.Add(decimal.Add(new decimal(num5), new decimal(value)), new decimal(array[0])), new decimal(array[1])), new decimal(array[2])), new decimal(array[3]))), (int)array[4]);
						}
					}
				}
				else if (this.db_bytes[(int)Offset] == 5)
				{
					ushort num9 = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3m)), 2)), 1m));
					int num10 = 0;
					int num11 = (int)num9;
					for (int j = num10; j <= num11; j++)
					{
						ushort num12 = (ushort)this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 12m), new decimal(j * 2))), 2);
						if (decimal.Compare(new decimal(Offset), 100m) == 0)
						{
							this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger((int)num12, 4)), 1m), new decimal((int)this.page_size))));
						}
						else
						{
							this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger((int)(Offset + (ulong)num12), 4)), 1m), new decimal((int)this.page_size))));
						}
					}
					this.ReadMasterTable(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 8m)), 4)), 1m), new decimal((int)this.page_size))));
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x0000A61C File Offset: 0x0000881C
		private bool ReadTableFromOffset(ulong Offset)
		{
			bool result;
			try
			{
				if (this.db_bytes[(int)Offset] == 13)
				{
					ushort num = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3m)), 2)), 1m));
					int num2 = 0;
					if (this.table_entries != null)
					{
						num2 = this.table_entries.Length;
						this.table_entries = (SQLiteHandler.table_entry[])Utils.CopyArray((Array)this.table_entries, new SQLiteHandler.table_entry[this.table_entries.Length + (int)num + 1]);
					}
					else
					{
						this.table_entries = new SQLiteHandler.table_entry[(int)(num + 1)];
					}
					int num3 = 0;
					int num4 = (int)num;
					for (int i = num3; i <= num4; i++)
					{
						ulong num5 = this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 8m), new decimal(i * 2))), 2);
						if (decimal.Compare(new decimal(Offset), 100m) != 0)
						{
							num5 += Offset;
						}
						int num6 = this.GVL((int)num5);
						this.CVL((int)num5, num6);
						int num7 = this.GVL(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num6), new decimal(num5))), 1m)));
						this.table_entries[num2 + i].row_id = this.CVL(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num6), new decimal(num5))), 1m)), num7);
						num5 = Convert.ToUInt64(decimal.Add(decimal.Add(new decimal(num5), decimal.Subtract(new decimal(num7), new decimal(num5))), 1m));
						num6 = this.GVL((int)num5);
						num7 = num6;
						long num8 = this.CVL((int)num5, num6);
						long num9 = Convert.ToInt64(decimal.Add(decimal.Subtract(new decimal(num5), new decimal(num6)), 1m));
						int num10 = 0;
						SQLiteHandler.record_header_field[] array;
						while (num9 < num8)
						{
							array = (SQLiteHandler.record_header_field[])Utils.CopyArray((Array)array, new SQLiteHandler.record_header_field[num10 + 1]);
							num6 = num7 + 1;
							num7 = this.GVL(num6);
							array[num10].type = this.CVL(num6, num7);
							if (array[num10].type > 9L)
							{
								if (this.IsOdd(array[num10].type))
								{
									array[num10].size = (long)Math.Round((double)(array[num10].type - 13L) / 2.0);
								}
								else
								{
									array[num10].size = (long)Math.Round((double)(array[num10].type - 12L) / 2.0);
								}
							}
							else
							{
								array[num10].size = (long)((ulong)this.SQLDataTypeSize[(int)array[num10].type]);
							}
							num9 = num9 + (long)(num7 - num6) + 1L;
							num10++;
						}
						this.table_entries[num2 + i].content = new string[array.Length - 1 + 1];
						int num11 = 0;
						int num12 = 0;
						int num13 = array.Length - 1;
						for (int j = num12; j <= num13; j++)
						{
							if (array[j].type > 9L)
							{
								if (!this.IsOdd(array[j].type))
								{
									if (decimal.Compare(new decimal(this.encoding), 1m) == 0)
									{
										this.table_entries[num2 + i].content[j] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(num8)), new decimal(num11))), (int)array[j].size);
									}
									else if (decimal.Compare(new decimal(this.encoding), 2m) == 0)
									{
										this.table_entries[num2 + i].content[j] = Encoding.Unicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(num8)), new decimal(num11))), (int)array[j].size);
									}
									else if (decimal.Compare(new decimal(this.encoding), 3m) == 0)
									{
										this.table_entries[num2 + i].content[j] = Encoding.BigEndianUnicode.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(num8)), new decimal(num11))), (int)array[j].size);
									}
								}
								else
								{
									this.table_entries[num2 + i].content[j] = Encoding.Default.GetString(this.db_bytes, Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(num8)), new decimal(num11))), (int)array[j].size);
								}
							}
							else
							{
								this.table_entries[num2 + i].content[j] = Conversions.ToString(this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(num5), new decimal(num8)), new decimal(num11))), (int)array[j].size));
							}
							num11 = (int)((long)num11 + array[j].size);
						}
					}
				}
				else if (this.db_bytes[(int)Offset] == 5)
				{
					ushort num14 = Convert.ToUInt16(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 3m)), 2)), 1m));
					int num15 = 0;
					int num16 = (int)num14;
					for (int k = num15; k <= num16; k++)
					{
						ushort num17 = (ushort)this.ConvertToInteger(Convert.ToInt32(decimal.Add(decimal.Add(new decimal(Offset), 12m), new decimal(k * 2))), 2);
						this.ReadTableFromOffset(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger((int)(Offset + (ulong)num17), 4)), 1m), new decimal((int)this.page_size))));
					}
					this.ReadTableFromOffset(Convert.ToUInt64(decimal.Multiply(decimal.Subtract(new decimal(this.ConvertToInteger(Convert.ToInt32(decimal.Add(new decimal(Offset), 8m)), 4)), 1m), new decimal((int)this.page_size))));
				}
				result = true;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x0000AD84 File Offset: 0x00008F84
		public bool ReadTable(string TableName)
		{
			try
			{
				int num = -1;
				int num2 = 0;
				int num3 = this.master_table_entries.Length;
				int i = num2;
				while (i <= num3)
				{
					if (this.master_table_entries[i].item_name.ToLower().CompareTo(TableName.ToLower()) == 0)
					{
						num = i;
						IL_41:
						if (num == -1)
						{
							return false;
						}
						string[] array = this.master_table_entries[num].sql_statement.Substring(this.master_table_entries[num].sql_statement.IndexOf("(") + 1).Split(new char[]
						{
							','
						});
						int num4 = 0;
						int num5 = array.Length - 1;
						for (int j = num4; j <= num5; j++)
						{
							array[j] = Strings.LTrim(array[j]);
							int num6 = array[j].IndexOf(" ");
							if (num6 > 0)
							{
								array[j] = array[j].Substring(0, num6);
							}
							if (array[j].IndexOf("UNIQUE") == 0)
							{
								break;
							}
							this.field_names = (string[])Utils.CopyArray((Array)this.field_names, new string[j + 1]);
							this.field_names[j] = array[j];
						}
						return this.ReadTableFromOffset((ulong)((this.master_table_entries[num].root_num - 1L) * (long)((ulong)this.page_size)));
					}
					else
					{
						i++;
					}
				}
				goto IL_41;
			}
			catch (Exception ex)
			{
			}
			bool result;
			return result;
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x000024E4 File Offset: 0x000006E4
		public int GetRowCount()
		{
			return this.table_entries.Length;
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x0000AF38 File Offset: 0x00009138
		public string GetValue(int row_num, int field)
		{
			string result;
			try
			{
				if (row_num >= this.table_entries.Length)
				{
					result = null;
				}
				else if (field >= this.table_entries[row_num].content.Length)
				{
					result = null;
				}
				else
				{
					result = this.table_entries[row_num].content[field];
				}
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x0000AFA8 File Offset: 0x000091A8
		public string GetValue(int row_num, string field)
		{
			try
			{
				int num = -1;
				int num2 = 0;
				int num3 = this.field_names.Length;
				int i = num2;
				while (i <= num3)
				{
					if (this.field_names[i].ToLower().CompareTo(field.ToLower()) == 0)
					{
						num = i;
						IL_3C:
						if (num == -1)
						{
							return null;
						}
						return this.GetValue(row_num, num);
					}
					else
					{
						i++;
					}
				}
				goto IL_3C;
			}
			catch (Exception ex)
			{
			}
			string result;
			return result;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x0000B024 File Offset: 0x00009224
		public string[] GetTableNames()
		{
			string[] result;
			try
			{
				int num = 0;
				int num2 = 0;
				int num3 = this.master_table_entries.Length - 1;
				string[] array;
				for (int i = num2; i <= num3; i++)
				{
					if (Operators.CompareString(this.master_table_entries[i].item_type, "table", false) == 0)
					{
						array = (string[])Utils.CopyArray((Array)array, new string[num + 1]);
						array[num] = this.master_table_entries[i].item_name;
						num++;
					}
				}
				result = array;
			}
			catch (Exception ex)
			{
			}
			return result;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x0000B0C4 File Offset: 0x000092C4
		[MethodImpl(MethodImplOptions.NoOptimization)]
		public SQLiteHandler(string baseName)
		{
			this.SQLDataTypeSize = new byte[]
			{
				0,
				1,
				2,
				3,
				4,
				6,
				8,
				8,
				0,
				0
			};
			try
			{
				if (File.Exists(baseName))
				{
					FileSystem.FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared, -1);
					string s = Strings.Space((int)FileSystem.LOF(1));
					FileSystem.FileGet(1, ref s, -1L, false);
					FileSystem.FileClose(new int[]
					{
						1
					});
					this.db_bytes = Encoding.Default.GetBytes(s);
					if (Encoding.Default.GetString(this.db_bytes, 0, 15).CompareTo("SQLite format 3") != 0)
					{
						throw new Exception("Not a valid SQLite 3 Database File");
					}
					if (this.db_bytes[52] != 0)
					{
						throw new Exception("Auto-vacuum capable database is not supported");
					}
					if (decimal.Compare(new decimal(this.ConvertToInteger(44, 4)), 4m) >= 0)
					{
						throw new Exception("No supported Schema layer file-format");
					}
					this.page_size = (ushort)this.ConvertToInteger(16, 2);
					this.encoding = this.ConvertToInteger(56, 4);
					if (decimal.Compare(new decimal(this.encoding), 0m) == 0)
					{
						this.encoding = 1UL;
					}
					this.ReadMasterTable(100UL);
				}
			}
			catch (Exception ex)
			{
			}
		}

		// Token: 0x0400007C RID: 124
		private byte[] db_bytes;

		// Token: 0x0400007D RID: 125
		private ushort page_size;

		// Token: 0x0400007E RID: 126
		private ulong encoding;

		// Token: 0x0400007F RID: 127
		private SQLiteHandler.sqlite_master_entry[] master_table_entries;

		// Token: 0x04000080 RID: 128
		private byte[] SQLDataTypeSize;

		// Token: 0x04000081 RID: 129
		private SQLiteHandler.table_entry[] table_entries;

		// Token: 0x04000082 RID: 130
		private string[] field_names;

		// Token: 0x02000058 RID: 88
		private struct record_header_field
		{
			// Token: 0x04000197 RID: 407
			public long size;

			// Token: 0x04000198 RID: 408
			public long type;
		}

		// Token: 0x02000059 RID: 89
		private struct table_entry
		{
			// Token: 0x04000199 RID: 409
			public long row_id;

			// Token: 0x0400019A RID: 410
			public string[] content;
		}

		// Token: 0x0200005A RID: 90
		private struct sqlite_master_entry
		{
			// Token: 0x0400019B RID: 411
			public long row_id;

			// Token: 0x0400019C RID: 412
			public string item_type;

			// Token: 0x0400019D RID: 413
			public string item_name;

			// Token: 0x0400019E RID: 414
			public string astable_name;

			// Token: 0x0400019F RID: 415
			public long root_num;

			// Token: 0x040001A0 RID: 416
			public string sql_statement;
		}
	}
}
